     1                                  [map all ./Listings/edlin.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;EDLIN, an absolute last resort file editor.
     5                                  ;
     6                                  ;                       !!DONT FORGET!!
     7                                  ;       Each line is terminated first with 0Dh then 0Ah (CR,LF)
     8                                  ;                       !!DONT FORGET!!
     9                                  ;
    10                                  
    11                                  ;Edlin will always produce a backup file and refuses to open files 
    12                                  ; with .BAK extension (backup files)
    13                                  
    14                                  ;Edlin will always terminate a file with a single EOF character
    15                                  
    16                                  ;Edlin will erase the previous backup if one exists, ensuring there
    17                                  ; is enough free space for a new copy of the backup.
    18                                  ;It then creates a new file with the filename with a $$$ extension.
    19                                  ;All edits occur in memory and are flushed to it. We then rename it
    20                                  ; to the desired filename.
    21                                  ;BAK files cannot be opened.
    22                                  ;
    23                                  ;Empty lines are default just a CR,LF pair
    24                                  
    25                                  ;Edlin has two modes of operation: Command and Edit
    26                                  
    27                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro retbe 0
    81                              <1> cret be
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retae 0
    85                              <1> cret ae
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> ;A macro for returning to dos
    93                              <1> %macro retToDOS 1
    94                              <1>     mov eax, 04C00h | %1
    95                              <1>     int 21h
    96                              <1> %endmacro
    28                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    29                                  %include "./Include/edError.inc"
     1                              <1> ;Edlin specific errors
     2                              <1> 
     3                              <1> errOk       equ 0
     4                              <1> errBadRen   equ 1   ;Couldn't rename files.
     5                              <1> errDskFull  equ 2   ;Disk full.
     6                              <1> errBadRead  equ 3   ;Couldn't move file pointer or read file in append
     7                              <1> errBadBak   equ 4   ;Couldn't delete backup file
    30                                  %include "./Include/edStruc.inc"
     1                              <1> ;edlin structures
     2                              <1> lineLen     equ 253
     3                              <1> halflineLen equ 128
     4                              <1> maxLine     equ 65529
     5                              <1> maxAlloc    equ maxLine*lineLen
     6                              <1> maxParas    equ (maxAlloc >> 4) + 1
     7                              <1> 
     8                              <1> prompt      equ "*"
     9                              <1> 
    10                              <1> ;Bona-Fida Structures
    11                              <1> 
    12                              <1> struc line
    13 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (255)
    14 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    15 00000002 <res FDh>           <1>     .pString    db lineLen dup (?)      ;Actual string itself
    16                              <1> endstruc
    17                              <1> 
    18                              <1> struc halfLine
    19 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (130)
    20 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    21 00000002 <res 80h>           <1>     .pString    db halflineLen dup (?)   ;Actual string itself
    22                              <1> endstruc
    23                              <1> 
    24                              <1> struc filename
    25                              <1> ;8.3 File name struct
    26 00000000 ????????????????    <1>     .fName  resb 8
    27 00000008 ??????              <1>     .fExt   resb 3
    28                              <1> endstruc
    31                                  %include "./Include/dosStruc.inc"
     1                              <1> ;Structures and equates coming from DOS
     2                              <1> 
     3                              <1> ;MISC ASCII control chars
     4                              <1> NUL equ 00h ;^@         | ASCII Null
     5                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text)
     6                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
     7                              <1> BEL equ 07h ;^G         | ASCII Bell
     8                              <1> BSP equ 08h ;^H         | ASCII Backspace
     9                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
    10                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
    11                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
    12                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
    13                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
    14                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
    15                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
    16                              <1> CMD equ 16h ;^V         | EDLIN COMMAND CHAR
    17                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
    18                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
    19                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
    20                              <1> SPC equ 20h ;Printable  | ASCII Space
    21                              <1> ;This last one is NEVER printed with a caret as it is a console control char
    22                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
    23                              <1> 
    24                              <1> CRLF equ 0A0Dh
    25                              <1> 
    26                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
    27                              <1> asciiMask   equ asciiCaret - 1  ;Turn into a bitmask
    28                              <1> 
    29                              <1> ;Extended Ascii Codes
    30                              <1> eF1     equ 3Bh ;F1 second byte
    31                              <1> eF2     equ 3Ch ;F2 second byte
    32                              <1> eF3     equ 3Dh ;F3 second byte
    33                              <1> eF4     equ 3Eh ;F4 second byte
    34                              <1> eF5     equ 3Fh ;F5 second byte
    35                              <1> eF6     equ 40h ;F6 second byte
    36                              <1> eF7     equ 41h ;F7 second byte
    37                              <1> eCursL  equ 4Bh ;Cursor Left second byte
    38                              <1> eCursR  equ 4Dh ;Cursor Right second byte
    39                              <1> eIns    equ 52h ;Insert second byte
    40                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
    41                              <1> 
    42                              <1> ;Directory attribute equates
    43                              <1>     dirReadOnly     equ 01h
    44                              <1>     dirHidden       equ 02h
    45                              <1>     dirSystem       equ 04h
    46                              <1>     dirVolumeID     equ 08h
    47                              <1>     dirDirectory    equ 10h
    48                              <1>     dirArchive      equ 20h
    49                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    50                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    51                              <1>     ;If any of the three bits are set, then ALL three bits are set
    52                              <1>     ; in addition to whatever the user passed to search for.
    53                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    54                              <1>     dirIncFiles     equ dirHidden | dirSystem
    55                              <1> 
    56                              <1> struc cmdArgs   ;Ptr returned in rdx after 41h/6101h has this structure
    57 00000000 <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1
    58 00000010 <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
    59                              <1>     .dta:   ;Pointer to the default DTA in the
    60 00000024 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
    61 00000025 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
    62                              <1> endstruc
    63                              <1> 
    64                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
    65 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
    66 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
    67 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
    68 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
    69 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
    70 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
    71 00000016 ????                <1>     .fileTime   resw 1  ;File time
    72 00000018 ????                <1>     .fileDate   resw 1  ;File date
    73 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
    74 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;Open Mode equates
    78                              <1> ;Access modes   Bits[2:0]
    79                              <1> ReadAccess      equ 0h
    80                              <1> WriteAccess     equ 1h
    81                              <1> RWAccess        equ 2h
    82                              <1> ;Bit 3 reserved 0
    83                              <1> ;Sharing modes  Bits[6:4]
    84                              <1> CompatShare     equ 0h
    85                              <1> denyRWShare     equ 10h
    86                              <1> denyWriteShare  equ 20h
    87                              <1> denyReadShare   equ 30h
    88                              <1> denyNoneShare   equ 40h
    89                              <1> netFCBShare     equ 70h
    90                              <1> noInherit       equ 80h
    32                                  Segment .text align=1 
    33                                  progHeadPtr:      ;DO NOT TOUCH THIS POINTER. ALL TABLES ARE REL THIS PTR.
    34                                  %include "./Source/edmain.asm"
     1                              <1> ;Contains the program loader
     2                              <1> start:
     3 00000000 EB01                <1>     jmp short .cVersion
     4 00000002 01                  <1> .vNum:          db 1    ;Main version number, patchable
     5                              <1> .cVersion:
     6 00000003 FC                  <1>     cld
     7 00000004 B800300000          <1>     mov eax, 3000h  ;Get version number
     8 00000009 CD21                <1>     int 21h
     9 0000000B 3A05F1FFFFFF        <1>     cmp al, byte [.vNum]
    10 00000011 760C                <1>     jbe short okVersion
    11 00000013 488D15(5B000000)    <1>     lea rdx, badVerStr
    12 0000001A E928050000          <1>     jmp badExitMsg
    13                              <1> okVersion:
    14                              <1> ;Initialise the BSS to 0
    15 0000001F 488D3D(00000000)    <1>     lea rdi, section..bss.start
    16 00000026 48B92F060000000000- <1>     mov rcx, bssLen
    16 0000002F 00                  <1>
    17 00000030 31C0                <1>     xor eax, eax
    18 00000032 F3AA                <1>     rep stosb
    19                              <1> ;Now move the stack pointer to its new position and reallocate!
    20 00000034 488D25(40060000)    <1>     lea rsp, stackTop
    21 0000003B 488D1D(40060000)    <1>     lea rbx, endOfProgram   ;Guaranteed paragraph alignment
    22 00000042 4C29C3              <1>     sub rbx, r8 ;Get number of bytes in block
    23 00000045 48C1EB04            <1>     shr rbx, 4  ;Convert to paragraphs
    24 00000049 48FFC3              <1>     inc rbx     ;Add one more paragraph for good measure
    25 0000004C B8004A0000          <1>     mov eax, 4A00h
    26 00000051 CD21                <1>     int 21h
    27 00000053 488D15(66010000)    <1>     lea rdx, badRealloc
    28 0000005A 0F82E7040000        <1>     jc badExitMsg
    29                              <1> ;One command line argument except for mandatory filename, /B=(binary read)
    30 00000060 B800370000          <1>     mov eax, 3700h
    31 00000065 CD21                <1>     int 21h
    32 00000067 B85C000000          <1>     mov eax, "\"    ;Default pathsep
    33 0000006C B92F000000          <1>     mov ecx, "/"    ;Alternative pathsep
    34 00000071 80FA2D              <1>     cmp dl, "-"     ;Is the switch char default or alternative?
    35 00000074 0F44C1              <1>     cmove eax, ecx  ;Move if alternative
    36 00000077 8815(01000000)      <1>     mov byte [switchChar], dl
    37 0000007D 8805(00000000)      <1>     mov byte [pathSep], al
    38                              <1> getCmdTail:
    39 00000083 B801610000          <1>     mov eax, 6101h  ;Get parsed FCB and cmdtail for filename in rdx
    40 00000088 CD21                <1>     int 21h
    41                              <1> ;Now parse the command line, to get full command spec for filename.
    42 0000008A 488D7225            <1>     lea rsi, qword [rdx + cmdArgs.progTail]     ;Get ptr to tail
    43 0000008E 4889D5              <1>     mov rbp, rdx        ;Save the cmdArgs ptr for use when checking drive ok
    44                              <1> cmdTailParse:
    45 00000091 E85B000000          <1>     call .skipSeps      ;Skips leading terminators
    46 00000096 3C0D                <1>     cmp al, CR          ;If al is CR, we are done!
    47 00000098 0F8496000000        <1>     je .parseComplete
    48 0000009E 3A05(01000000)      <1>     cmp al, byte [switchChar]       ;If al is a switchchar, rsi points to it!
    49 000000A4 7426                <1>     je .switchFnd
    50                              <1> ;Else it must be a file name!
    51 000000A6 48813D(3E010000)00- <1>     cmp qword [tmpNamePtr], 0
    51 000000AE 000000              <1>
    52 000000B1 7539                <1>     jnz .parseBadExit   ;If this is not empty, too many filenames specified!
    53 000000B3 488935(3E010000)    <1>     mov qword [tmpNamePtr], rsi     ;Save the pointer here :)
    54 000000BA E83E000000          <1>     call .findSep                   ;Find the end of the filename
    55 000000BF 488935(46010000)    <1>     mov qword [tmpNamePtr2], rsi    ;And save it here 
    56 000000C6 3C0D                <1>     cmp al, CR                      ;Did we terminate with a CR?
    57 000000C8 746A                <1>     je .parseComplete               ;If so, we are done!
    58 000000CA EBC5                <1>     jmp short cmdTailParse          ;Else, keep parsing!
    59                              <1> .switchFnd:
    60 000000CC 48FFC6              <1>     inc rsi                 ;Go to the char past the switch
    61 000000CF AC                  <1>     lodsb                   ;Get the switchchar itself, advance rsi
    62 000000D0 24DF                <1>     and al, ~20h            ;Clear the LC bit from the char
    63 000000D2 3C42                <1>     cmp al, "B"
    64 000000D4 7516                <1>     jne .parseBadExit
    65 000000D6 C605(04000000)FF    <1>     mov byte [noEofChar], -1   ;Set the internal flag
    66 000000DD AC                  <1>     lodsb                   ;Now do lookahead
    67 000000DE 48FFCE              <1>     dec rsi                 ;Get the char rsi is pointing to, after B
    68 000000E1 3C0D                <1>     cmp al, CR              ;If this is a CR, we are done!
    69 000000E3 744F                <1>     je .parseComplete 
    70 000000E5 E82B000000          <1>     call .isAlSep           ;Is the char after /B a sep?
    71 000000EA 74A5                <1>     jz cmdTailParse         ;If so, keep parsing
    72                              <1> .parseBadExit:              ;Else, fallthru to error
    73 000000EC E94F040000          <1>     jmp badParmExit
    74                              <1> .skipSeps:
    75                              <1> ;Leaves rsi pointing to the first non-separator char
    76 000000F1 AC                  <1>     lodsb
    77 000000F2 E81E000000          <1>     call .isAlSep
    78 000000F7 74F8                <1>     jz .skipSeps
    79 000000F9 48FFCE              <1>     dec rsi     ;Always return to the char itself!
    80                              <1>     return
    13                              <2> %%_ret:
    14 000000FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    81                              <1> .findSep:
    82                              <1> ;Leaves rsi pointing to the first found separator char, CR or switchChar
    83                              <1> ;Input: rsi -> pathspec to find end of
    84 000000FD AC                  <1>     lodsb
    85 000000FE 3C0D                <1>     cmp al, CR
    86 00000100 740F                <1>     je .fsExit
    87 00000102 3A05(01000000)      <1>     cmp al, byte [switchChar]
    88 00000108 7407                <1>     je .fsExit
    89 0000010A E806000000          <1>     call .isAlSep
    90 0000010F 75EC                <1>     jnz .findSep
    91                              <1> .fsExit:
    92 00000111 48FFCE              <1>     dec rsi
    93                              <1>     return
    13                              <2> %%_ret:
    14 00000114 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    94                              <1> .isAlSep:
    95                              <1> ;Checks if al is a terminator char. Sets ZF if so.
    96                              <1> ;Input: al = Char to check.
    97 00000115 3C20                <1>     cmp al, SPC
    98                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000117 74(14)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    99 00000119 3C09                <1>     cmp al, TAB
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000011B 74(14)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   101 0000011D 3C3B                <1>     cmp al, ";"
   102                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000011F 74(14)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   103 00000121 3C2C                <1>     cmp al, ","
   104                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000123 74(14)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   105 00000125 3C3D                <1>     cmp al, "="
   106                              <1>     return
    13                              <2> %%_ret:
    14 00000127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> .nameBadExit:
   108 00000128 488D15(9E000000)    <1>     lea rdx, badNameStr
   109 0000012F E913040000          <1>     jmp badExitMsg
   110                              <1> .parseComplete:
   111                              <1> ;Check we have a pointer to a filename AT LEAST.
   112 00000134 48813D(3E010000)00- <1>     cmp qword [tmpNamePtr], 0
   112 0000013C 000000              <1>
   113 0000013F 74E7                <1>     je .nameBadExit
   114                              <1> ;Now we copy the filename internally.
   115                              <1> nameCopy:
   116 00000141 488D3D(3E000000)    <1>     lea rdi, pathspec   ;Store in the pathspec
   117 00000148 488B35(3E010000)    <1>     mov rsi, qword [tmpNamePtr]
   118 0000014F B81A120000          <1>     mov eax, 121Ah  ;Get the file drive, advance rsi if X:
   119 00000154 CD2F                <1>     int 2Fh
   120 00000156 84C0                <1>     test al, al
   121 00000158 7509                <1>     jnz .notCurDrv
   122 0000015A B800190000          <1>     mov eax, 1900h  ;Get the current drive in al
   123 0000015F CD21                <1>     int 21h
   124 00000161 FEC0                <1>     inc al  ;Turn it into a 1 based number
   125                              <1> .notCurDrv:
   126 00000163 88C2                <1>     mov dl, al  ;Save the 1-based drive letter in dl
   127 00000165 0440                <1>     add al, "@" ;Convert into a drive letter
   128 00000167 B43A                <1>     mov ah, ":"
   129 00000169 66AB                <1>     stosw   ;Store the drive letter in the buffer, adv rdi by 2
   130 0000016B AC                  <1>     lodsb   ;Get the first char from the pathspec given...
   131 0000016C 48FFCE              <1>     dec rsi ;...and go back to this char
   132 0000016F 3A05(00000000)      <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we have abs path!
   133 00000175 7431                <1>     je .cpLp    ;Avoid getting the current directory and copy immediately!
   134 00000177 8A05(00000000)      <1>     mov al, byte [pathSep]  ;Get a pathsep
   135 0000017D AA                  <1>     stosb       ;and store it, incrementing rdi
   136 0000017E 56                  <1>     push rsi    ;Save the source of chars in the spec now
   137 0000017F 4889FE              <1>     mov rsi, rdi
   138 00000182 B800470000          <1>     mov eax, 4700h  ;Get current dir for drive in here
   139 00000187 CD21                <1>     int 21h
   140 00000189 5E                  <1>     pop rsi     ;Get back the source of chars 
   141 0000018A 0F82A7030000        <1>     jc badDrvExit
   142 00000190 B812120000          <1>     mov eax, 1212h  ;Strlen from char past leading sep, get the length in ecx 
   143 00000195 CD2F                <1>     int 2fh
   144 00000197 FFC9                <1>     dec ecx         ;Drop the terminating null from the count
   145 00000199 4801CF              <1>     add rdi, rcx    ;Go to the terminating null
   146 0000019C 8A05(00000000)      <1>     mov al, byte [pathSep]
   147 000001A2 3847FF              <1>     cmp byte [rdi - 1], al  ;If the char behind is a pathsep, skip doubling!
   148 000001A5 7401                <1>     je .cpLp
   149 000001A7 AA                  <1>     stosb           ;Store the pathsep over this null, inc rdi
   150                              <1> .cpLp:
   151 000001A8 A4                  <1>     movsb   ;Now copy one char at a time
   152 000001A9 483B35(46010000)    <1>     cmp rsi, qword [tmpNamePtr2]    ;Check if we are equal to end of string ptr
   153 000001B0 75F6                <1>     jne short .cpLp
   154 000001B2 31C0                <1>     xor eax, eax
   155 000001B4 AA                  <1>     stosb   ;Store the null terminating char
   156                              <1> ;Now we normalise the pathspec
   157 000001B5 488D35(3E000000)    <1>     lea rsi, pathspec
   158 000001BC 4889F7              <1>     mov rdi, rsi
   159 000001BF B811120000          <1>     mov eax, 1211h  ;Normalise the pathspec provided
   160 000001C4 CD2F                <1>     int 2fh 
   161                              <1> ;Now we produce a backup/working filespec
   162 000001C6 488D35(3E000000)    <1>     lea rsi, pathspec
   163 000001CD 488D3D(BE000000)    <1>     lea rdi, wkfile ;This pathspec always has an extension
   164 000001D4 E8B2060000          <1>     call strcpy
   165                              <1> ;rbp still has the cmdArgs ptr. Use it here for the fcb!!
   166 000001D9 488D7D00            <1>     lea rdi, qword [rbp + cmdArgs.fcb1]
   167 000001DD B801290000          <1>     mov eax, 2901h
   168 000001E2 CD21                <1>     int 21h
   169 000001E4 3CFF                <1>     cmp al, -1  ;If this is the case, the drive specified is bad!
   170 000001E6 0F844B030000        <1>     je badDrvExit
   171                              <1> ;Now invalidate tmpNamePtr and tmpNamePtr2
   172 000001EC 31C9                <1>     xor ecx, ecx
   173 000001EE 48890D(3E010000)    <1>     mov qword [tmpNamePtr], rcx
   174 000001F5 48890D(46010000)    <1>     mov qword [tmpNamePtr2], rcx
   175 000001FC FFC9                <1>     dec ecx
   176 000001FE 488D3D(BE000000)    <1>     lea rdi, wkfile
   177 00000205 4889FB              <1>     mov rbx, rdi    ;Save address of head of file name
   178 00000208 31C0                <1>     xor eax, eax
   179 0000020A F2AE                <1>     repne scasb     ;rdi points past terminating null
   180 0000020C 4889FE              <1>     mov rsi, rdi
   181 0000020F FD                  <1>     std             ;Go in reverse now
   182                              <1> .fileNameSearch:
   183 00000210 AC                  <1>     lodsb
   184 00000211 3A05(00000000)      <1>     cmp al, byte [pathSep]  ;Are we at a pathsep?
   185 00000217 740C                <1>     je .fileNameOk  ;Yes, stop scanning
   186 00000219 4839DE              <1>     cmp rsi, rbx    ;Are we at the head of the path?
   187 0000021C 75F2                <1>     jne .fileNameSearch ;If not, keep going back
   188 0000021E 4881EE02000000      <1>     sub rsi, 2  ;Pretend we are past a pathSep
   189                              <1> .fileNameOk:
   190 00000225 4881C602000000      <1>     add rsi, 2  ;Now point to the first char of the buffer!
   191 0000022C 488935(3E010000)    <1>     mov qword [fileNamePtr], rsi    ;Save the ptr
   192 00000233 FC                  <1>     cld         ;Now go forwards!
   193 00000234 B908000000          <1>     mov ecx, 8  ;number of chars to search thru
   194                              <1> .extSearch:
   195 00000239 AC                  <1>     lodsb
   196 0000023A 84C0                <1>     test al, al
   197 0000023C 740B                <1>     jz .insertExt
   198 0000023E 3C2E                <1>     cmp al, "."
   199 00000240 7411                <1>     je .extFound
   200 00000242 FFC9                <1>     dec ecx
   201 00000244 75F3                <1>     jnz .extSearch    
   202 00000246 48FFC6              <1>     inc rsi ;Go to the next position so the below works
   203                              <1> .insertExt:
   204                              <1>     ;rsi points just past the null
   205 00000249 C646FF2E            <1>     mov byte [rsi - 1], "." ;Store a pathsep
   206 0000024D C70620202000        <1>     mov dword [rsi], "   "   ;Store empty extension so no accidental BAK issues.
   207                              <1> .extFound:
   208 00000253 488935(46010000)    <1>     mov qword [fileExtPtr], rsi
   209                              <1> ;Now we have all the metadata for the filename we are working with
   210 0000025A 8B06                <1>     mov eax, dword [rsi]
   211 0000025C 3D42414B00          <1>     cmp eax, "BAK"  ;Is this a bakup file?
   212 00000261 488D15(BE010000)    <1>     lea rdx, badFileExt
   213 00000268 0F84D9020000        <1>     je badExitMsg   ;If yes, error!
   214 0000026E C70624242400        <1>     mov dword [rsi], "$$$"   ;Now we store working file $$$ extension 
   215                              <1> ;Now we check to make sure the path has no global filename chars
   216                              <1> wildcardCheck:
   217 00000274 488D35(3E000000)    <1>     lea rsi, pathspec
   218                              <1> .mainlp:
   219 0000027B AC                  <1>     lodsb
   220 0000027C 84C0                <1>     test al, al ;Once we're at the null char, proceed
   221 0000027E 740C                <1>     jz fileOpen
   222 00000280 3C3F                <1>     cmp al, "?"
   223 00000282 0F84AF020000        <1>     je badDrvExit
   224 00000288 3C2A                <1>     cmp al, "*"
   225 0000028A 75EF                <1>     jne .mainlp
   226                              <1> ;Now we open the file to check if it exists and if it does, if it is readonly
   227                              <1> fileOpen:
   228                              <1> ;first set the handles to -1
   229 0000028C C705(3A000000)FFFF- <1>     mov dword [readHdl], -1 ;Init the handles to -1
   229 00000294 FFFF                <1>
   230                              <1> ;Now we search for the file
   231 00000296 488D15(3E000000)    <1>     lea rdx, pathspec
   232 0000029D B906000000          <1>     mov ecx, dirIncFiles
   233 000002A2 B8004E0000          <1>     mov eax, 4E00h  ;Find First 
   234 000002A7 CD21                <1>     int 21h
   235 000002A9 723B                <1>     jc .fileNotFound
   236                              <1> ;Check if file is read only
   237 000002AB B8002F0000          <1>     mov eax, 2F00h  ;Get a pointer to the DTA in rbx
   238 000002B0 CD21                <1>     int 21h
   239 000002B2 0FB64315            <1>     movzx eax, byte [rbx + ffBlock.attribFnd]
   240 000002B6 A801                <1>     test al, dirReadOnly
   241 000002B8 7407                <1>     jz short .notReadOnly
   242                              <1> .readOnly:
   243                              <1> ;Read only files here
   244 000002BA C605(02000000)FF    <1>     mov byte [roFlag], -1   ;Set read only flag!
   245                              <1> .notReadOnly:
   246                              <1> ;File exists, lets open it, to read from
   247 000002C1 B8203D0000          <1>     mov eax, (3Dh << 8) | ReadAccess | denyWriteShare
   248 000002C6 488D15(3E000000)    <1>     lea rdx, pathspec    ;Get the pointer to the working filename
   249 000002CD CD21                <1>     int 21h         ;Open the file
   250 000002CF 730C                <1>     jnc short .backupOpened
   251                              <1> ;File failed to open
   252 000002D1 488D15(DB000000)    <1>     lea rdx, badOpenStr
   253 000002D8 E96A020000          <1>     jmp badExitMsg
   254                              <1> .backupOpened:
   255                              <1> ;Backup opened and handle in ax.
   256 000002DD 668905(3A000000)    <1>     mov word [readHdl], ax  ;Store the read handle here
   257 000002E4 EB1F                <1>     jmp short createWorkingFile
   258                              <1> .fileNotFound:
   259                              <1> ;Maybe new file? Check reason for error! If FNF, its good!
   260 000002E6 663D0200            <1>     cmp ax, errFnf  ;If its a file not found error, then we are good!
   261 000002EA 488D15(DB000000)    <1>     lea rdx, badOpenStr ;We can't open the file for whatever reason
   262 000002F1 0F8550020000        <1>     jne badExitMsg
   263                              <1> ;Error was file not found so we can make the file!
   264 000002F7 C605(03000000)FF    <1>     mov byte [newFileFlag], -1  ;Set the new file flag!
   265 000002FE C605(05000000)FF    <1>     mov byte [eofReached], -1   ;Setup that we at eof
   266                              <1> createWorkingFile:
   267                              <1> ;Now open a new file with triple question mark extension
   268                              <1> ;rdi -> Path to file with $$$ (the working file)
   269 00000305 488D15(BE000000)    <1>     lea rdx, wkfile    ;Get a pointer to this filename
   270 0000030C B8005B0000          <1>     mov eax, 5B00h  ;Create file (atomic), prevent two edlins from editing same file
   271 00000311 31C9                <1>     xor ecx, ecx    ;Clear all file attributes (normal file)
   272 00000313 CD21                <1>     int 21h
   273 00000315 488D15(BC000000)    <1>     lea rdx, badCreatStr    ;Creating the working file will fail if already exits
   274 0000031C 0F8225020000        <1>     jc badExitMsg   ;This prevents someone from overriding the file
   275 00000322 668905(3C000000)    <1>     mov word [writeHdl], ax ;Store a pointer to the write handle
   276 00000329 F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;If set, this is a new file!
   277 00000330 740E                <1>     jz short .notNewFile
   278 00000332 488D15(3C000000)    <1>     lea rdx, newStr
   279 00000339 B800090000          <1>     mov eax, 0900h
   280 0000033E CD21                <1>     int 21h
   281                              <1> .notNewFile:
   282                              <1> ;Now the following:
   283                              <1> ;1) Allocate max memory (1Mb max)
   284                              <1> ;2) If new file, goto 4. Print "new file" message
   285                              <1> ;3) Else, fill up to 75% of arena according to table. If 
   286                              <1> ;    EOF reached (either due to no bytes left or ^Z (if enabled))
   287                              <1> ;    print "EOF reached message".
   288                              <1> ;4) Install Int 23h handler
   289                              <1> ;5) Goto main loop
   290                              <1> allocateMemory:
   291 00000340 31DB                <1>     xor ebx, ebx
   292 00000342 BB00000100          <1>     mov ebx, 10000h ;Start trying to allocate at 1Mb
   293 00000347 B800480000          <1>     mov eax, 4800h
   294 0000034C CD21                <1>     int 21h
   295 0000034E 731E                <1>     jnc short .loadProgram
   296                              <1>     ;If the allocation failed, eax has max paragraphs
   297 00000350 3D10000000          <1>     cmp eax, 10h    ;If we have less than 256 bytes available, fail
   298 00000355 720B                <1>     jb short .notEnoughMem
   299 00000357 89C3                <1>     mov ebx, eax    ;Get the number of paragraphs into ebx for request
   300 00000359 B800480000          <1>     mov eax, 4800h
   301 0000035E CD21                <1>     int 21h
   302 00000360 730C                <1>     jnc short .loadProgram
   303                              <1> .notEnoughMem:
   304 00000362 488D15(7B010000)    <1>     lea rdx, badMemFull
   305 00000369 E9D9010000          <1>     jmp badExitMsg
   306                              <1> .loadProgram:
   307                              <1> ;rax has pointer here
   308 0000036E 488905(0E000000)    <1>     mov qword [memPtr], rax
   309 00000375 4889C6              <1>     mov rsi, rax
   310 00000378 C1E304              <1>     shl ebx, 4  ;Multiply by 16 to get number of bytes
   311 0000037B 4801DE              <1>     add rsi, rbx
   312 0000037E 48FFCE              <1>     dec rsi     ;Point rsi to the last char of the arena
   313 00000381 488935(30000000)    <1>     mov qword [endOfArena], rsi
   314 00000388 891D(06000000)      <1>     mov dword [arenaSize], ebx  ;Save number of bytes in arena here
   315 0000038E F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;We skip setting the 1/4 and 3/4 markers 
   316 00000395 7522                <1>     jnz .newFile
   317 00000397 4889C6              <1>     mov rsi, rax    ;Save the pointer to memory arena in rsi
   318 0000039A 31C9                <1>     xor ecx, ecx    ;Zero the upper 32 bits
   319 0000039C 678D0C5B            <1>     lea ecx, dword [2*ebx + ebx]    ;Multiply ebx by 3 into ecx
   320 000003A0 C1E902              <1>     shr ecx, 2  ;Divide by 4 to get # of bytes to default fill by
   321 000003A3 890D(16000000)      <1>     mov dword [fillPtr], ecx   ;Save number of bytes to fill arena with
   322 000003A9 480105(16000000)    <1>     add qword [fillPtr], rax   ;Turn into offset from start of arena
   323 000003B0 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get # of bytes to default free until
   324 000003B3 891D(0A000000)      <1>     mov dword [freeCnt], ebx   ;Save number of bytes to free from the arena
   325                              <1> .newFile:
   326                              <1> ;Now we setup the edit and command buffers
   327 000003B9 C605(65020000)FD    <1>     mov byte [workLine + line.bBufLen], lineLen
   328 000003C0 C605(4E010000)80    <1>     mov byte [cmdLine + line.bBufLen], halflineLen
   329 000003C7 66C705(1E000000)01- <1>     mov word [curLineNum], 1    ;Start at line 1
   329 000003CF 00                  <1>
   330 000003D0 488905(20000000)    <1>     mov qword [curLinePtr], rax
   331 000003D7 C6001A              <1>     mov byte [rax], EOF ;Store an EOF at the start of the buffer!
   332 000003DA 488905(28000000)    <1>     mov qword [eofPtr], rax
   333                              <1> ;Nice trick, ensure we dont print any errors on append when initially loading the
   334                              <1> ; file! Since we are appending, we setup as if the user typed in an arg. 
   335                              <1> ;arg1 is already zero due to BSS zeroing
   336 000003E1 C605(D8010000)01    <1>     mov byte [argCnt], 1    ;Default to one argument! arg1 = 0 means load to 3/4!
   337 000003E8 F605(03000000)FF    <1>     test byte [newFileFlag], -1
   338 000003EF 7513                <1>     jnz getCommand
   339 000003F1 C605(64020000)FF    <1>     mov byte [noAppendErr], -1
   340 000003F8 E8100E0000          <1>     call appendLines
   341 000003FD C605(64020000)00    <1>     mov byte [noAppendErr], 0
   342                              <1> getCommand:
   343 00000404 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset the stack pointer
   344 0000040B 488D1513060000      <1>     lea rdx, i23h
   345 00000412 B823250000          <1>     mov eax, 2523h  ;Set Interrupt handler for Int 23h
   346 00000417 CD21                <1>     int 21h
   347 00000419 B82A000000          <1>     mov eax, prompt
   348 0000041E E84B110000          <1>     call printChar
   349 00000423 488D15(4E010000)    <1>     lea rdx, cmdLine
   350 0000042A B8000A0000          <1>     mov eax, 0A00h  ;Take buffered input.
   351 0000042F CD21                <1>     int 21h
   352 00000431 E836110000          <1>     call printLF 
   353 00000436 488D35(50010000)    <1>     lea rsi, qword [cmdLine + halfLine.pString] ;Point to the text of the line
   354 0000043D 488935(D0010000)    <1>     mov qword [charPtr], rsi
   355                              <1> ;Now we parse the command line!
   356                              <1> ;NOTE: Multiple commands may be on the same command line.
   357                              <1> ;Commands are terminated by a command letter (except in the
   358                              <1> ; case of S and R where they may be followed by a string).
   359                              <1> ;If we encounter a CR in the string parsing, then we are
   360                              <1> ; finished with this command line. Else, we keep parsing the
   361                              <1> ; same command line, until all the chars in the buffer 
   362                              <1> ; have been processed and/or a CR has been hit.
   363                              <1> parseCommand:
   364 00000444 31C0                <1>     xor eax, eax
   365 00000446 8805(D8010000)      <1>     mov byte [argCnt], al
   366 0000044C 488905(D9010000)    <1>     mov qword [argTbl], rax ;Clear the argument table
   367 00000453 8805(E1010000)      <1>     mov byte [qmarkSet], al
   368 00000459 488B35(D0010000)    <1>     mov rsi, qword [charPtr]    ;Get rsi to the right place in command line
   369 00000460 488D2D(D9010000)    <1>     lea rbp, argTbl
   370                              <1> .parse:
   371 00000467 FE05(D8010000)      <1>     inc byte [argCnt]   ;Parsing an argument
   372 0000046D E8E0040000          <1>     call parseEntry ;Returns in bx the word to store in the arg table
   373 00000472 0FB63D(D8010000)    <1>     movzx edi, byte [argCnt]
   374 00000479 FFCF                <1>     dec edi ;Turn into offset
   375 0000047B 66895C7D00          <1>     mov word [rbp + 2*rdi], bx  ;Store the argument
   376 00000480 48FFCE              <1>     dec rsi     ;Go back to the first char past the argument
   377 00000483 E86E050000          <1>     call skipSpaces ;Skip spaces
   378 00000488 3C2C                <1>     cmp al, "," ;Is the first char the argument separator?
   379 0000048A 74DB                <1>     je .parse
   380 0000048C 48FFCE              <1>     dec rsi ;Move rsi back to the non comma char
   381 0000048F E862050000          <1>     call skipSpaces
   382 00000494 3C3F                <1>     cmp al, "?"
   383 00000496 750C                <1>     jne short .notQmark
   384 00000498 C605(E1010000)FF    <1>     mov byte [qmarkSet], -1
   385 0000049F E852050000          <1>     call skipSpaces ;Get the next char (must be a cmd char) in al
   386                              <1> .notQmark:
   387 000004A4 3C61                <1>     cmp al, "a"
   388 000004A6 7202                <1>     jb short .noUC
   389 000004A8 24DF                <1>     and al, 0DFh    ;Convert cmd char to upper case if LC 
   390                              <1> .noUC:
   391 000004AA 488D3D(00000000)    <1>     lea rdi, cmdLetterTable
   392 000004B1 B90F000000          <1>     mov ecx, cmdLetterTableL
   393 000004B6 F2AE                <1>     repne scasb
   394 000004B8 0F85D3110000        <1>     jne printComErr ;Print an error if char not in table
   395 000004BE F7D1                <1>     not ecx ;1's compliment to subtract 1 too
   396 000004C0 81C10F000000        <1>     add ecx, cmdLetterTableL    ;Get L->R offset into table
   397                              <1> ;Now check the R/O permissions for the selected function
   398                              <1> ;ecx has the offset into the table
   399 000004C6 F605(02000000)FF    <1>     test byte [roFlag], -1  ;If this flag is not set, ignore r/o
   400 000004CD 7421                <1>     jz short execCmd
   401 000004CF 488D2D(2D000000)    <1>     lea rbp, cmdRoTable
   402 000004D6 F6440D00FF          <1>     test byte [rbp + rcx], -1   ;Test the flag
   403 000004DB 7513                <1>     jnz short execCmd
   404 000004DD 488D15(E3010000)    <1>     lea rdx, badROcmd
   405 000004E4 B800090000          <1>     mov eax, 0900h
   406 000004E9 CD21                <1>     int 21h
   407 000004EB E9A1110000          <1>     jmp printComErr
   408                              <1> execCmd:
   409 000004F0 488935(D0010000)    <1>     mov qword [charPtr], rsi
   410 000004F7 488D2D(0F000000)    <1>     lea rbp, cmdFcnTable
   411 000004FE 480FBF5C4D00        <1>     movsx rbx, word [rbp + 2*rcx]    ;Get word ptr into rbx
   412 00000504 4801EB              <1>     add rbx, rbp    ;Convert the word offset from cmdFcnTbl to pointer
   413 00000507 FFD3                <1>     call rbx
   414                              <1> nextCmd:
   415 00000509 488B35(D0010000)    <1>     mov rsi, qword [charPtr]
   416 00000510 E8E1040000          <1>     call skipSpaces ;Now move to the "following command" or CR
   417 00000515 3C0D                <1>     cmp al, CR
   418 00000517 0F84E7FEFFFF        <1>     je getCommand   ;If CR, end of line. Get new command
   419 0000051D 3C1A                <1>     cmp al, EOF
   420 0000051F 7404                <1>     je short .eocChar
   421 00000521 3C3B                <1>     cmp al, ";"
   422 00000523 7503                <1>     jne short .skipEocChar
   423                              <1> .eocChar:
   424 00000525 48FFC6              <1>     inc rsi ;Move rsi ahead one to avoid the below...
   425                              <1> .skipEocChar:
   426 00000528 48FFCE              <1>     dec rsi ;Move rsi back to the first char of the new command
   427 0000052B 488935(D0010000)    <1>     mov qword [charPtr], rsi    ;Save the command line pointer
   428 00000532 E90DFFFFFF          <1>     jmp parseCommand
   429                              <1> 
   430                              <1> ;----Bad Exits----
   431                              <1> badDrvExit:
   432 00000537 488D15(71000000)    <1>     lea rdx, badDrvStr
   433 0000053E EB07                <1>     jmp short badExitMsg
   434                              <1> badParmExit:
   435 00000540 488D15(44010000)    <1>     lea rdx, badParm    ;Bad number of parameters
   436                              <1> badExitMsg:
   437 00000547 4885D2              <1>     test rdx, rdx   ;Check if null ptr => Dont print on exit
   438 0000054A 7407                <1>     jz short badExit
   439 0000054C B800090000          <1>     mov eax, 0900h
   440 00000551 CD21                <1>     int 21h
   441                              <1> badExit:
   442 00000553 B8FF4C0000          <1>     mov eax, 4CFFh
   443 00000558 CD21                <1>     int 21h
    35                                  %include "./Source/edutils.asm"
     1                              <1> ;General Utility functions for edlin go here
     2                              <1> 
     3                              <1> okPrompt:
     4                              <1> ;Checks if the user typed ? on a search or replace and prompts y/n
     5                              <1> ; indicating the response to the caller!
     6                              <1> ;Returns: ZF=ZE if Y returned, ZF=NZ if N returned
     7 0000055A F605(E1010000)FF    <1>     test byte [qmarkSet], -1
     8                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000561 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000563 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
     9                              <1> .lp:
    10 00000564 488D15(5A020000)    <1>     lea rdx, okString
    11 0000056B E8E90F0000          <1>     call printString
    12 00000570 B8010C0000          <1>     mov eax, 0C01h  ;Take input one byte, return input byte in al
    13 00000575 CD21                <1>     int 21h
    14 00000577 50                  <1>     push rax        ;Save the char as we print CRLF to denote acceptance
    15 00000578 E8E80F0000          <1>     call printCRLF
    16 0000057D 58                  <1>     pop rax
    17 0000057E 50                  <1>     push rax
    18 0000057F B813120000          <1>     mov eax, 1213h  ;Get DOS to Uppercase for us
    19 00000584 CD2F                <1>     int 2fh
    20 00000586 5A                  <1>     pop rdx         ;Pop the original char back
    21 00000587 3C59                <1>     cmp al, "Y"
    22                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000589 74(63)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    23 0000058B 3C4E                <1>     cmp al, "N"
    24 0000058D 75D5                <1>     jne .lp         ;If not Y or N, go again.
    25 0000058F FEC0                <1>     inc al          ;Clear ZF, guaranteed to clear ZF since al = N
    26                              <1>     return
    13                              <2> %%_ret:
    14 00000591 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                              <1> 
    28                              <1> 
    29                              <1> findFirst:
    30 00000592 488D3D(2E050000)    <1>     lea rdi, fndString1 + 1 ;Point to start of the actual string space!
    31 00000599 C605(12050000)FF    <1>     mov byte [keepOld], -1  ;We want to keep the old search data!
    32 000005A0 E84D010000          <1>     call getFindPatrn
    33 000005A5 85C9                <1>     test ecx, ecx   ;Was the length of the copy 0?
    34                              <1>     retz            ;Return if so!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000005A7 74(91)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    35 000005A9 3C1A                <1>     cmp al, EOF
    36 000005AB 7507                <1>     jne .replaceOld
    37 000005AD C605(12050000)00    <1>     mov byte [keepOld], 0   ;Reset the old data if EOF!
    38                              <1> .replaceOld: 
    39 000005B4 66890D(13050000)    <1>     mov word [fndLenOld], cx  ;Save the length!
    40 000005BB 31C9                <1>     xor ecx, ecx
    41 000005BD 3C0D                <1>     cmp al, CR
    42 000005BF 7409                <1>     je .makeSrchBuf
    43 000005C1 803D(11050000)00    <1>     cmp byte [findMod], 0
    44 000005C8 7403                <1>     jz .repBuf
    45                              <1> .makeSrchBuf:
    46 000005CA 48FFCE              <1>     dec rsi
    47                              <1> .repBuf:
    48 000005CD 488935(D0010000)    <1>     mov qword [charPtr], rsi
    49 000005D4 488D3D(AF050000)    <1>     lea rdi, fndString2 + 1     ;Now we copy to the second buffer!
    50 000005DB E812010000          <1>     call getFindPatrn
    51 000005E0 803D(11050000)00    <1>     cmp byte [findMod], 0   ;Are we replace?
    52 000005E7 750E                <1>     jnz .notRep
    53                              <1> ;Here only if we are replacing the string!
    54 000005E9 3C0D                <1>     cmp al, CR  ;Did we read the last char in the string?
    55 000005EB 7503                <1>     jne .eos
    56 000005ED 48FFCE              <1>     dec rsi     ;Go to the last char itself
    57                              <1> .eos:
    58 000005F0 488935(D0010000)    <1>     mov qword [charPtr], rsi
    59                              <1> .notRep:
    60 000005F7 66890D(15050000)    <1>     mov word [fndLenNew], cx     ;Save the new length of the copied string
    61 000005FE 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
    62 00000605 85DB                <1>     test ebx, ebx   
    63 00000607 751E                <1>     jnz .havLine
    64 00000609 803D(10050000)00    <1>     cmp byte [srchMode], 0  ;If clear, we search from current line + 1!
    65 00000610 7507                <1>     jne .curLin
    66 00000612 BB01000000          <1>     mov ebx, 1
    67 00000617 EB09                <1>     jmp short .chkLineOk
    68                              <1> .curLin:
    69 00000619 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]
    70 00000620 FFC3                <1>     inc ebx
    71                              <1> .chkLineOk:
    72 00000622 E8D2010000          <1>     call checkArgOrder
    73                              <1> .havLine:
    74 00000627 E81C020000          <1>     call findLine   ;Setup the vars to start searching!
    75 0000062C 48893D(17050000)    <1>     mov qword [fndStrPtr], rdi
    76 00000633 48893D(1F050000)    <1>     mov qword [fndLinePtr], rdi
    77 0000063A 668915(27050000)    <1>     mov word [fndLineNum], dx
    78 00000641 0FB71D(DB010000)    <1>     movzx ebx, word [arg2]  ;Get the end of search range
    79 00000648 6681FBFFFF          <1>     cmp bx, -1
    80 0000064D 6681DBFFFF          <1>     sbb bx, -1
    81 00000652 E8F1010000          <1>     call findLine   ;Get the vars for the end of the search
    82 00000657 4889F9              <1>     mov rcx, rdi
    83 0000065A 482B0D(17050000)    <1>     sub rcx, qword [fndStrPtr]  ;Get the number of chars we will be scanning
    84 00000661 0CFF                <1>     or al, -1   ;Clear ZF
    85 00000663 67E309              <1>     jecxz .exit
    86 00000666 663B0D(13050000)    <1>     cmp cx, word [fndLenOld]  ;Is the init string 
    87 0000066D 7301                <1>     jae .findNext
    88                              <1> .exit:
    89                              <1>     return
    13                              <2> %%_ret:
    14 0000066F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    90                              <1> .findNext:
    91 00000670 890D(29050000)      <1>     mov dword [fndSrchLen], ecx
    92                              <1> findNext:
    93                              <1> ;Finds our next match for the string in fndString1
    94                              <1> ;Input:
    95                              <1> ;   byte [fndString1 + 1] = String we are searching for
    96                              <1> ;   word [fndLenOld] = Length of the string we are searching for
    97                              <1> ;   qword [fndStrPtr] = Ptr to the start of where to start scanning from
    98                              <1> ;   word [fndLineNum] = Line number of the string we are searching from
    99                              <1> ;   dword [fndSrchLen] = Length of the arena we are searching.
   100                              <1> ;   qword [fndLinePtr] = Ptr to the start of the line we are on.
   101                              <1> ;Output:
   102                              <1> ;   ZF=ZE if we found the search string. Else ZF=NZ.
   103                              <1> ;   qword [fndStrPtr], word [fndLineNum], dword [fndSrchLen] updated.
   104                              <1> ;   qword [fndLinePtr] points to start of line we found match
   105                              <1> 
   106 00000676 8A05(2E050000)      <1>     mov al, byte [fndString1 + 1]
   107 0000067C 8B0D(29050000)      <1>     mov ecx, dword [fndSrchLen]
   108 00000682 488B3D(17050000)    <1> 	mov rdi, qword [fndStrPtr]
   109                              <1> .lp:
   110 00000689 4885FF              <1>     test rdi, rdi           ;Clear ZF in case ecx is 0
   111 0000068C 67E3E0              <1>     jecxz findFirst.exit    ;Just exit in that case
   112 0000068F F2AE                <1>     repne scasb
   113                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000691 75(6F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   114 00000693 89CA                <1>     mov edx, ecx    ;Save the remaining chars to scan thru
   115 00000695 4889FB              <1>     mov rbx, rdi    ;Save the ptr to the end of the string we scanned
   116 00000698 0FB70D(13050000)    <1>     movzx ecx, word [fndLenOld] ;Get the match string length
   117 0000069F FFC9                <1>     dec ecx
   118 000006A1 488D35(2F050000)    <1>     lea rsi, fndString1 + 2
   119 000006A8 38C0                <1>     cmp al, al  ;Set the zero flag incase ECX = 0
   120 000006AA F3A6                <1>     repe cmpsb  ;Compare the remainder of the strings
   121 000006AC 89D1                <1>     mov ecx, edx    ;Return the remaining chars for search
   122 000006AE 4889DF              <1>     mov rdi, rbx    ;Retur the ptr
   123 000006B1 75D6                <1>     jne .lp ;Keep searching if the two strings were not 100% the same
   124 000006B3 890D(29050000)      <1>     mov dword [fndSrchLen], ecx
   125 000006B9 4889F9              <1>     mov rcx, rdi
   126 000006BC 48893D(17050000)    <1>     mov qword [fndStrPtr], rdi
   127 000006C3 488B3D(1F050000)    <1>     mov rdi, qword [fndLinePtr]
   128 000006CA 4829F9              <1>     sub rcx, rdi
   129 000006CD B00A                <1>     mov al, LF
   130 000006CF 0FB715(27050000)    <1>     movzx edx, word [fndLineNum]
   131                              <1> ;Now figure out which line we matched on
   132                              <1> .getLp:
   133 000006D6 FFC2                <1>     inc edx
   134 000006D8 4889FB              <1>     mov rbx, rdi
   135 000006DB F2AE                <1>     repne scasb
   136 000006DD 74F7                <1>     jz .getLp 
   137 000006DF FFCA                <1>     dec edx
   138 000006E1 668915(27050000)    <1>     mov word [fndLineNum], dx
   139 000006E8 48891D(1F050000)    <1>     mov qword [fndLinePtr], rbx
   140 000006EF 31C0                <1>     xor eax, eax    ;Clear the ZF
   141                              <1>     return
    13                              <2> %%_ret:
    14 000006F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> getFindPatrn:
   144                              <1> ;Moves the find pattern until ^Z or <CR> found. 
   145                              <1> ;Input: rsi -> Command buffer
   146                              <1> ;       rdi -> Storage buffer
   147                              <1> ; byte [keepOld] = If we copy 0 chars, do we use old search data or not?
   148                              <1> ;Output:
   149                              <1> ;       al = Terminating char
   150                              <1> ;       ecx = Number of chars copied
   151                              <1> ;       rsi -> Char past the terminating char
   152                              <1> ;       rdi -> Same in storage buffer
   153 000006F2 31C9                <1>     xor ecx, ecx
   154                              <1> .lp:
   155 000006F4 AC                  <1>     lodsb           ;Get char from buffer
   156 000006F5 3C16                <1>     cmp al, CMD     ;If not a ^V, check if it is a terminating char
   157 000006F7 7508                <1>     jne .noConvert
   158 000006F9 AC                  <1>     lodsb   ;Get the next char to convert into a control character
   159 000006FA E8EF000000          <1>     call doControl  ;Convert it!
   160 000006FF EB04                <1>     jmp short .checkCR  ;Ignore <EOF> in this case
   161                              <1> .noConvert:
   162 00000701 3C1A                <1>     cmp al, EOF ;Was char an <EOF>?
   163 00000703 7409                <1>     je .end     ;End if so!
   164                              <1> .checkCR:
   165 00000705 3C0D                <1>     cmp al, CR  ;Was char a <CR>?
   166 00000707 7405                <1>     je .end     ;End if so!
   167 00000709 AA                  <1>     stosb       ;Else store and
   168 0000070A FFC1                <1>     inc ecx     ;inc the copy counter!
   169 0000070C EBE6                <1>     jmp short .lp
   170                              <1> .end:
   171 0000070E 85C9                <1>     test ecx, ecx   ;Did we copy zero chars?
   172 00000710 7409                <1>     jz .noNew       ;If so, check if we should use previous data...
   173 00000712 57                  <1>     push rdi
   174 00000713 4829CF              <1>     sub rdi, rcx    ;Else get a ptr to the start of the buffer
   175 00000716 884FFF              <1>     mov byte [rdi - 1], cl  ;And place the string length w/o terminator!
   176 00000719 5F                  <1>     pop rdi
   177                              <1>     return
    13                              <2> %%_ret:
    14 0000071A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   178                              <1> .noNew:
   179 0000071B F605(12050000)FF    <1>     test byte [keepOld], -1   ;Do we want to use old data?
   180 00000722 7504                <1>     jne .useOld     ;Jump if so!
   181 00000724 884FFF              <1>     mov byte [rdi - 1], cl  ;Else, reset the buffer length!! No search data!
   182                              <1>     return
    13                              <2> %%_ret:
    14 00000727 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   183                              <1> .useOld:
   184 00000728 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]   ;So get the length of the buffer
   185 0000072C 4801CF              <1>     add rdi, rcx                ;And go to the end of the string!
   186                              <1>     return
    13                              <2> %%_ret:
    14 0000072F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> replaceLine:
   189                              <1> ;Replaces a line in memory with a line in a buffer.
   190                              <1> ;Input: ecx = New line length
   191                              <1> ;       rsi -> New line source ptr
   192                              <1> ;       edx = Old line length
   193                              <1> ;       rdi -> Old line ptr
   194 00000730 39D1                <1>     cmp ecx, edx
   195 00000732 7447                <1>     je .doCopy
   196 00000734 51                  <1>     push rcx
   197 00000735 56                  <1>     push rsi
   198 00000736 57                  <1>     push rdi
   199 00000737 4889FE              <1>     mov rsi, rdi
   200 0000073A 4801D6              <1>     add rsi, rdx    ;Go to the end of the old line 
   201 0000073D 4801CF              <1>     add rdi, rcx    ;Go to where the new line will end
   202 00000740 488B05(28000000)    <1>     mov rax, qword [eofPtr]
   203 00000747 4829D0              <1>     sub rax, rdx    ;See if we have enough space for the new line!!
   204 0000074A 4801C8              <1>     add rax, rcx
   205 0000074D 483B05(30000000)    <1>     cmp rax, qword [endOfArena]
   206 00000754 0F832E0F0000        <1>     jae printMemErr
   207 0000075A 488705(28000000)    <1>     xchg qword [eofPtr], rax    ;This will be the new eof
   208 00000761 4889C1              <1>     mov rcx, rax    ;Get the old eofPtr in rcx
   209 00000764 4829F1              <1>     sub rcx, rsi
   210 00000767 4839FE              <1>     cmp rsi, rdi
   211 0000076A 7707                <1>     ja .noRevMove
   212 0000076C 4801CE              <1>     add rsi, rcx    ;Here we setup reverse copy!!
   213 0000076F 4801CF              <1>     add rdi, rcx
   214 00000772 FD                  <1>     std
   215                              <1> .noRevMove:
   216 00000773 FFC1                <1>     inc ecx         ;Add a char for the EOF itself!
   217 00000775 F3A4                <1>     rep movsb
   218 00000777 FC                  <1>     cld
   219 00000778 5F                  <1>     pop rdi
   220 00000779 5E                  <1>     pop rsi
   221 0000077A 59                  <1>     pop rcx
   222                              <1>     ;Now that there is space in the buffer, we can do the copy!
   223                              <1> .doCopy:
   224 0000077B F3A4                <1>     rep movsb
   225                              <1>     return
    13                              <2> %%_ret:
    14 0000077D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> stufBuf:
   228                              <1> ;Stuffs the workLine with a line of text from memory!
   229                              <1> ;Input: rsi -> Buffer to source the stuff from
   230                              <1> ;Output: Buffer stuffed. If line too long, truncated to the first 253 chars.
   231                              <1> ;       edx = Real length of line!
   232 0000077E 488D3D(67020000)    <1>     lea rdi, workLine + 2   ;Go to the start of the text portion
   233 00000785 B9FF000000          <1>     mov ecx, 255
   234 0000078A 31D2                <1>     xor edx, edx            ;Use as the char counter in the buffer
   235                              <1> .lp:
   236 0000078C AC                  <1>     lodsb
   237 0000078D AA                  <1>     stosb
   238 0000078E FFC2                <1>     inc edx     ;Copied one more char over
   239 00000790 3C0D                <1>     cmp al, CR  ;Was this a CR?
   240 00000792 7404                <1>     je .eol     ;Exit if so
   241 00000794 FFC9                <1>     dec ecx     ;Else decrement from buffer counter
   242 00000796 75F4                <1>     jnz .lp     ; and go again!
   243                              <1> .eol:
   244 00000798 FFCA                <1>     dec edx     ;Drop the CR from the char count
   245 0000079A 8815(66020000)      <1>     mov byte [workLine + 1], dl ;Store the char count here
   246 000007A0 3C0D                <1>     cmp al, CR  ;Now check we are here due to having a valid EOL
   247                              <1>     rete        ;Exit if so
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000007A2 74(7D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   248 000007A4 FFC2                <1>     inc edx
   249                              <1> .longLine:  ;Else scan for the EOL char
   250 000007A6 AC                  <1>     lodsb   ;Get the next char
   251 000007A7 FFC2                <1>     inc edx ;Keep track of the real length of the line
   252 000007A9 3C0D                <1>     cmp al, CR
   253 000007AB 75F9                <1>     jne .longLine   ;If not CR, keep searching
   254 000007AD 48FFCF              <1>     dec rdi ;Go back to the last char position in the buffer
   255 000007B0 AA                  <1>     stosb   ;Store the CR there
   256                              <1>     return  ;We stored max count in workLine+1 earlier. We are done
    13                              <2> %%_ret:
    14 000007B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> doCmdChar:
   259                              <1> ;Handles command chars that are typed into the buffer. These chars are
   260                              <1> ; ^V<CHAR> where <CHAR> has to be a UC char to be treated as a command char.
   261                              <1> ;Assumes that rsi is pointing to the start of the data portion of a command line.
   262                              <1> ;Thus:  rsi -> Input buffer
   263                              <1> ;       rsi - 1 = Number of chars typed 
   264                              <1> ;       rsi - 2 = Input buffer length
   265 000007B2 FC                  <1>     cld                         ;Ensure we are searching the right way
   266 000007B3 51                  <1>     push rcx
   267 000007B4 56                  <1>     push rsi
   268 000007B5 57                  <1>     push rdi
   269 000007B6 4889F7              <1>     mov rdi, rsi                ;Copy the pointer for scanning
   270 000007B9 0FB64EFF            <1>     movzx ecx, byte [rsi - 1]   ;Get number of chars typed in to scan
   271                              <1> .lp:
   272 000007BD 67E32A              <1>     jecxz .exit                 ;No more chars to handle, exit!
   273 000007C0 B816000000          <1>     mov eax, CMD                ;Scan for the ^V char in al
   274 000007C5 F2AE                <1>     repne scasb
   275 000007C7 7521                <1>     jne .exit                   ;Ran out of chars to scan, exit!
   276                              <1> ;Here rdi points to the char after the quote char.
   277 000007C9 8A07                <1>     mov al, byte [rdi]  ;Get the quote char
   278 000007CB E81E000000          <1>     call doControl  ;Convert into a control char if appropriate
   279 000007D0 8807                <1>     mov byte [rdi], al  ;Write back
   280                              <1> ;Save our position and count and pull the string up.
   281 000007D2 51                  <1>     push rcx
   282 000007D3 56                  <1>     push rsi
   283 000007D4 57                  <1>     push rdi
   284 000007D5 4889FE              <1>     mov rsi, rdi    ;Start copying from this replaced char
   285 000007D8 48FFCF              <1>     dec rdi         ;Store to the char before
   286 000007DB FFC1                <1>     inc ecx         ;Copy over the CR too
   287 000007DD F3A4                <1>     rep movsb
   288 000007DF 5F                  <1>     pop rdi
   289 000007E0 5E                  <1>     pop rsi
   290 000007E1 59                  <1>     pop rcx
   291 000007E2 67E305              <1>     jecxz .exit     ;If we terminated the line with a ^V<CR>, now exit
   292 000007E5 FE4EFF              <1>     dec byte [rsi - 1]  ;Else drop one char from the count
   293 000007E8 EBD3                <1>     jmp short .lp   ;And keep scanning
   294                              <1> .exit:
   295 000007EA 5F                  <1>     pop rdi
   296 000007EB 5E                  <1>     pop rsi
   297 000007EC 59                  <1>     pop rcx
   298                              <1>     return
    13                              <2> %%_ret:
    14 000007ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   299                              <1> 
   300                              <1> doControl:
   301                              <1> ;Input: al = Possible control char. This has to be an uppercase char! 
   302 000007EE 50                  <1>     push rax
   303 000007EF 24E0                <1>     and al, 0E0h    ;Preserve upper three bits only (not used for chars)
   304 000007F1 3C40                <1>     cmp al, 40h     ;Check if only the middle (UC) was set!
   305 000007F3 58                  <1>     pop rax
   306                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000007F4 75(ED)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   307 000007F6 241F                <1>     and al, asciiMask   ;Convert into a control char
   308                              <1>     return
    13                              <2> %%_ret:
    14 000007F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> 
   310                              <1> checkArgOrder:
   311                              <1> ;Checks two arguments to ensure the second one is 
   312                              <1> ; greater than the first.
   313                              <1> ;Input: bx = first argument
   314                              <1> ;       word [arg2] = second argument
   315                              <1> ;Output: If it returns, its ok. Else it resets the command loop
   316 000007F9 66813D(DB010000)00- <1>     cmp word [arg2], 0
   316 00000801 00                  <1>
   317                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000802 74(F8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   318 00000804 663B1D(DB010000)    <1>     cmp bx, word [arg2]
   319                              <1>     retbe
    81                              <2> cret be
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000080B 76(F8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   320 0000080D 58                  <1>     pop rax     ;Pop off the return address
   321 0000080E E97E0E0000          <1>     jmp printComErr
   322                              <1> 
   323                              <1> makeSpace:
   324                              <1> ;Makes space for a new string in the text
   325                              <1> ;Input: rdx -> Where in the arena we will move our text
   326                              <1> ;       rdi -> First byte we will be moving
   327                              <1> ;       bx = Line number we are making space for!
   328 00000813 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   329 0000081A 4889CE              <1>     mov rsi, rcx    ;Copy in reverse, sourcing from the EOF ptr!!    
   330 0000081D 4829F9              <1>     sub rcx, rdi    ;Get the count of bytes to copy
   331 00000820 FFC1                <1>     inc ecx         ;Including EOF
   332 00000822 4889D7              <1>     mov rdi, rdx    
   333 00000825 FD                  <1>     std
   334 00000826 F3A4                <1>     rep movsb
   335 00000828 FC                  <1>     cld
   336 00000829 4887F7              <1>     xchg rsi, rdi   ;Swap the new EOF pointer and source
   337 0000082C 48FFC7              <1>     inc rdi         ;Point to the first byte of made space
   338 0000082F 4889F5              <1>     mov rbp, rsi    ;Setup to fall through now
   339                              <1> setLineVars:
   340                              <1> ;Sets the current line number, pointer and the new EOF pointer
   341                              <1> ;Input: bx = Current line number
   342                              <1> ;       rdi -> Space where this line is
   343                              <1> ;       rbp -> EOF char pointer
   344 00000832 66891D(1E000000)    <1>     mov word [curLineNum], bx
   345 00000839 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   346 00000840 48892D(28000000)    <1>     mov qword [eofPtr], rbp
   347                              <1>     return
    13                              <2> %%_ret:
    14 00000847 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   348                              <1> 
   349                              <1> findLine:
   350                              <1> ;Given a line number, tries to find the actual line.
   351                              <1> ;Input: ebx = Line number to search for, 0 means exhaust all chars!
   352                              <1> ;Output: ZF=ZE: rdi -> Ptr to the line
   353                              <1> ;               edx = Actual line number we are at
   354                              <1> ;               eax = Line number specified
   355                              <1> ;        ZF=NZ: Line not found. (i.e. beyond last line)
   356                              <1> ;               edx = Line number past current line number
   357                              <1> ;               rdi -> End of memory space
   358 00000848 0FB715(1E000000)    <1>     movzx edx, word [curLineNum]    ;Line to start counting from
   359 0000084F 488B3D(20000000)    <1>     mov rdi, qword [curLinePtr]     ;Pointer to this line
   360 00000856 39D3                <1>     cmp ebx, edx
   361                              <1>     rete    ;If we are already at the line we want to be at, return!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000858 74(47)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   362 0000085A 7714                <1>     ja .prepSearch  
   363 0000085C 85DB                <1>     test ebx, ebx   ;Are we in the goto last line case?
   364 0000085E 7410                <1>     jz .prepSearch
   365                              <1> ;Else, we start scanning from the start of the arena!
   366 00000860 BA01000000          <1>     mov edx, 1
   367 00000865 488B3D(0E000000)    <1>     mov rdi, qword [memPtr] 
   368 0000086C 39D3                <1>     cmp ebx, edx
   369                              <1>     rete    ;If we want to find line 1, here we are!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000086E 74(47)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   370                              <1> .prepSearch:
   371 00000870 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   372 00000877 4829F9              <1>     sub rcx, rdi    ;Turn ecx into count of chars left in buffer to scan
   373                              <1> findLineCore:
   374                              <1> ;Finds a line but from a presetup position as opposed to the global state!
   375                              <1> ;Input: rdi -> Line to check if it is terminated by a LF
   376                              <1> ;       ecx = Number of chars to check on
   377                              <1> ;       edx = Offset of line count to search for (line counter)
   378                              <1> ;       ebx = Count of lines to search for (0 means exhaust chars)
   379                              <1> ;Output:
   380                              <1> ;       al = LF
   381                              <1> ;       ZF=ZE: We read bx lines. rdi -> Past LF which terminated line
   382                              <1> ;       ZF=NZ: Ran out of chars
   383 0000087A B80A000000          <1>     mov eax, LF
   384                              <1> .lp:
   385 0000087F 67E308              <1>     jecxz .exit ;Return w/o setting flags if we have no more chars left!
   386 00000882 F2AE                <1>     repne scasb
   387 00000884 FFC2                <1>     inc edx
   388 00000886 39DA                <1>     cmp edx, ebx    ;Have we gone past bx lines yet?
   389 00000888 75F5                <1>     jne .lp    ;Scan the next line if not!!
   390                              <1> .exit:
   391                              <1>     return
    13                              <2> %%_ret:
    14 0000088A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   392                              <1> 
   393                              <1> strcpy:
   394                              <1> ;Copies a ASCIIZ string from one buffer to another. 
   395                              <1> ;Pointers don't move.
   396                              <1> ;Input: rsi -> Source Ptr
   397                              <1> ;       rdi -> Destination Ptr
   398 0000088B 56                  <1>     push rsi
   399 0000088C 57                  <1>     push rdi
   400                              <1> .cpChar:
   401 0000088D AC                  <1>     lodsb
   402 0000088E AA                  <1>     stosb
   403 0000088F 84C0                <1>     test al, al ;Was this a nul char?
   404 00000891 75FA                <1>     jnz .cpChar
   405 00000893 5F                  <1>     pop rdi
   406 00000894 5E                  <1>     pop rsi
   407                              <1>     return
    13                              <2> %%_ret:
    14 00000895 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   408                              <1> 
   409                              <1> checkEOF:
   410                              <1> ;Checks if we are at the EOF or if we hit an EOF char in the file.
   411                              <1> ;Input: ecx = Count of bytes
   412                              <1> ;       rdi -> Ptr to the start of the region we just read into memory
   413                              <1> ;       r10 = Original requested byte count
   414                              <1> ;Output: ZF=ZE => Found EOF in file (or ecx = 0)
   415                              <1> ;        ZF=NZ => No EOF found in file!
   416                              <1> ;       ecx = Count of relevant bytes in the buffer
   417 00000896 F605(04000000)FF    <1>     test byte [noEofChar], -1   ;If set, binary semantics!
   418 0000089D 7542                <1>     jnz .binScan
   419                              <1> ;Here we scan for ^Z char
   420 0000089F 57                  <1>     push rdi
   421 000008A0 51                  <1>     push rcx
   422 000008A1 B81A000000          <1>     mov eax, EOF
   423 000008A6 85C9                <1>     test ecx, ecx   ;If ecx is 0, skip the scan! Pretend we hit an EOF
   424 000008A8 7408                <1>     jz .ascNoEof
   425 000008AA F2AE                <1>     repne scasb
   426 000008AC 7504                <1>     jne .ascNoEof
   427 000008AE 9C                  <1>     pushfq
   428 000008AF FFC1                <1>     inc ecx         ;Increment by 1 to include the ptr to the EOF char itself!
   429 000008B1 9D                  <1>     popfq
   430                              <1> .ascNoEof:
   431 000008B2 89CF                <1>     mov edi, ecx    ;Save the byte count in edi (rdi)
   432 000008B4 59                  <1>     pop rcx         ;Get back the original byte count!
   433 000008B5 9C                  <1>     pushfq
   434 000008B6 29F9                <1>     sub ecx, edi    ;Get the number of chars into the string we are 
   435 000008B8 9D                  <1>     popfq
   436 000008B9 5F                  <1>     pop rdi
   437                              <1> .niceExit:
   438                              <1>     retnz               ;If we are here and ZF=NZ, exit as no EOF hit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000008BA 75(95)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   439                              <1> ;Now we adjust the end of the file, if the end of the file was a ^Z
   440                              <1> ; so that if the last char was not an LF, we add a CRLF pair
   441 000008BC 9C                  <1>     pushfq
   442 000008BD 57                  <1>     push rdi
   443 000008BE 4801CF              <1>     add rdi, rcx    ;Go the the end of the buffer
   444 000008C1 48FFCF              <1>     dec rdi
   445 000008C4 48393D(0E000000)    <1>     cmp qword [memPtr], rdi ;Are we at the head of the buffer?
   446 000008CB 7405                <1>     je .putCRLF ;If so, forcefully place a CRLF pair
   447 000008CD 803F0A              <1>     cmp byte [rdi], LF
   448 000008D0 740C                <1>     je .exit
   449                              <1> .putCRLF:
   450 000008D2 66C747010D0A        <1>     mov word [rdi + 1], CRLF
   451 000008D8 81C102000000        <1>     add ecx, 2  ;We added two chars to the count
   452                              <1> .exit:
   453 000008DE 5F                  <1>     pop rdi
   454 000008DF 9D                  <1>     popfq
   455                              <1>     return
    13                              <2> %%_ret:
    14 000008E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> .binScan:
   457                              <1> ;Here we deal with binary semantics
   458 000008E1 4439D1              <1>     cmp ecx, r10d   ;If we read less bytes than desired, check if an EOF present!
   459 000008E4 7205                <1>     jb .binLess
   460 000008E6 31C0                <1>     xor eax, eax
   461 000008E8 FFC0                <1>     inc eax         ;Clear ZF
   462                              <1>     return
    13                              <2> %%_ret:
    14 000008EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   463                              <1> .binLess:
   464 000008EB 67E308              <1>     jecxz .binEofExit ;If ecx = 0, just adjust end and exit!
   465 000008EE 803C0F1A            <1>     cmp byte [rdi + rcx], EOF   ;Was this byte an EOF char?
   466 000008F2 7502                <1>     jne .binEofExit
   467 000008F4 FFC9                <1>     dec ecx             ;Drop it from the count.
   468                              <1> .binEofExit:
   469 000008F6 31C0                <1>     xor eax, eax
   470 000008F8 EBC0                <1>     jmp short .niceExit
   471                              <1> 
   472                              <1> 
   473                              <1> delBkup:
   474                              <1> ;Finally, we delete the backup if it exists. If it doesn't delete
   475                              <1> ; for some reason, might be problematic later but not a big issue.
   476                              <1> ;If returns with CF=CY, know that the backup didn't delete...
   477                              <1> ;Preserves all registers!
   478 000008FA F605(39000000)FF    <1>     test byte [bkupDel], -1     ;If set, backup already deleted
   479                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000901 75(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   480 00000903 F605(38000000)FF    <1>     test byte [modFlag], -1   ;If clear, buffer has not been modified.
   481                              <1>     retz                        
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000090A 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   482 0000090C F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;If the file is new then it has no backup!
   483                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000913 75(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   484 00000915 C605(39000000)FF    <1>     mov byte [bkupDel], -1      ;Now deleting backup
   485 0000091C 50                  <1>     push rax
   486 0000091D 52                  <1>     push rdx
   487 0000091E 57                  <1>     push rdi
   488 0000091F 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   489 00000926 B842414B00          <1>     mov eax, "BAK"
   490 0000092B AB                  <1>     stosd
   491 0000092C 488D15(BE000000)    <1>     lea rdx, bkupfile
   492 00000933 B800410000          <1>     mov eax, 4100h
   493 00000938 CD21                <1>     int 21h
   494 0000093A 5F                  <1>     pop rdi
   495 0000093B 5A                  <1>     pop rdx
   496 0000093C 58                  <1>     pop rax
   497                              <1>     retnc  ;Could overwrite first byte of this function with a ret 0:)
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000093D 73(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   498                              <1>     ;I like my idea... but no, we need the flag.
   499 0000093F 488D15(1A010000)    <1>     lea rdx, badBackDel
   500 00000946 E80E0C0000          <1>     call printString
   501                              <1>     retToDOS errBadBak
    94 0000094B B8044C0000          <2>  mov eax, 04C00h | %1
    95 00000950 CD21                <2>  int 21h
   502                              <1> 
   503                              <1> 
   504                              <1> parseEntry:
   505                              <1> ;Parses a single command line argument.
   506                              <1> ;. means current line
   507                              <1> ;+ means positive number offset from current line
   508                              <1> ;- means negative number offset from current line
   509                              <1> ;# means line after the last line in file ALWAYS.
   510                              <1> ; This is represented in the argument var as the 
   511                              <1> ; word 0FFFFh.
   512                              <1> ;A naked number is interpreted as a line number 
   513                              <1> ; directly.
   514                              <1> ;Maximum input value per argument: 65529
   515                              <1> ;--------------------------------------------
   516                              <1> ;Input: rsi -> String to parse
   517                              <1> ;Output: (e)bx = Value of argument
   518                              <1> ;          rsi -> First char past the end of arg
   519                              <1> ;--------------------------------------------
   520 00000952 E89F000000          <1>     call skipSpaces ;Move rsi past first non-space char and get al = First char
   521 00000957 3C2B                <1>     cmp al, "+" ;Positive offset from current line
   522 00000959 7444                <1>     je .plus
   523 0000095B 3C2D                <1>     cmp al, "-" ;Negative offset from current line
   524 0000095D 7454                <1>     je .minus
   525 0000095F 3C2E                <1>     cmp al, "." ;Current line, advance ptr to command terminator
   526 00000961 746E                <1>     je .dot
   527 00000963 3C23                <1>     cmp al, "#" ;Last line (-1), advance ptr to command terminator
   528 00000965 7478                <1>     je .pound
   529 00000967 31DB                <1>     xor ebx, ebx
   530 00000969 31C9                <1>     xor ecx, ecx
   531                              <1> .getArg:
   532 0000096B 3C30                <1>     cmp al, "0"
   533 0000096D 7222                <1>     jb .endOfArg
   534 0000096F 3C39                <1>     cmp al, "9"
   535 00000971 771E                <1>     ja .endOfArg
   536 00000973 81FB99190000        <1>     cmp ebx, 0FFFFh/0Ah ;If we are gonna go above the max, fail now
   537 00000979 0F83120D0000        <1>     jae printComErr
   538 0000097F FFC9                <1>     dec ecx ;Indicate we have a valid digit
   539 00000981 2C30                <1>     sub al, "0"
   540 00000983 678D1C9B            <1>     lea ebx, dword [4*ebx + ebx]    ;5*ebx
   541 00000987 D1E3                <1>     shl ebx, 1          ;2*5*ebx = 10*ebx
   542 00000989 0FB6C0              <1>     movzx eax, al
   543 0000098C 01C3                <1>     add ebx, eax
   544 0000098E AC                  <1>     lodsb   ;Get the next char
   545 0000098F EBDA                <1>     jmp short .getArg
   546                              <1> .endOfArg:
   547 00000991 85C9                <1>     test ecx, ecx
   548                              <1>     retz    ;If no char provided, exit silently. Var already 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000993 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000995 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   549 00000996 85DB                <1>     test ebx, ebx   
   550 00000998 0F84F30C0000        <1>     jz printComErr  ;Dont allow 0 as an argument
   551                              <1>     return
    13                              <2> %%_ret:
    14 0000099E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> .plus:
   553 0000099F E844000000          <1>     call .validSpecial
   554 000009A4 E8A9FFFFFF          <1>     call parseEntry ;Now parse the entry again
   555 000009A9 0FB705(1E000000)    <1>     movzx eax, word [curLineNum]
   556 000009B0 01C3                <1>     add ebx, eax    ;Only the low word is considered!!
   557                              <1>     return
    13                              <2> %%_ret:
    14 000009B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   558                              <1> .minus:
   559 000009B3 E830000000          <1>     call .validSpecial
   560 000009B8 E895FFFFFF          <1>     call parseEntry ;Now parse the entry again, get result in ebx
   561 000009BD 0FB705(1E000000)    <1>     movzx eax, word [curLineNum]
   562 000009C4 29D8                <1>     sub eax, ebx    ;Now get the differnece and ...
   563 000009C6 89C3                <1>     mov ebx, eax    ;save the difference in ebx
   564 000009C8 B801000000          <1>     mov eax, 1
   565 000009CD 0F48D8              <1>     cmovs ebx, eax  ;If the difference is less than 0, return to line 1
   566                              <1>     return
    13                              <2> %%_ret:
    14 000009D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   567                              <1> .dot:
   568 000009D1 E812000000          <1>     call .validSpecial
   569 000009D6 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Goto current line (starts from 1)
   570 000009DD AC                  <1>     lodsb
   571                              <1>     return
    13                              <2> %%_ret:
    14 000009DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   572                              <1> .pound:
   573 000009DF E804000000          <1>     call .validSpecial
   574 000009E4 FFCB                <1>     dec ebx         ;Go to last line
   575 000009E6 AC                  <1>     lodsb
   576                              <1>     return
    13                              <2> %%_ret:
    14 000009E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> .validSpecial:
   578                              <1> ;Returns if it is a valid case to do so. Else no
   579 000009E8 803D(D8010000)04    <1>     cmp byte [argCnt], 4    ;Argument 2 is for the count
   580 000009EF 0F849C0C0000        <1>     je printComErr
   581                              <1>     return
    13                              <2> %%_ret:
    14 000009F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   582                              <1> 
   583                              <1> skipSpaces:
   584                              <1> ;Also skips tabs
   585                              <1> ;Input: rsi must point to the start of the data string
   586                              <1> ;Output: rsi points to the first non-space char
   587                              <1> ;           al = First non-space char
   588 000009F6 AC                  <1>     lodsb
   589 000009F7 3C20                <1>     cmp al, " "
   590 000009F9 74FB                <1>     je short skipSpaces  
   591 000009FB 3C09                <1>     cmp al, TAB
   592 000009FD 74F7                <1>     je short skipSpaces
   593                              <1>     return
    13                              <2> %%_ret:
    14 000009FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   594                              <1> 
   595                              <1> ;---------------------------------------------------------------------------
   596                              <1> ;                  !!!! IMPORTANT Int 23h HANDLERS !!!!
   597                              <1> ;---------------------------------------------------------------------------
   598                              <1> i23hXfr:
   599 00000A00 0FB71D(ED040000)    <1>     movzx ebx, word [xfrHdl]
   600 00000A07 B8003E0000          <1>     mov eax, 3E00h  ;Close the handle
   601 00000A0C CD21                <1>     int 21h
   602                              <1>     ;Now reset the stack and proceed as normal
   603                              <1> i23hInsert:
   604                              <1> ;^C handler for insert!
   605 00000A0E 488D25(40060000)    <1>     lea rsp, stackTop
   606 00000A15 FC                  <1>     cld
   607 00000A16 E84A0B0000          <1>     call printCRLF
   608 00000A1B E848010000          <1>     call insertLine.cleanInsert ;We now reset the state of the memory
   609 00000A20 E9E4FAFFFF          <1>     jmp nextCmd     ;Now go to the next command in the command line!
   610                              <1> 
   611                              <1> i23h:
   612                              <1> ;^C handler. Reset the stack pointer and jump to get command
   613 00000A25 488D25(40060000)    <1>     lea rsp, stackTop
   614 00000A2C FC                  <1>     cld
   615 00000A2D E8330B0000          <1>     call printCRLF
   616 00000A32 E9CDF9FFFF          <1>     jmp getCommand  ;Now jump to get the command
    36                                  %include "./Source/edfunc.asm"
     1                              <1> ;This is where the main user selectable routines are
     2                              <1> ;All arguments specified are signed words
     3                              <1> 
     4                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     5                              <1> ; File editing functions
     6                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     7                              <1> 
     8                              <1> editLine:
     9                              <1> ;Displays a line and allows it to be edited
    10                              <1> ;--------------------------------------------
    11                              <1> ;Invoked by: [line]
    12                              <1> ;--------------------------------------------
    13 00000A37 803D(D8010000)01    <1>     cmp byte [argCnt], 1
    14 00000A3E 0F854D0C0000        <1>     jne printComErr
    15 00000A44 48FF0D(D0010000)    <1>     dec qword [charPtr] ;Adjust ptr to point to the CR or ;
    16 00000A4B 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]  ;Get the line number
    17 00000A52 85DB                <1>     test ebx, ebx
    18 00000A54 7509                <1>     jnz .notNext
    19                              <1>     ;If 0, means next line
    20 00000A56 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Get the current line number
    21 00000A5D FFC3                <1>     inc ebx ;and go to the next line
    22                              <1> .notNext:
    23 00000A5F E8E4FDFFFF          <1>     call findLine   ;rdi points to the end of memory selected line
    24                              <1>     ;If we return with ZF set, we proceed because we found the line,
    25                              <1>     ; else we simply return!
    26 00000A64 668915(1E000000)    <1>     mov word [curLineNum], dx
    27 00000A6B 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
    28                              <1>     retnz   ;If the line specified was past the end, we return now
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000A72 75(FF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    29 00000A74 483B3D(28000000)    <1>     cmp rdi, qword [eofPtr]
    30                              <1>     rete    ;Return if these are equal!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000A7B 74(FF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    31 00000A7D 4889FE              <1>     mov rsi, rdi    ;Save the current line ptr on the stack
    32 00000A80 56                  <1>     push rsi
    33 00000A81 E8F8FCFFFF          <1>     call stufBuf    ;Stuff the line pointed to by rsi into the buffer
    34 00000A86 5E                  <1>     pop rsi         ;Get back the curLinePtr in rsi
    35 00000A87 8915(67030000)      <1>     mov dword [workLen], edx    ;Store the real length into the var
    36 00000A8D E85A0B0000          <1>     call printLine      
    37 00000A92 E8E60A0000          <1>     call printLineNum
    38 00000A97 488D15(65020000)    <1>     lea rdx, workLine
    39 00000A9E B8000A0000          <1>     mov eax, 0A00h  ;Edit magic woo
    40 00000AA3 CD21                <1>     int 21h
    41 00000AA5 E8C20A0000          <1>     call printLF
    42 00000AAA 807A0100            <1>     cmp byte [rdx + 1], 0   ;If just a CR input, return with no edit!
    43                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000AAE 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000AB0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 00000AB1 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the string portion immediately
    45 00000AB5 E8F8FCFFFF          <1>     call doCmdChar
    46 00000ABA 488B3D(20000000)    <1>     mov rdi, qword [curLinePtr] ;Point to the line we have edited
    47 00000AC1 0FB64A01            <1>     movzx ecx, byte [rdx + 1]   ;Get the adjusted string length in ecx
    48 00000AC5 8B15(67030000)      <1>     mov edx, dword [workLen]    ;Get the old line length in edx
    49 00000ACB E960FCFFFF          <1>     jmp replaceLine
    50                              <1> 
    51                              <1> insertLine:
    52                              <1> ;Inserts a line
    53                              <1> ;--------------------------------------------
    54                              <1> ;Invoked by: [line]I
    55                              <1> ;--------------------------------------------
    56 00000AD0 803D(D8010000)01    <1>     cmp byte [argCnt], 1
    57 00000AD7 0F85B40B0000        <1>     jne printComErr
    58 00000ADD 488D152AFFFFFF      <1>     lea rdx, i23hInsert ;Set to the insert handler
    59 00000AE4 B823250000          <1>     mov eax, 2523h
    60 00000AE9 CD21                <1>     int 21h
    61 00000AEB 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]  ;Get the line number
    62 00000AF2 85DB                <1>     test ebx, ebx
    63 00000AF4 7507                <1>     jnz .notNext
    64                              <1>     ;If 0, means next line
    65 00000AF6 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Get the current line number
    66                              <1> .notNext:
    67 00000AFD E846FDFFFF          <1>     call findLine   ;Set line number in dx and rdi -> Space in memory!
    68 00000B02 89D3                <1>     mov ebx, edx    ;Move the actual line number into ebx
    69 00000B04 488B15(30000000)    <1>     mov rdx, qword [endOfArena]
    70 00000B0B E803FDFFFF          <1>     call makeSpace  ;Make space to insert new line!
    71                              <1> .inLp:
    72 00000B10 E81DFDFFFF          <1>     call setLineVars
    73 00000B15 E8630A0000          <1>     call printLineNum
    74 00000B1A 488D15(65020000)    <1>     lea rdx, workLine
    75 00000B21 B8000A0000          <1>     mov eax, 0A00h  ;Full on edit mode
    76 00000B26 CD21                <1>     int 21h
    77 00000B28 E83F0A0000          <1>     call printLF
    78                              <1>     ;Check if the first char in the buffer is a EOF
    79 00000B2D 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the string portion immediately
    80 00000B31 803E1A              <1>     cmp byte [rsi], EOF         ;Apparent EDLIN behaviour, terminate insert so!
    81 00000B34 7432                <1>     je .cleanInsert
    82 00000B36 E877FCFFFF          <1>     call doCmdChar              ;Preserves rdi, the curLinePtr
    83 00000B3B 0FB64EFF            <1>     movzx ecx, byte [rsi - 1]   ;Get the number of chars typed in
    84 00000B3F 4889FA              <1>     mov rdx, rdi                
    85 00000B42 FFC1                <1>     inc ecx                     ;Make space for terminating LF too
    86 00000B44 4801CA              <1>     add rdx, rcx                ;Check if we will go out of bounds
    87 00000B47 483B15(30000000)    <1>     cmp rdx, qword [endOfArena]
    88 00000B4E 730E                <1>     jae .inBad
    89 00000B50 4839EA              <1>     cmp rdx, rbp                ;Are we past file Eof?
    90 00000B53 7309                <1>     jae .inBad                  ;Jump if so
    91 00000B55 F3A4                <1>     rep movsb                   ;Else copy from edit line to space made
    92 00000B57 B00A                <1>     mov al, LF
    93 00000B59 AA                  <1>     stosb                       ;Store the line feed too
    94 00000B5A FFC3                <1>     inc ebx                     ;Go to next line :)
    95 00000B5C EBB2                <1>     jmp short .inLp
    96                              <1> .inBad:
    97 00000B5E E805000000          <1>     call .cleanInsert
    98 00000B63 E9200B0000          <1>     jmp printMemErr
    99                              <1> .cleanInsert: 
   100                              <1> ;Move the lines after the insertion point back to where they need to be :)
   101 00000B68 488B35(28000000)    <1>     mov rsi, qword [eofPtr] 
   102 00000B6F 488B3D(20000000)    <1>     mov rdi, qword [curLinePtr]
   103 00000B76 488B0D(30000000)    <1>     mov rcx, qword [endOfArena]
   104 00000B7D 4829F1              <1>     sub rcx, rsi    ;Get the number of bytes to copy high again
   105 00000B80 48FFC6              <1>     inc rsi         ;Go to char past EOF to source chars from
   106 00000B83 F3A4                <1>     rep movsb
   107 00000B85 48FFCF              <1>     dec rdi         ;Go back to the EOF char itself
   108 00000B88 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   109 00000B8F 488D158FFEFFFF      <1>     lea rdx, i23h
   110 00000B96 B823250000          <1>     mov eax, 2523h  ;Set Interrupt handler for Int 23h
   111 00000B9B CD21                <1>     int 21h
   112                              <1>     return
    13                              <2> %%_ret:
    14 00000B9D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> deleteLines:
   115                              <1> ;Deletes one or a range of lines
   116                              <1> ;--------------------------------------------
   117                              <1> ;Invoked by: [line][,line]D
   118                              <1> ;--------------------------------------------
   119 00000B9E 803D(D8010000)02    <1>     cmp byte [argCnt], 2
   120 00000BA5 0F87E60A0000        <1>     ja printComErr
   121 00000BAB 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   122 00000BB2 85DB                <1>     test ebx, ebx
   123 00000BB4 750E                <1>     jnz .notCur
   124 00000BB6 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]
   125 00000BBD 66891D(D9010000)    <1>     mov word [arg1], bx ;Store it explicitly for later
   126                              <1> .notCur:
   127 00000BC4 0FB71D(DB010000)    <1>     movzx ebx, word [arg2]
   128 00000BCB 85DB                <1>     test ebx, ebx
   129 00000BCD 750E                <1>     jnz .goDel
   130 00000BCF 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]     ;Use arg1 as the range end
   131 00000BD6 66891D(DB010000)    <1>     mov word [arg2], bx
   132                              <1> .goDel:
   133 00000BDD 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   134 00000BE4 E810FCFFFF          <1>     call checkArgOrder  ;Now we check if our args are ok
   135 00000BE9 E85AFCFFFF          <1>     call findLine   ;If ZF=NZ, start of del not found, just return
   136                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000BEE 75(9D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   137 00000BF0 53                  <1>     push rbx    ;Save the line number
   138 00000BF1 57                  <1>     push rdi    ;And pointer to it
   139 00000BF2 0FB71D(DB010000)    <1>     movzx ebx, word [arg2]
   140 00000BF9 FFC3                <1>     inc ebx     ;Range so end at the line after
   141 00000BFB E848FCFFFF          <1>     call findLine   ;Get the end of the copy ptr
   142 00000C00 4889FE              <1>     mov rsi, rdi    ;Source chars from this line
   143 00000C03 5F                  <1>     pop rdi
   144 00000C04 5B                  <1>     pop rbx
   145 00000C05 66891D(1E000000)    <1>     mov word [curLineNum], bx   ;Now update the line number
   146 00000C0C 48893D(20000000)    <1>     mov qword [curLinePtr], rdi ;This is where we will be copying to
   147 00000C13 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   148 00000C1A 4829F1              <1>     sub rcx, rsi    ;Get the number of chars to copy up
   149 00000C1D FFC1                <1>     inc ecx         ;Add one char for the eof char itself
   150 00000C1F FC                  <1>     cld 
   151 00000C20 F3A4                <1>     rep movsb       ;Copy the whole file up
   152 00000C22 48FFCF              <1>     dec rdi         ;Point to the EOF char itself
   153 00000C25 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   154                              <1>     return
    13                              <2> %%_ret:
    14 00000C2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> 
   157                              <1> transferLines:
   158                              <1> ;Writes the lines specified to the specified file
   159                              <1> ;--------------------------------------------
   160                              <1> ;Invoked by: [line]T[d:]filename
   161                              <1> ;--------------------------------------------
   162 00000C2D 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   163 00000C34 0F85570A0000        <1>     jne printComErr
   164 00000C3A E8B7FDFFFF          <1>     call skipSpaces ;Move rsi to the first char of the xfrspec
   165 00000C3F 48FFCE              <1>     dec rsi         ;Go to the first char
   166 00000C42 488D15(6D040000)    <1>     lea rdx, xfrName
   167 00000C49 4889D7              <1>     mov rdi, rdx
   168                              <1> .nameCp:
   169 00000C4C AC                  <1>     lodsb
   170 00000C4D 3C20                <1>     cmp al, SPC
   171 00000C4F 740F                <1>     je .cpOk
   172 00000C51 3C09                <1>     cmp al, TAB
   173 00000C53 740B                <1>     je .cpOk
   174 00000C55 3C0D                <1>     cmp al, CR
   175 00000C57 7407                <1>     je .cpOk
   176 00000C59 3C3B                <1>     cmp al, ";"
   177 00000C5B 7403                <1>     je .cpOk
   178 00000C5D AA                  <1>     stosb
   179 00000C5E EBEC                <1>     jmp short .nameCp
   180                              <1> .cpOk:
   181 00000C60 C60700              <1>     mov byte [rdi], 0   ;Store terminating null
   182 00000C63 48FFCE              <1>     dec rsi             ;Now go to the char which terminated the copy
   183 00000C66 488935(D0010000)    <1>     mov qword [charPtr], rsi    ;And store this as the new continuation ptr
   184 00000C6D B8003D0000          <1>     mov eax, 3D00h      ;Open file pointed to by rdx for reading
   185 00000C72 CD21                <1>     int 21h
   186 00000C74 731B                <1>     jnc .fileOpen
   187 00000C76 663D0200            <1>     cmp ax, errFnf
   188 00000C7A 488D15(8D000000)    <1>     lea rdx, badFindStr ;String for if the file is not found
   189 00000C81 488D1D(71000000)    <1>     lea rbx, badDrvStr  ;Else just say drive or fnf!
   190 00000C88 480F45D3            <1>     cmovne rdx, rbx
   191 00000C8C E9070A0000          <1>     jmp printErr    ;Print the string in rdx
   192                              <1> .fileOpen:
   193 00000C91 668905(ED040000)    <1>     mov word [xfrHdl], ax   ;Save the handle
   194                              <1>     ;Transfer lines works like insert lines, in that it is inserting lines
   195                              <1>     ; but from a separate file. We therefore set up a custom ^C handler 
   196                              <1>     ; and cleanup like insert if it is invoked!
   197 00000C98 B823250000          <1>     mov eax, 2523h  ;Setup int 23h for xfr
   198 00000C9D 488D155CFDFFFF      <1>     lea rdx, i23hXfr
   199 00000CA4 CD21                <1>     int 21h
   200 00000CA6 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   201 00000CAD 85DB                <1>     test ebx, ebx
   202 00000CAF 7507                <1>     jnz .notCur
   203 00000CB1 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Get the current line number ptr
   204                              <1> .notCur:
   205 00000CB8 E88BFBFFFF          <1>     call findLine   ;Get actual line number in dx, and ptr in rdi
   206 00000CBD 89D3                <1>     mov ebx, edx
   207 00000CBF 488B15(30000000)    <1>     mov rdx, qword [endOfArena]     ;Copy to the end of the arena
   208 00000CC6 E848FBFFFF          <1>     call makeSpace  ;And jiggle it over
   209 00000CCB 488B15(20000000)    <1>     mov rdx, qword [curLinePtr] ;Read data into here now
   210 00000CD2 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   211 00000CD9 29D1                <1>     sub ecx, edx    ;Get the number of chars of space we have to read in
   212 00000CDB 51                  <1>     push rcx
   213 00000CDC B8003F0000          <1>     mov eax, 3F00h
   214 00000CE1 0FB71D(ED040000)    <1>     movzx ebx, word [xfrHdl]
   215 00000CE8 CD21                <1>     int 21h
   216 00000CEA 5A                  <1>     pop rdx     ;Get the count back into rdx
   217 00000CEB 89C1                <1>     mov ecx, eax    ;Move the count into ecx
   218 00000CED 39C2                <1>     cmp edx, eax
   219 00000CEF 7713                <1>     ja .fullXfr
   220                              <1>     ;We copied exactly the size of the arena, assume this means the whole 
   221                              <1>     ; file may not have been copied. We still proceed though
   222 00000CF1 488D15(93010000)    <1>     lea rdx, badMergeStr
   223 00000CF8 488B0D(20000000)    <1>     mov rcx, qword [curLinePtr]
   224 00000CFF E915000000          <1>     jmp .endXfr
   225                              <1> .fullXfr:
   226 00000D04 48030D(20000000)    <1>     add rcx, qword [curLinePtr] ;Turn into offset from start of line
   227 00000D0B 4889CE              <1>     mov rsi, rcx
   228 00000D0E 48FFCE              <1>     dec rsi ;Go to the last char we read in
   229 00000D11 AC                  <1>     lodsb
   230 00000D12 3C1A                <1>     cmp al, EOF
   231 00000D14 7503                <1>     jne .endXfr
   232 00000D16 48FFC9              <1>     dec rcx ;Drop a byte
   233                              <1> .endXfr:
   234 00000D19 4889CF              <1>     mov rdi, rcx        ;Copy to the curLinePtr pos
   235 00000D1C 488B35(28000000)    <1>     mov rsi, qword [eofPtr]
   236 00000D23 48FFC6              <1>     inc rsi             ;Start copying from the stored data past the eofPtr
   237 00000D26 488B0D(30000000)    <1>     mov rcx, qword [endOfArena]
   238 00000D2D 4829F1              <1>     sub rcx, rsi
   239 00000D30 FFC1                <1>     inc ecx             ;Add EOF char to the count
   240 00000D32 F3A4                <1>     rep movsb
   241 00000D34 48FFCF              <1>     dec rdi             ;Go back to the EOF char
   242 00000D37 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   243 00000D3E 0FB71D(ED040000)    <1>     movzx ebx, word [xfrHdl]
   244 00000D45 B8003E0000          <1>     mov eax, 3E00h      ;Close handle!
   245 00000D4A CD21                <1>     int 21h
   246                              <1>     return
    13                              <2> %%_ret:
    14 00000D4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   247                              <1> 
   248                              <1> 
   249                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   250                              <1> ; File block moving functions (copying and cutting and pasting)
   251                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   252                              <1> ;Both following functions need 3 arguments, but empty args are permitted!
   253                              <1> moveLines:
   254                              <1> ;Moves a block of lines elsewhere (non overlapping moves only)
   255                              <1> ;--------------------------------------------
   256                              <1> ;Invoked by: [line],[line],lineM
   257                              <1> ;--------------------------------------------
   258 00000D4D 803D(D8010000)03    <1>     cmp byte [argCnt], 3
   259 00000D54 0F8537090000        <1>     jne printComErr
   260 00000D5A C605(EF040000)FF    <1>     mov byte [movCpFlg], -1
   261 00000D61 E914000000          <1>     jmp copyLines.common
   262                              <1> copyLines:
   263                              <1> ;Duplicates a line or a range of lines to a position specifed 
   264                              <1> ;   (non-overlapping) 
   265                              <1> ;--------------------------------------------
   266                              <1> ;Invoked by: [line],[line],line[,count]C
   267                              <1> ;--------------------------------------------
   268 00000D66 803D(D8010000)03    <1>     cmp byte [argCnt], 3    ;This can be 3 or 4 arguments!
   269 00000D6D 0F821E090000        <1>     jb printComErr
   270 00000D73 C605(EF040000)00    <1>     mov byte [movCpFlg], 0
   271                              <1> .common:
   272                              <1> ;arg1 = Start line of range for copy, default to current line
   273                              <1> ;arg2 = End line of range for copy, default to line after current line
   274                              <1> ;arg3 = Line to place it at, no default, cant be 0!
   275                              <1> ;arg4 = Number of times to consecutively repeat the copy (copy only)
   276 00000D7A 0FB71D(DD010000)    <1>     movzx ebx, word [arg3]  ;Check the mandatory argument
   277 00000D81 85DB                <1>     test ebx, ebx   ;Are we 0?
   278 00000D83 488D15(61020000)    <1>     lea rdx, badDestStr
   279 00000D8A 0F8408090000        <1>     jz printErr
   280 00000D90 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   281 00000D97 85DB                <1>     test ebx, ebx
   282 00000D99 7513                <1>     jnz .gotStart
   283 00000D9B 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]
   284 00000DA2 E852FAFFFF          <1>     call checkArgOrder  ;Check that this is before arg2
   285 00000DA7 66891D(D9010000)    <1>     mov word [arg1], bx
   286                              <1> .gotStart:
   287 00000DAE E895FAFFFF          <1>     call findLine   ;Get in rdi the ptr to the first argument
   288 00000DB3 0F85D8080000        <1>     jnz printComErr ;If the line is not found, we gotta complain!
   289 00000DB9 48893D(F0040000)    <1>     mov qword [blkPtrSrc], rdi  ;Save the ptr to the line!
   290 00000DC0 0FB71D(DB010000)    <1>     movzx ebx, word [arg2]
   291 00000DC7 85DB                <1>     test ebx, ebx
   292 00000DC9 750E                <1>     jnz .gotEnd
   293                              <1>     ;Set the default line!
   294 00000DCB 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum] 
   295 00000DD2 66891D(DB010000)    <1>     mov word [arg2], bx
   296                              <1> .gotEnd:
   297 00000DD9 53                  <1>     push rbx            ;Save this line number
   298 00000DDA E869FAFFFF          <1>     call findLine       ;Ensure the line in bx exists
   299 00000DDF 5B                  <1>     pop rbx
   300 00000DE0 0F85AB080000        <1>     jnz printComErr     ;Again, if the line not found, complain!
   301 00000DE6 FFC3                <1>     inc ebx             ;Now increment the line number to get line after
   302 00000DE8 E85BFAFFFF          <1>     call findLine   ;This can be end of arena since this is end of copy blk
   303 00000DED 48893D(F8040000)    <1>     mov qword [blkPtrEnd], rdi     
   304                              <1> ;We mightve changed the second argument so double check it!
   305 00000DF4 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   306 00000DFB 663B1D(DB010000)    <1>     cmp bx, word [arg2]
   307 00000E02 0F8789080000        <1>     ja printComErr
   308                              <1> ;Now we check against the third line. It must not be in the range 
   309                              <1> ; specified, else error (cannot overlap copies or moves!!!)
   310 00000E08 0FB71D(DD010000)    <1>     movzx ebx, word [arg3]    ;Get the storage line
   311 00000E0F 663B1D(D9010000)    <1>     cmp bx, word [arg1]     ;arg3 <= arg1?
   312 00000E16 760D                <1>     jbe .argsOk
   313 00000E18 663B1D(DB010000)    <1>     cmp bx, word [arg2]     ;arg3 > arg2 ?
   314 00000E1F 0F866C080000        <1>     jbe printComErr
   315                              <1> .argsOk:
   316 00000E25 488B0D(F8040000)    <1>     mov rcx, qword [blkPtrEnd]
   317 00000E2C 482B0D(F0040000)    <1>     sub rcx, qword [blkPtrSrc]  ;Get the size of one block that we will move
   318 00000E33 890D(08050000)      <1>     mov dword [blkSize], ecx
   319 00000E39 0FB705(DF010000)    <1>     movzx eax, word [arg4]      ;Get the count length
   320 00000E40 85C0                <1>     test eax, eax
   321 00000E42 750E                <1>     jnz .havCnt                 ;We have a given count
   322 00000E44 B801000000          <1>     mov eax, 1                  ;Else, default to 1
   323 00000E49 668905(DF010000)    <1>     mov word [arg4], ax
   324 00000E50 EB0C                <1>     jmp short .noCount          ;ecx has the copysize, skip the multiply!
   325                              <1> .havCnt:
   326                              <1> ;Here we compute the copySize as a multiple of blkSize
   327 00000E52 F7E1                <1>     mul ecx
   328 00000E54 85D2                <1>     test edx, edx   ;Is this larger than a dword (should never happen!)
   329 00000E56 0F852C080000        <1>     jnz printMemErr ;Bad count argument!!
   330 00000E5C 89C1                <1>     mov ecx, eax    ;Make ecx the size of the copy
   331                              <1> .noCount:
   332 00000E5E 890D(0C050000)      <1>     mov dword [copySize], ecx
   333                              <1> ;Now, can we fit our new section of text in memory?
   334 00000E64 488B1D(28000000)    <1>     mov rbx, qword [eofPtr]
   335 00000E6B 488B15(30000000)    <1>     mov rdx, qword [endOfArena]
   336 00000E72 4829DA              <1>     sub rdx, rbx
   337 00000E75 39CA                <1>     cmp edx, ecx
   338 00000E77 0F820B080000        <1>     jb printMemErr  ;Insufficient memory error!!
   339                              <1> ;Finally, get the line we will place copy at!
   340 00000E7D 0FB71D(DD010000)    <1>     movzx ebx, word [arg3]
   341 00000E84 E8BFF9FFFF          <1>     call findLine
   342 00000E89 48893D(00050000)    <1>     mov qword [cpyPtrDest], rdi ;Now save ptr to the line we copy to!
   343                              <1> ;Now make space for one load of the copy
   344 00000E90 488B35(28000000)    <1>     mov rsi, qword [eofPtr]
   345 00000E97 4889F1              <1>     mov rcx, rsi
   346 00000E9A 4829F9              <1>     sub rcx, rdi    ;Get the number of bytes we will shift
   347 00000E9D FFC1                <1>     inc ecx         ;Add EOF
   348 00000E9F 4889F7              <1>     mov rdi, rsi    ;This is the destination
   349 00000EA2 8B05(0C050000)      <1>     mov eax, dword [copySize]
   350 00000EA8 4801C7              <1>     add rdi, rax    ;Go to the destination
   351 00000EAB 48893D(28000000)    <1>     mov qword [eofPtr], rdi ;This is the new eof position!
   352 00000EB2 FD                  <1>     std
   353 00000EB3 F3A4                <1>     rep movsb   ;Now copy in reverse :)
   354 00000EB5 FC                  <1>     cld
   355                              <1> ;Adjust blkPtrs if they were in this region.
   356 00000EB6 488B1D(00050000)    <1>     mov rbx, qword [cpyPtrDest]
   357 00000EBD 483B1D(F0040000)    <1>     cmp rbx, qword [blkPtrSrc]
   358 00000EC4 7714                <1>     ja .ptrsOk
   359 00000EC6 8B0D(0C050000)      <1>     mov ecx, dword [copySize]    ;Add this amount to the ptrs
   360 00000ECC 48010D(F0040000)    <1>     add qword [blkPtrSrc], rcx
   361 00000ED3 48010D(F8040000)    <1>     add qword [blkPtrEnd], rcx
   362                              <1> .ptrsOk:
   363 00000EDA 0FB71D(DF010000)    <1>     movzx ebx, word [arg4]  ;Get adjusted count to use as counter
   364 00000EE1 488B3D(00050000)    <1>     mov rdi, qword [cpyPtrDest] ;Write to here!
   365                              <1> .cpLp:
   366 00000EE8 8B0D(08050000)      <1>     mov ecx, dword [blkSize]
   367 00000EEE 488B35(F0040000)    <1>     mov rsi, qword [blkPtrSrc]  ;Start the copy from here
   368 00000EF5 F3A4                <1>     rep movsb
   369 00000EF7 FFCB                <1>     dec ebx
   370 00000EF9 75ED                <1>     jnz .cpLp   ;If this is zero, finish!
   371 00000EFB 803D(EF040000)00    <1>     cmp byte [movCpFlg], 0  ;Was this a move or a copy?
   372 00000F02 744F                <1>     je .copyDone
   373                              <1> ;Now pull everything back over the source of the move
   374 00000F04 488B3D(F0040000)    <1>     mov rdi, qword [blkPtrSrc]
   375 00000F0B 488B35(F8040000)    <1>     mov rsi, qword [blkPtrEnd]
   376 00000F12 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   377 00000F19 4829F1              <1>     sub rcx, rsi    ;Get the number of bytes to move 
   378 00000F1C 48FFC1              <1>     inc rcx         ;Include EOF
   379 00000F1F F3A4                <1>     rep movsb
   380 00000F21 48FFCF              <1>     dec rdi         ;Go back to the EOF char itself
   381 00000F24 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   382 00000F2B 0FB71D(DD010000)    <1>     movzx ebx, word [arg3]
   383 00000F32 663B1D(D9010000)    <1>     cmp bx, word [arg1] ;Was this in the range of the move?
   384 00000F39 7618                <1>     jbe .copyDone
   385                              <1>     ;If it was, add the difference - 1
   386 00000F3B 66031D(D9010000)    <1>     add bx, word [arg1]
   387 00000F42 662B1D(DB010000)    <1>     sub bx, word [arg2]
   388 00000F49 66FFCB              <1>     dec bx 
   389 00000F4C 66891D(DD010000)    <1>     mov word [arg3], bx
   390                              <1> .copyDone:
   391 00000F53 0FB71D(DD010000)    <1>     movzx ebx, word [arg3]
   392 00000F5A E8E9F8FFFF          <1>     call findLine
   393 00000F5F 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   394 00000F66 66891D(1E000000)    <1>     mov word [curLineNum], bx
   395                              <1>     return
    13                              <2> %%_ret:
    14 00000F6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   396                              <1> 
   397                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   398                              <1> ; File searching functions
   399                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   400                              <1> 
   401                              <1> searchText:
   402                              <1> ;Searches text for a string
   403                              <1> ;--------------------------------------------
   404                              <1> ;Invoked by: [line][,line][?]S[string]
   405                              <1> ;--------------------------------------------
   406 00000F6E 803D(D8010000)02    <1>     cmp byte [argCnt], 2
   407 00000F75 0F8716070000        <1>     ja printComErr
   408 00000F7B C605(10050000)01    <1>     mov byte [srchMode], 1      ;Search from current line + 1
   409 00000F82 C605(11050000)01    <1>     mov byte [findMod], 1       ;Set that we are searching!
   410 00000F89 E804F6FFFF          <1>     call findFirst
   411 00000F8E 0F85EB060000        <1>     jnz printLineNotFoundErr
   412                              <1> .lp:
   413 00000F94 488B35(1F050000)    <1>     mov rsi, qword [fndLinePtr]
   414 00000F9B 0FB71D(27050000)    <1>     movzx ebx, word [fndLineNum]
   415 00000FA2 E845060000          <1>     call printLine      ;Print this line!
   416 00000FA7 488B3D(17050000)    <1>     mov rdi, qword [fndStrPtr]
   417 00000FAE 8B0D(29050000)      <1>     mov ecx, dword [fndSrchLen]
   418 00000FB4 B00A                <1>     mov al, LF
   419 00000FB6 F2AE                <1>     repne scasb
   420 00000FB8 0F85C1060000        <1>     jne printLineNotFoundErr
   421 00000FBE 48893D(17050000)    <1>     mov qword [fndStrPtr], rdi
   422 00000FC5 48893D(1F050000)    <1>     mov qword [fndLinePtr], rdi
   423 00000FCC 890D(29050000)      <1>     mov dword [fndSrchLen], ecx ;Remaining count for search region
   424 00000FD2 66FF05(27050000)    <1>     inc word [fndLineNum]   ;Goto next line now!
   425 00000FD9 E87CF5FFFF          <1>     call okPrompt
   426 00000FDE 740D                <1>     jz findSetLine
   427 00000FE0 E891F6FFFF          <1>     call findNext
   428 00000FE5 0F8594060000        <1>     jnz printLineNotFoundErr    ;If no more found, print error message!
   429 00000FEB EBA7                <1>     jmp short .lp   ;Else, output it and loop again
   430                              <1> 
   431                              <1> findSetLine:
   432 00000FED 0FB71D(27050000)    <1>     movzx ebx, word [fndLineNum]
   433 00000FF4 803D(11050000)00    <1>     cmp byte [findMod], 0   ;If we are search, we need to decrement
   434 00000FFB 7402                <1>     je .main
   435 00000FFD FFCB                <1>     dec ebx ;Advance from current line to the last line we found on!
   436                              <1> .main:
   437 00000FFF E844F8FFFF          <1>     call findLine
   438 00001004 66891D(1E000000)    <1>     mov word [curLineNum], bx
   439 0000100B 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   440                              <1>     return
    13                              <2> %%_ret:
    14 00001012 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> replaceText:
   443                              <1> ;Replaces all matching strings with specified string (NO REGEX)
   444                              <1> ;--------------------------------------------
   445                              <1> ;Invoked by: [line][,line][?]R[string]<EOF>[string]
   446                              <1> ;--------------------------------------------
   447 00001013 803D(D8010000)02    <1>     cmp byte [argCnt], 2
   448 0000101A 0F8771060000        <1>     ja printComErr
   449 00001020 C605(10050000)01    <1>     mov byte [srchMode], 1  ;Search by default from current line + 1
   450 00001027 C605(11050000)00    <1>     mov byte [findMod], 0   ;Set that we are replacing the string!
   451 0000102E E85FF5FFFF          <1>     call findFirst
   452 00001033 0F8546060000        <1>     jnz printLineNotFoundErr
   453                              <1> .lp:
   454 00001039 488B35(1F050000)    <1>     mov rsi, qword [fndLinePtr]
   455 00001040 E839F7FFFF          <1>     call stufBuf    ;Get the line length in edx
   456 00001045 0FB70D(13050000)    <1>     movzx ecx, word [fndLenOld]
   457 0000104C 29CA                <1>     sub edx, ecx
   458 0000104E 0FB70D(15050000)    <1>     movzx ecx, word [fndLenNew]
   459 00001055 01CA                <1>     add edx, ecx
   460 00001057 81FAFE000000        <1>     cmp edx, 254
   461 0000105D 0F87C0000000        <1>     ja .tooLong
   462 00001063 0FB71D(27050000)    <1>     movzx ebx, word [fndLineNum]
   463 0000106A 52                  <1>     push rdx    ;Save the line length
   464 0000106B E80D050000          <1>     call printLineNum   ;Print the line number in ebx
   465 00001070 5A                  <1>     pop rdx
   466                              <1>     ;Now build the new string in the buffer to print as a replacement
   467 00001071 488B0D(17050000)    <1>     mov rcx, qword [fndStrPtr]
   468 00001078 488B35(1F050000)    <1>     mov rsi, qword [fndLinePtr]
   469 0000107F 4829F1              <1>     sub rcx, rsi    ;Get the number of chars into the line our string is at
   470 00001082 48FFC9              <1>     dec rcx         ;Drop the first char of the string we will replace
   471 00001085 488D3D(6B030000)    <1>     lea rdi, spareLine  ;Build the new line in this buffer 
   472 0000108C E89E000000          <1>     call .cpyString
   473 00001091 56                  <1>     push rsi
   474 00001092 488D35(AF050000)    <1>     lea rsi, fndString2 + 1
   475 00001099 0FB70D(15050000)    <1>     movzx ecx, word [fndLenNew]
   476 000010A0 E88A000000          <1>     call .cpyString
   477 000010A5 5E                  <1>     pop rsi
   478 000010A6 0FB70D(13050000)    <1>     movzx ecx, word [fndLenOld]
   479 000010AD 4801CE              <1>     add rsi, rcx
   480 000010B0 89D1                <1>     mov ecx, edx    ;Move the remaining chars count into ecx
   481 000010B2 81C102000000        <1>     add ecx, 2      ;Add 2 for the CR/LF
   482 000010B8 E872000000          <1>     call .cpyString ;Write the last part of the line in
   483 000010BD 31C0                <1>     xor eax, eax
   484 000010BF AA                  <1>     stosb           ;Store the null terminator too
   485 000010C0 E8A4050000          <1>     call prnAsciiz
   486 000010C5 E890F4FFFF          <1>     call okPrompt
   487 000010CA 754A                <1>     jnz .gotoNext
   488 000010CC E81CFFFFFF          <1>     call findSetLine
   489 000010D1 488B3D(17050000)    <1>     mov rdi, qword [fndStrPtr]
   490 000010D8 48FFCF              <1>     dec rdi
   491 000010DB 488D35(AF050000)    <1>     lea rsi, fndString2 + 1
   492 000010E2 0FB715(13050000)    <1>     movzx edx, word [fndLenOld]
   493 000010E9 0FB70D(15050000)    <1>     movzx ecx, word [fndLenNew]
   494 000010F0 FFC9                <1>     dec ecx
   495 000010F2 48010D(17050000)    <1>     add qword [fndStrPtr], rcx  ;Go to the end of the found string
   496 000010F9 FFC1                <1>     inc ecx
   497 000010FB FFCA                <1>     dec edx
   498 000010FD 2915(29050000)      <1>     sub dword [fndSrchLen], edx ;
   499 00001103 730A                <1>     jae .overspill
   500 00001105 C705(29050000)0000- <1>     mov dword [fndSrchLen], 0
   500 0000110D 0000                <1>
   501                              <1> .overspill:
   502 0000110F FFC2                <1>     inc edx
   503 00001111 E81AF6FFFF          <1>     call replaceLine
   504                              <1> .gotoNext:
   505 00001116 E85BF5FFFF          <1>     call findNext
   506                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000111B 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000111D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   507 0000111E E916FFFFFF          <1>     jmp .lp
   508                              <1> .tooLong:
   509 00001123 488D15(94020000)    <1>     lea rdx, badLineLen
   510 0000112A E969050000          <1>     jmp printErr
   511                              <1> .cpyString:
   512                              <1> ;Copies a string, ensures we have the last char in al when we return
   513                              <1> ;Copies ecx number of chars
   514 0000112F 85C9                <1>     test ecx, ecx
   515                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001131 74(1D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   516                              <1> .cpsLp:
   517 00001133 AC                  <1>     lodsb
   518 00001134 AA                  <1>     stosb
   519 00001135 FFCA                <1>     dec edx ;Decrement total line length
   520 00001137 FFC9                <1>     dec ecx ;Decrement line portion length
   521 00001139 75F8                <1>     jnz .cpsLp
   522                              <1>     return
    13                              <2> %%_ret:
    14 0000113B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   525                              <1> ; File listing functions
   526                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   527                              <1> 
   528                              <1> listLines:
   529                              <1> ;Prints a line or a number of lines.
   530                              <1> ;Defaults to from current line print 23 lines.
   531                              <1> ;Doesnt change the current line!
   532                              <1> ;--------------------------------------------
   533                              <1> ;Invoked by: [line][,line]L
   534                              <1> ;--------------------------------------------
   535 0000113C 803D(D8010000)02    <1>     cmp byte [argCnt], 2
   536 00001143 0F8748050000        <1>     ja printComErr
   537 00001149 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   538 00001150 85DB                <1>     test ebx, ebx
   539 00001152 7514                <1>     jnz .notCur ;If not the default, we do as told
   540                              <1>     ;Else, default behaviour
   541 00001154 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]
   542 0000115B 81EB0B000000        <1>     sub ebx, 11 ;Start printing 11 lines before the current line!
   543 00001161 7705                <1>     ja .notCur  
   544 00001163 BB01000000          <1>     mov ebx, 1
   545                              <1> .notCur:
   546 00001168 E8DBF6FFFF          <1>     call findLine
   547                              <1>     retnz   ;Return if the line not found!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000116D 75(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   548 0000116F 4889FE              <1>     mov rsi, rdi
   549 00001172 0FB73D(DB010000)    <1>     movzx edi, word [arg2]  ;Get the last line to print
   550 00001179 FFC7                <1>     inc edi
   551 0000117B 29DF                <1>     sub edi, ebx            ;Get the difference!
   552 0000117D 0F876E040000        <1>     ja printLines   
   553 00001183 BF17000000          <1>     mov edi, 23     ;Else the default
   554 00001188 E964040000          <1>     jmp printLines  ;Return through printLines!
   555                              <1> 
   556                              <1> pageLines:
   557                              <1> ;Prints a page of lines
   558                              <1> ;Defaults to from current line to print 23 lines
   559                              <1> ;Changes the current line to the last line printed!
   560                              <1> ;--------------------------------------------
   561                              <1> ;Invoked by: [line][,line]P
   562                              <1> ;--------------------------------------------
   563 0000118D 803D(D8010000)02    <1>     cmp byte [argCnt], 2
   564 00001194 0F87F7040000        <1>     ja printComErr
   565 0000119A 31DB                <1>     xor ebx, ebx    ;Set the pointer to the end of the file firstly
   566 0000119C E8A7F6FFFF          <1>     call findLine   
   567                              <1>     ;Use r10 to keep track of the last line in the file that we will set
   568 000011A1 4989D2              <1>     mov r10, rdx
   569 000011A4 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   570 000011AB 85DB                <1>     test ebx, ebx
   571 000011AD 7511                <1>     jnz .notCur
   572 000011AF 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]
   573 000011B6 81FB01000000        <1>     cmp ebx, 1  ;If the first line is 1, keep it there
   574 000011BC 7402                <1>     je .notCur
   575 000011BE FFC3                <1>     inc ebx     ;Else go to the line after
   576                              <1> .notCur:
   577 000011C0 4C39D3              <1>     cmp rbx, r10
   578                              <1>     reta    ;If we specify past the last line, do nothing
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000011C3 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000011C5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   579 000011C6 0FB715(DB010000)    <1>     movzx edx, word [arg2]  
   580 000011CD 85D2                <1>     test edx, edx   ;Did the user give what line to stop printing on?
   581 000011CF 7508                <1>     jnz .arg2Given 
   582                              <1> ;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
   583                              <1> ;Here is where the screen width is computed when we do dynamic 
   584                              <1> ; screen size stuff
   585 000011D1 89DA                <1>     mov edx, ebx
   586 000011D3 81C216000000        <1>     add edx, 22     ;Else its current line + 23
   587                              <1> ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   588                              <1> .arg2Given:
   589 000011D9 FFC2                <1>     inc edx         ;Get that last line
   590 000011DB 4C39D2              <1>     cmp rdx, r10    ;Is it past the end of the file?
   591 000011DE 7603                <1>     jbe .okRange
   592 000011E0 4C89D2              <1>     mov rdx, r10    ;Else, use r10 as the last line
   593                              <1> .okRange:
   594 000011E3 52                  <1>     push rdx        ;Save the end line
   595 000011E4 53                  <1>     push rbx        ;and the start line
   596 000011E5 89D3                <1>     mov ebx, edx    ;Now setup the pointers to point to the last line
   597 000011E7 FFCB                <1>     dec ebx         
   598 000011E9 E85AF6FFFF          <1>     call findLine   ;Get the actual line number in dx and ptr in rdi
   599 000011EE 668915(1E000000)    <1>     mov word [curLineNum], dx
   600 000011F5 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   601 000011FC 5B                  <1>     pop rbx         ;Get back the actual start line
   602 000011FD E846F6FFFF          <1>     call findLine   ;Now find the first line!
   603 00001202 4889FE              <1>     mov rsi, rdi    ;This is the source of the copy
   604 00001205 5F                  <1>     pop rdi         ;Get the end line count in edi
   605 00001206 29DF                <1>     sub edi, ebx    ;Get the number of lines to print in edi
   606 00001208 E9E4030000          <1>     jmp printLines  ;Return through printLines!
   607                              <1> 
   608                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   609                              <1> ; File IO control functions
   610                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   611                              <1> 
   612                              <1> appendLines:
   613                              <1> ;If the file is not fully loaded in arena, allows you to load 
   614                              <1> ; the next portion into the arena. Essentially ignores the 
   615                              <1> ; input and always fills up to the 3/4 limit.
   616                              <1> ;--------------------------------------------
   617                              <1> ;Invoked by: [n]A (number of bytes to read)
   618                              <1> ;--------------------------------------------
   619 0000120D 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   620 00001214 0F8577040000        <1>     jne printComErr
   621 0000121A F605(05000000)FF    <1>     test byte [eofReached], -1
   622 00001221 0F8531010000        <1>     jnz .outEofStr   ;Print the eof reached string
   623 00001227 488B15(28000000)    <1>     mov rdx, qword [eofPtr]
   624 0000122E 803D(D9010000)00    <1>     cmp byte [arg1], 0          ;Arg <> 0 means we fill the arena
   625 00001235 7509                <1>     jne .argGiven
   626 00001237 483B15(16000000)    <1>     cmp rdx, qword [fillPtr]    ;Are we at/past the fill point?
   627                              <1>     retnb   ;Return if so!
    69                              <2> cret nb
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000123E 73(C5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   628                              <1> .argGiven:
   629                              <1> ;rdx -> The start of the read in buffer
   630 00001240 488B0D(30000000)    <1>     mov rcx, qword [endOfArena] ;Fill the arena
   631 00001247 4829D1              <1>     sub rcx, rdx        ;Get the number of bytes to read
   632 0000124A 0F8438040000        <1>     jz printMemErr      ;If we @ end of arena, free some space!!
   633 00001250 4989CA              <1>     mov r10, rcx        ;Use r10 to save byte count we want to read in
   634 00001253 0FB71D(3A000000)    <1>     movzx ebx, word [readHdl]
   635 0000125A B8003F0000          <1>     mov eax, 3F00h
   636 0000125F CD21                <1>     int 21h
   637 00001261 39C8                <1>     cmp eax, ecx
   638 00001263 7426                <1>     je .notEof
   639                              <1>     ;Check this is really the eof (by trying to read one more byte)
   640 00001265 50                  <1>     push rax    ;Save the byte count
   641 00001266 4801C2              <1>     add rdx, rax
   642 00001269 B901000000          <1>     mov ecx, 1
   643 0000126E B8003F0000          <1>     mov eax, 3F00h
   644 00001273 CD21                <1>     int 21h
   645 00001275 89C1                <1>     mov ecx, eax
   646 00001277 58                  <1>     pop rax     ;Get original byte count back
   647 00001278 0F8224040000        <1>     jc badReadFail
   648 0000127E 85C9                <1>     test ecx, ecx   ;Did we read bytes?
   649 00001280 7507                <1>     jnz .notEofInc  ;If not, inc byte count!
   650 00001282 C605(05000000)FF    <1>     mov byte [eofReached], -1   ;Else, set the flag!!
   651                              <1> .notEofInc:
   652 00001289 FFC0                <1>     inc eax
   653                              <1> .notEof:
   654 0000128B 4801C2              <1>     add rdx, rax        ;rax has the number of bytes we have read
   655 0000128E 89C1                <1>     mov ecx, eax        ;Save the byte count in ecx
   656 00001290 488B3D(28000000)    <1>     mov rdi, qword [eofPtr] ;Point rdi to the start of the read in region
   657 00001297 4989CB              <1>     mov r11, rcx            ;Save real byte count in r11 temporarily
   658 0000129A E8F7F5FFFF          <1>     call checkEOF
   659 0000129F 7507                <1>     jnz .noSetEof   ;Set the byte here if ZF=ZE on return
   660 000012A1 C605(05000000)FF    <1>     mov byte [eofReached], -1   ;to keep it all on the same level!
   661                              <1> .noSetEof:
   662 000012A8 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]  ;Get the line number to read in to
   663 000012AF 85DB                <1>     test ebx, ebx
   664 000012B1 7521                <1>     jnz .fndLine    ;If we are searching for line 0, go to the end
   665 000012B3 4889F8              <1>     mov rax, rdi
   666 000012B6 4801C8              <1>     add rax, rcx    ;Move the the end of the text we read in
   667 000012B9 483B05(16000000)    <1>     cmp rax, qword [fillPtr]
   668 000012C0 7612                <1>     jbe .fndLine    ;If we are leq than fill point, scan for the lnnum  in bx!
   669                              <1>     ;Else we search for one line past the fillPtr at most
   670 000012C2 4889C1              <1>     mov rcx, rax
   671 000012C5 488B3D(16000000)    <1>     mov rdi, qword [fillPtr]
   672 000012CC 4829F9              <1>     sub rcx, rdi    ;Get the excess of bytes to scan for the line
   673 000012CF BB01000000          <1>     mov ebx, 1      ;Make sure we count only 1 line!
   674                              <1> .fndLine:
   675 000012D4 31D2                <1>     xor edx, edx    ;Set the line counter to start at 0
   676 000012D6 E89FF5FFFF          <1>     call findLineCore   ;Returns al = LF, rdi -> either LF or first char after ecx
   677 000012DB 3847FF              <1>     cmp byte [rdi - 1], al
   678 000012DE 742F                <1>     je .lineOk
   679                              <1> ;Here we ran out of chars to scan through
   680 000012E0 F605(05000000)FF    <1>     test byte [eofReached], -1
   681 000012E7 7510                <1>     jnz .findPrevLine   ;If not at EOF, and ran out of chars, go to prev line
   682                              <1>     ;Else, at EOF and ran out of chars, add a CRLF
   683 000012E9 B80D0A0000          <1>     mov eax, CRLF   ;Store in the empty space pointed to by rdi
   684 000012EE 66AB                <1>     stosw    
   685 000012F0 4981C302000000      <1>     add r11, 2  ;Added two more chars to the count
   686 000012F7 EB16                <1>     jmp short .lineOk
   687                              <1> .findPrevLine:
   688 000012F9 FFCA                <1>     dec edx     ;Remember we have to dec the line number
   689 000012FB 48FFCF              <1>     dec rdi     ;Point to the char previous to start searching at
   690 000012FE 8B0D(06000000)      <1>     mov ecx, dword [arenaSize]  ;Get the size of the allocation to search thru
   691 00001304 FD                  <1>     std
   692 00001305 F2AE                <1>     repne scasb ;Scan for the LF in al
   693 00001307 FC                  <1>     cld
   694 00001308 4881C702000000      <1>     add rdi, 2  ;Go to first char past it
   695                              <1> .lineOk:
   696 0000130F C6071A              <1>     mov byte [rdi], EOF ;Add the terminating EOF char here!
   697 00001312 4C89D9              <1>     mov rcx, r11    ;Get back the real byte count
   698 00001315 48030D(0E000000)    <1>     add rcx, qword [memPtr] ;Get ptr to last byte we actually read in
   699 0000131C 4829F9              <1>     sub rcx, rdi    ;Get the excess number of chars we added since reading in
   700 0000131F 48873D(28000000)    <1>     xchg qword [eofPtr], rdi    ;Swap the old and new EOF char ptrs
   701 00001326 4801CF              <1>     add rdi, rcx    ;Adjust file ptr by amount we read in but ignored
   702 00001329 4885FF              <1>     test rdi, rdi
   703 0000132C 741E                <1>     jz .noIgnore    ;We ignored no bytes read in, proceed
   704                              <1>     ;Else, we are at the previous line, so move file ptr there!
   705 0000132E 53                  <1>     push rbx
   706 0000132F 52                  <1>     push rdx
   707 00001330 4889FA              <1>     mov rdx, rdi
   708 00001333 48B9FFFFFFFFFFFFFF- <1>     mov rcx, -1
   708 0000133C FF                  <1>
   709 0000133D B801420000          <1>     mov eax, 4201h  ;Seek from current position by the amount in dx
   710 00001342 CD21                <1>     int 21h
   711 00001344 5A                  <1>     pop rdx
   712 00001345 5B                  <1>     pop rbx
   713 00001346 0F8256030000        <1>     jc badReadFail
   714                              <1> .noIgnore:
   715 0000134C 39D3                <1>     cmp ebx, edx    ;Is the line number specified = line number we are at?
   716 0000134E 7515                <1>     jne .checkEnd
   717 00001350 C605(05000000)00    <1>     mov byte [eofReached], 0    ;Reset byte if this is the case (adding new lines)
   718                              <1>     return
    13                              <2> %%_ret:
    14 00001357 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   719                              <1> .outEofStr:
   720 00001358 488D15(47000000)    <1>     lea rdx, eofStr
   721 0000135F E8F5010000          <1>     call printString
   722                              <1>     return
    13                              <2> %%_ret:
    14 00001364 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   723                              <1> .checkEnd:
   724 00001365 F605(05000000)FF    <1>     test byte [eofReached], -1
   725 0000136C 75EA                <1>     jnz .outEofStr
   726 0000136E F605(64020000)FF    <1>     test byte [noAppendErr], -1 ;Ignore EOF errors on initial load!
   727                              <1>     retnz 
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001375 75(64)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   728 00001377 E90C030000          <1>     jmp printMemErr
   729                              <1> 
   730                              <1> writeLines:
   731                              <1> ;Writes the current arena to disk. If no 
   732                              <1> ; n specified, EDLIN writes lines until
   733                              <1> ; 1/4 of the arena is free.
   734                              <1> ;--------------------------------------------
   735                              <1> ;Invoked by: [n]W (number of bytes to write)
   736                              <1> ;--------------------------------------------
   737                              <1> ;When invoked, must delete the backup if it not already deleted.
   738 0000137C 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   739 00001383 0F8708030000        <1>     ja printComErr
   740 00001389 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   741 00001390 85DB                <1>     test ebx, ebx
   742 00001392 7529                <1>     jnz .goFindLine
   743                              <1>     ;If 0, means, write everything from 1/4 onwards
   744 00001394 8B0D(0A000000)      <1>     mov ecx, dword [freeCnt]    ;Get the count of 1/4 of the arena
   745 0000139A 488B3D(28000000)    <1>     mov rdi, qword [eofPtr]
   746 000013A1 4829CF              <1>     sub rdi, rcx    ;Move rdi back by a quarter
   747                              <1>     retbe           ;If the result is leq 0, fail (never will happen)
    81                              <2> cret be
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013A4 76(64)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   748 000013A6 483B3D(0E000000)    <1>     cmp rdi, qword [memPtr] ;Are we pointing before the start of the arena
   749                              <1>     retbe           ;Return as we have nothing to write!
    81                              <2> cret be
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013AD 76(64)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   750                              <1>     ;rdi now points back by a quarter
   751 000013AF 31D2                <1>     xor edx, edx    ;Init to "line 0"
   752 000013B1 BB01000000          <1>     mov ebx, 1      ;Find the end of the line we are
   753 000013B6 E8BFF4FFFF          <1>     call findLineCore
   754 000013BB EB07                <1>     jmp short .prepWrite
   755                              <1> .goFindLine:
   756 000013BD FFC3                <1>     inc ebx     ;Find line 1 (user said 0, this means 1 for us!)
   757 000013BF E884F4FFFF          <1>     call findLine
   758                              <1> .prepWrite:
   759 000013C4 E831F5FFFF          <1>     call delBkup    ;Delete the backup, all regs preserved
   760 000013C9 4889F9              <1>     mov rcx, rdi    ;rdi points to up to where to do the write
   761 000013CC 488B15(0E000000)    <1>     mov rdx, qword [memPtr] ;Start writing from here
   762 000013D3 4829D1              <1>     sub rcx, rdx    ;Get the byte offset into the arena
   763 000013D6 0FB71D(3C000000)    <1>     movzx ebx, word [writeHdl]
   764 000013DD B800400000          <1>     mov eax, 4000h
   765 000013E2 CD21                <1>     int 21h
   766 000013E4 0F82CB020000        <1>     jc fullDiskFail
   767 000013EA 39C8                <1>     cmp eax, ecx
   768 000013EC 0F85C3020000        <1>     jne fullDiskFail
   769                              <1>     ;Now pull up the rest of the arena and reset the internal line numbers
   770 000013F2 4889FE              <1>     mov rsi, rdi    ;Source chars from here
   771 000013F5 488B3D(0E000000)    <1>     mov rdi, qword [memPtr]
   772 000013FC 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   773 00001403 66C705(1E000000)01- <1>     mov word [curLineNum], 1    ;Go back to line 1 again
   773 0000140B 00                  <1>
   774 0000140C 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   775 00001413 4829F1              <1>     sub rcx, rsi    ;Get the number of bytes left in the arena to pull up
   776 00001416 FFC1                <1>     inc ecx         ;Copy the EOF marker too
   777 00001418 FC                  <1>     cld 
   778 00001419 F3A4                <1>     rep movsb
   779 0000141B 48FFCF              <1>     dec rdi         ;Go back to EOF
   780 0000141E 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   781                              <1>     return
    13                              <2> %%_ret:
    14 00001425 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   782                              <1> 
   783                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   784                              <1> ; Exit functions
   785                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   786                              <1> 
   787                              <1> endEdit:
   788                              <1> ;Inserts a EOF char at the end of the file if one not already present
   789                              <1> ; renames the original file (if applicable) to have .bak ending and
   790                              <1> ; renames the working file to the name originally specified.
   791                              <1> ;--------------------------------------------
   792                              <1> ;Invoked by: E
   793                              <1> ;--------------------------------------------
   794 00001426 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   795 0000142D 0F855E020000        <1>     jne printComErr
   796 00001433 803D(D9010000)00    <1>     cmp byte [arg1], 0
   797 0000143A 0F8551020000        <1>     jne printComErr
   798 00001440 F605(02000000)FF    <1>     test byte [roFlag], -1  ;If we are readonly, delete $$$ and quit
   799 00001447 0F85EA000000        <1>     jnz quit.roQuit
   800 0000144D C605(64020000)FF    <1>     mov byte [noAppendErr], -1  ;Suppress errors again
   801                              <1> .writeLp:
   802 00001454 BBFFFFFFFF          <1>     mov ebx, -1             ;Write out max lines
   803 00001459 E85FFFFFFF          <1>     call writeLines.goFindLine
   804 0000145E F605(05000000)FF    <1>     test byte [eofReached], -1  ;Are we at EOF yet?
   805 00001465 7517                <1>     jnz .writeDone  ;If yes, we are done writing to disk
   806 00001467 C605(D8010000)01    <1>     mov byte [argCnt], 1    ;Else we keep reading the file
   807 0000146E 66C705(D9010000)FF- <1>     mov word [arg1], -1     ;Now fill the arena with lines
   807 00001476 FF                  <1>
   808 00001477 E891FDFFFF          <1>     call appendLines
   809 0000147C EBD6                <1>     jmp short .writeLp      ;And write them out again
   810                              <1> .writeDone:
   811 0000147E 488B15(28000000)    <1>     mov rdx, qword [eofPtr] ;Now write out the EOF char to the file
   812 00001485 B901000000          <1>     mov ecx, 1
   813 0000148A 0FB71D(3C000000)    <1>     movzx ebx, word [writeHdl]
   814 00001491 B800400000          <1>     mov eax, 4000h
   815 00001496 CD21                <1>     int 21h
   816 00001498 0FB71D(3A000000)    <1>     movzx ebx, word [readHdl]
   817 0000149F B8003E0000          <1>     mov eax, 3E00h  ;Close the reading file!
   818 000014A4 CD21                <1>     int 21h
   819 000014A6 0FB71D(3C000000)    <1>     movzx ebx, word [writeHdl]  ;Get the write handle
   820 000014AD B8003E0000          <1>     mov eax, 3E00h  ;Close the temp file!
   821 000014B2 CD21                <1>     int 21h
   822 000014B4 F605(03000000)FF    <1>     test byte [newFileFlag], -1  ;If this is new file, skip this!
   823 000014BB 7522                <1>     jnz short .skipBkup
   824                              <1>     ;Now set the backup extension
   825 000014BD 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   826 000014C4 B842414B00          <1>     mov eax, "BAK"
   827 000014C9 AB                  <1>     stosd
   828 000014CA 488D15(3E000000)    <1>     lea rdx, pathspec
   829 000014D1 488D3D(BE000000)    <1>     lea rdi, bkupfile
   830 000014D8 B800560000          <1>     mov eax, 5600h
   831 000014DD CD21                <1>     int 21h
   832                              <1> .skipBkup:
   833 000014DF B824242400          <1>     mov eax, "$$$"  ;Always set this as triple dollar as this is saved name!
   834 000014E4 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   835 000014EB AB                  <1>     stosd
   836 000014EC 488D15(BE000000)    <1>     lea rdx, bkupfile
   837 000014F3 488D3D(3E000000)    <1>     lea rdi, pathspec   ;Now name the temp file by the og name!
   838 000014FA B800560000          <1>     mov eax, 5600h
   839 000014FF CD21                <1>     int 21h
   840                              <1>     retToDOS errOk ;Let DOS do cleanup of memory allocations!
    94 00001501 B8004C0000          <2>  mov eax, 04C00h | %1
    95 00001506 CD21                <2>  int 21h
   841                              <1> 
   842                              <1> quit:
   843                              <1> ;Quits EDLIN, not saving work and deleting working file.
   844                              <1> ;--------------------------------------------
   845                              <1> ;Invoked by: Q
   846                              <1> ;--------------------------------------------
   847 00001508 803D(02000000)FF    <1>     cmp byte [roFlag], -1   ;If the flag is clear, dont prompt, just quit.
   848 0000150F 7426                <1>     je short .roQuit
   849 00001511 488D15(47020000)    <1>     lea rdx, exitQuit
   850 00001518 B800090000          <1>     mov eax, 0900h
   851 0000151D CD21                <1>     int 21h
   852 0000151F B8010C0000          <1>     mov eax, 0C01h  ;Flush input buffer and read a single char from stdin
   853 00001524 CD21                <1>     int 21h
   854 00001526 0FB6D8              <1>     movzx ebx, al
   855 00001529 81E3DF000000        <1>     and ebx, 0DFh    ;Convert to upper case
   856 0000152F 81FB59000000        <1>     cmp ebx, "Y"
   857 00001535 752E                <1>     jne printCRLF   ;Print CRLF and return via that return instruction
   858                              <1>     ;Delete the working file
   859                              <1> .roQuit:
   860 00001537 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   861 0000153E B824242400          <1>     mov eax, "$$$"
   862 00001543 AB                  <1>     stosd
   863 00001544 488D15(BE000000)    <1>     lea rdx, wkfile
   864 0000154B B800410000          <1>     mov eax, 4100h  ;Delete the file
   865 00001550 CD21                <1>     int 21h
   866                              <1>     retToDOS errOk
    94 00001552 B8004C0000          <2>  mov eax, 04C00h | %1
    95 00001557 CD21                <2>  int 21h
    37                                  %include "./Source/edprn.asm"
     1                              <1> ;---------------------
     2                              <1> ; Print Routines here
     3                              <1> ;---------------------
     4                              <1> printString:
     5 00001559 B800090000          <1>     mov eax, 0900h
     6 0000155E CD21                <1>     int 21h
     7                              <1>     return
    13                              <2> %%_ret:
    14 00001560 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     8                              <1> ;----------------------------------------
     9                              <1> ; These functions print individual chars
    10                              <1> ;----------------------------------------
    11                              <1> printSpace:
    12 00001561 B020                <1>     mov al, SPC
    13 00001563 EB09                <1>     jmp short printChar
    14                              <1> printCRLF:
    15                              <1> ;Prints CRLF
    16 00001565 B00D                <1>     mov al, CR
    17 00001567 E802000000          <1>     call printChar
    18                              <1> printLF:
    19 0000156C B00A                <1>     mov al, LF
    20                              <1> printChar:
    21                              <1> ;Input: al = Char to print
    22 0000156E 50                  <1>     push rax    ;To preserve the rest of eax
    23 0000156F 52                  <1>     push rdx
    24 00001570 0FB6D0              <1>     movzx edx, al
    25 00001573 B800020000          <1>     mov eax, 0200h
    26 00001578 CD21                <1>     int 21h
    27 0000157A 5A                  <1>     pop rdx
    28 0000157B 58                  <1>     pop rax
    29                              <1>     return
    13                              <2> %%_ret:
    14 0000157C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> ;------------------------------------------------
    32                              <1> ; These functions are specialised print routines
    33                              <1> ;------------------------------------------------
    34                              <1> printLineNum:
    35                              <1> ;Prints the line number in bx
    36                              <1> ;Input: bx = Line number to print
    37 0000157D E8DFFFFFFF          <1>     call printSpace
    38 00001582 E816000000          <1>     call printNum
    39 00001587 B03A                <1>     mov al, ":"
    40 00001589 E8E0FFFFFF          <1>     call printChar
    41 0000158E 663B1D(1E000000)    <1>     cmp bx, word [curLineNum]
    42 00001595 B020                <1>     mov al, SPC
    43 00001597 75D5                <1>     jne printChar
    44 00001599 B02A                <1>     mov al, "*"
    45 0000159B EBD1                <1>     jmp short printChar
    46                              <1> 
    47                              <1> printNum:
    48                              <1> ;Takes in bx a binary word and prints the ASCII value
    49                              <1> ; with leading blanks suppressed.
    50                              <1> ;Trashes eax, ecx and edx only
    51 0000159D 55                  <1>     push rbp
    52 0000159E 31ED                <1>     xor ebp, ebp    ;If not zero, stop suppressing leading zeros
    53 000015A0 0FB7D3              <1>     movzx edx, bx   ;Init with value in edx
    54                              <1> ;Do 10000's
    55 000015A3 B910270000          <1>     mov ecx, 10000
    56 000015A8 E827000000          <1>     call .doCompute
    57                              <1> ;Do 1000's
    58 000015AD B9E8030000          <1>     mov ecx, 1000
    59 000015B2 E81D000000          <1>     call .doCompute
    60                              <1> ;Do 100's
    61 000015B7 B964000000          <1>     mov ecx, 100
    62 000015BC E813000000          <1>     call .doCompute
    63                              <1> ;Do 10's
    64 000015C1 B90A000000          <1>     mov ecx, 10
    65 000015C6 E809000000          <1>     call .doCompute
    66                              <1> ;Do 1's, mild optimisation to avoid div move the remainder directly
    67 000015CB 89D0                <1>     mov eax, edx    ;Remainder in edx
    68 000015CD E808000000          <1>     call .printDig  ;Print the value in eax
    69                              <1> ;Exit
    70 000015D2 5D                  <1>     pop rbp
    71                              <1>     return
    13                              <2> %%_ret:
    14 000015D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> .doCompute:
    73                              <1> ;Input: ecx = Divisor for place value
    74                              <1> ;       edx = Remainder left to divide
    75 000015D4 89D0                <1>     mov eax, edx    ;Moves the prev. remainder into eax for dividing
    76 000015D6 31D2                <1>     xor edx, edx    
    77 000015D8 F7F1                <1>     div ecx         
    78                              <1> .printDig:
    79                              <1> ;Now print the digit in al, the quotient. edx has the remainder
    80 000015DA 85ED                <1>     test ebp, ebp
    81 000015DC 750A                <1>     jnz .pDigOk
    82 000015DE 85C0                <1>     test eax, eax   ;Is ebp = 0 and value to print 0? 
    83 000015E0 0F847BFFFFFF        <1>     jz printSpace   ;If so, print a space char (retz for no suppression)
    84 000015E6 FFCD                <1>     dec ebp         ;Else, now set ebp and print al
    85                              <1> .pDigOk:
    86 000015E8 0430                <1>     add al, "0"     ;Convert into an ASCII value
    87 000015EA EB82                <1>     jmp short printChar   ;Return through printchar
    88                              <1> 
    89                              <1> printLine:
    90                              <1> ;Prints a single line
    91 000015EC BF01000000          <1>     mov edi, 1  ;Print a single line
    92                              <1> printLines:
    93                              <1> ;Prints many lines in EDLIN fashion. All regs trashed.
    94                              <1> ;Input:
    95                              <1> ;   bx = Line number offset to keep track of printing
    96                              <1> ;   rsi -> Ptr to start printing from
    97                              <1> ;   edi = Number of lines to print. Used as a word!
    98                              <1> ;Output:
    99                              <1> ;   bx = Last line number printed
   100 000015F1 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   101 000015F8 4829F1              <1>     sub rcx, rsi
   102                              <1>     retz    ;If we are pointing to the eofPtr, nothing to print, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000015FB 74(D3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   103                              <1>     ;Now ecx = Number of chars to print!
   104                              <1> ;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
   105                              <1> ; Get screen attribs here for controlled printing
   106 000015FD 89FA                <1>     mov edx, edi    ;Save number of lines to print in edx
   107                              <1> ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   108                              <1> .freshLine:
   109 000015FF 51                  <1>     push rcx
   110 00001600 52                  <1>     push rdx
   111 00001601 E877FFFFFF          <1>     call printLineNum   ;Save ecx and edx as these are trashed!
   112 00001606 5A                  <1>     pop rdx
   113 00001607 59                  <1>     pop rcx
   114 00001608 488D3D(6B030000)    <1>     lea rdi, spareLine
   115                              <1> .goLine:
   116                              <1> ;Now we read the line into the spare buffer and echo each char one by one
   117                              <1> ;ecx = Number of chars to print
   118                              <1> ;edx = Number of lines we are printing
   119 0000160F AC                  <1>     lodsb
   120 00001610 55                  <1>     push rbp
   121 00001611 488D2D(69040000)    <1>     lea rbp, spareLine + 254
   122 00001618 4839EF              <1>     cmp rdi, rbp
   123 0000161B 5D                  <1>     pop rbp
   124 0000161C 731B                <1>     jae .goDone
   125 0000161E 3C20                <1>     cmp al, SPC
   126 00001620 7316                <1>     jae .store  ;If a normal char print it
   127                              <1>     ;Pick off LF, CR and TAB as special chars. Everything else is a ctrl char!
   128 00001622 3C0A                <1>     cmp al, LF 
   129 00001624 7412                <1>     je .store
   130 00001626 3C0D                <1>     cmp al, CR
   131 00001628 740E                <1>     je .store
   132 0000162A 3C09                <1>     cmp al, TAB
   133 0000162C 740A                <1>     je .store
   134 0000162E B45E                <1>     mov ah, "^"
   135 00001630 0C40                <1>     or al, 40h  ;Convert to UC
   136 00001632 86C4                <1>     xchg al, ah
   137 00001634 66AB                <1>     stosw   ;Store the pair of chars
   138 00001636 EB01                <1>     jmp short .goDone
   139                              <1> .store:
   140 00001638 AA                  <1>     stosb
   141                              <1> .goDone:
   142 00001639 3C0A                <1>     cmp al, LF  ;If not a line feed yet, keep going
   143 0000163B 7404                <1>     je .lfFnd   ;Else, we are done!
   144 0000163D FFC9                <1>     dec ecx     ;One less char to deal with
   145 0000163F 75CE                <1>     jnz .goLine
   146                              <1> .lfFnd:
   147 00001641 FFC9                <1>     dec ecx     ;Drop the final char on the line too!
   148 00001643 807FFF0A            <1>     cmp byte [rdi - 1], LF  ;Was the last char a LF?
   149 00001647 740C                <1>     je .okLine
   150 00001649 807FFF0D            <1>     cmp byte [rdi - 1], CR  ;Was the last char a CR?
   151 0000164D 7403                <1>     je .putLF
   152 0000164F B00D                <1>     mov al, CR
   153 00001651 AA                  <1>     stosb
   154                              <1> .putLF:
   155 00001652 B00A                <1>     mov al, LF
   156 00001654 AA                  <1>     stosb
   157                              <1> .okLine:
   158 00001655 C60700              <1>     mov byte [rdi], 0   ;Null terminate the line for printing
   159 00001658 E80C000000          <1>     call prnAsciiz  ;Print the chars in the buffer
   160 0000165D 67E308              <1>     jecxz .exit     ;If we have no more chars to print, exit!
   161 00001660 FFC3                <1>     inc ebx         ;Goto next line number
   162 00001662 FFCA                <1>     dec edx         ;One less line to print!
   163 00001664 7599                <1>     jnz .freshLine  ;If this is non-zero, keep going!
   164 00001666 FFCB                <1>     dec ebx         ;We done the last line
   165                              <1> .exit:
   166                              <1>     return
    13                              <2> %%_ret:
    14 00001668 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   167                              <1> 
   168                              <1> prnAsciiz:
   169 00001669 56                  <1>     push rsi
   170 0000166A 488D35(6B030000)    <1>     lea rsi, spareLine  ;Now print the line we just made!
   171                              <1> .pcLp:
   172 00001671 AC                  <1>     lodsb
   173 00001672 84C0                <1>     test al, al
   174 00001674 7407                <1>     jz .pcExit
   175 00001676 E8F3FEFFFF          <1>     call printChar  ;Preserves dx
   176 0000167B EBF4                <1>     jmp short .pcLp
   177                              <1> .pcExit:
   178 0000167D 5E                  <1>     pop rsi
   179                              <1>     return
    13                              <2> %%_ret:
    14 0000167E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./Source/ederr.asm"
     1                              <1> ;---------------------
     2                              <1> ; Error Routines here
     3                              <1> ;---------------------
     4                              <1> printLineNotFoundErr:
     5 0000167F 488D15(88020000)    <1>     lea rdx, badSearch
     6 00001686 EB10                <1>     jmp short printErr
     7                              <1> printMemErr:
     8 00001688 488D15(7B010000)    <1>     lea rdx, badMemFull
     9 0000168F EB07                <1>     jmp short printErr
    10                              <1> printComErr:
    11                              <1> ;JUMP to this procedure and it jumps back to
    12                              <1> ; the command loop resetting the stack!
    13 00001691 488D15(58010000)    <1>     lea rdx, badInput
    14                              <1> printErr:
    15 00001698 E8BCFEFFFF          <1>     call printString
    16 0000169D E962EDFFFF          <1>     jmp getCommand
    17                              <1> 
    18                              <1> ;The below "Fail" units are a class of Edlin terminating functions
    19                              <1> badReadFail:
    20 000016A2 488D15(21020000)    <1>     lea rdx, badRead
    21 000016A9 E8ABFEFFFF          <1>     call printString
    22                              <1>     retToDOS errBadRead
    94 000016AE B8034C0000          <2>  mov eax, 04C00h | %1
    95 000016B3 CD21                <2>  int 21h
    23                              <1> 
    24                              <1> fullDiskFail:
    25 000016B5 488D15(01020000)    <1>     lea rdx, badDskFull ;Write disk full error, but return to prompt
    26 000016BC E898FEFFFF          <1>     call printString
    27                              <1>     retToDOS errDskFull
    94 000016C1 B8024C0000          <2>  mov eax, 04C00h | %1
    95 000016C6 CD21                <2>  int 21h
    28                              <1> 
    39                                  Segment .data align=1 follows=.text 
    40                                  %include "./Data/eddata.asm"
     1                              <1> ;Initialised data goes here :)
     2                              <1> 
     3                              <1> ;The following three tables are connected. Don't jiggle!
     4                              <1> cmdLetterTable:
     5 00000000 0D3B41434445494C50- <1>     db CR,";ACDEILPMQRSTW"
     5 00000009 4D5152535457        <1>
     6                              <1>     cmdLetterTableL equ $ - cmdLetterTable
     7                              <1> cmdFcnTable:
     8 0000000F (280A)              <1>     dw editLine - cmdFcnTable
     9 00000011 (280A)              <1>     dw editLine - cmdFcnTable
    10 00000013 (FE11)              <1>     dw appendLines - cmdFcnTable
    11 00000015 (570D)              <1>     dw copyLines - cmdFcnTable
    12 00000017 (8F0B)              <1>     dw deleteLines - cmdFcnTable
    13 00000019 (1714)              <1>     dw endEdit - cmdFcnTable
    14 0000001B (C10A)              <1>     dw insertLine - cmdFcnTable
    15 0000001D (2D11)              <1>     dw listLines - cmdFcnTable
    16 0000001F (7E11)              <1>     dw pageLines - cmdFcnTable
    17 00000021 (3E0D)              <1>     dw moveLines - cmdFcnTable
    18 00000023 (F914)              <1>     dw quit - cmdFcnTable
    19 00000025 (0410)              <1>     dw replaceText - cmdFcnTable
    20 00000027 (5F0F)              <1>     dw searchText - cmdFcnTable
    21 00000029 (1E0C)              <1>     dw transferLines - cmdFcnTable
    22 0000002B (6D13)              <1>     dw writeLines - cmdFcnTable
    23                              <1> cmdRoTable:
    24                              <1> ;Byte set if we can do this command in RO mode
    25 0000002D 00                  <1>     db 0    ;Insert
    26 0000002E 00                  <1>     db 0    ;Insert
    27 0000002F FF                  <1>     db -1   ;Append
    28 00000030 00                  <1>     db 0    ;Copy
    29 00000031 00                  <1>     db 0    ;Delete
    30 00000032 00                  <1>     db 0    ;End (save changes)
    31 00000033 00                  <1>     db 0    ;Insert
    32 00000034 FF                  <1>     db -1   ;List
    33 00000035 FF                  <1>     db -1   ;Page
    34 00000036 00                  <1>     db 0    ;Move
    35 00000037 FF                  <1>     db -1   ;Quit (no save)
    36 00000038 00                  <1>     db 0    ;Replace
    37 00000039 FF                  <1>     db -1   ;Search
    38 0000003A 00                  <1>     db 0    ;Transfer 
    39 0000003B FF                  <1>     db -1   ;Write
    41                                  %include "./Data/edmsg.asm"
     1                              <1> ;Edlin Strings are in this file
     2 0000003C 4E65772066696C650D- <1> newStr  db "New file",CR,LF,"$"
     2 00000045 0A24                <1>
     3 00000047 456E64206F6620696E- <1> eofStr  db "End of input file",CR,LF,"$"    ;When EOF occurs
     3 00000050 7075742066696C650D- <1>
     3 00000059 0A24                <1>
     4 0000005B 496E76616C69642044- <1> badVerStr   db "Invalid DOS Version",CR,LF,"$"
     4 00000064 4F532056657273696F- <1>
     4 0000006D 6E0D0A24            <1>
     5 00000071 496E76616C69642044- <1> badDrvStr   db "Invalid Drive or filename",CR,LF,"$"
     5 0000007A 72697665206F722066- <1>
     5 00000083 696C656E616D650D0A- <1>
     5 0000008C 24                  <1>
     6 0000008D 46696C65206E6F7420- <1> badFindStr  db "File not found",CR,LF,"$"
     6 00000096 666F756E640D0A24    <1>
     7 0000009E 46696C65206E616D65- <1> badNameStr  db "File name must be specified",CR,LF,"$"
     7 000000A7 206D75737420626520- <1>
     7 000000B0 737065636966696564- <1>
     7 000000B9 0D0A24              <1>
     8 000000BC 43616E6E6F74206372- <1> badCreatStr db "Cannot create specified file",CR,LF,"$"
     8 000000C5 656174652073706563- <1>
     8 000000CE 69666965642066696C- <1>
     8 000000D7 650D0A24            <1>
     9 000000DB 43616E6E6F74206F70- <1> badOpenStr  db "Cannot open specified file",CR,LF,"$"
     9 000000E4 656E20737065636966- <1>
     9 000000ED 6965642066696C650D- <1>
     9 000000F6 0A24                <1>
    10 000000F8 43616E6E6F74207061- <1> badFileStr  db "Cannot parse sepcified filespec",CR,LF,"$"
    10 00000101 727365207365706369- <1>
    10 0000010A 666965642066696C65- <1>
    10 00000113 737065630D0A24      <1>
    11 0000011A 416363657373206465- <1> badBackDel  db "Access denied - Backup file not deleted",CR,LF,"$"
    11 00000123 6E696564202D204261- <1>
    11 0000012C 636B75702066696C65- <1>
    11 00000135 206E6F742064656C65- <1>
    11 0000013E 7465640D0A24        <1>
    12 00000144 496E76616C69642050- <1> badParm     db "Invalid Parameter",CR,LF,"$"
    12 0000014D 6172616D657465720D- <1>
    12 00000156 0A24                <1>
    13 00000158 456E74727920657272- <1> badInput    db "Entry error",CR,LF,"$"
    13 00000161 6F720D0A24          <1>
    14 00000166 5265616C6C6F636174- <1> badRealloc  db "Reallocation error",CR,LF,"$"
    14 0000016F 696F6E206572726F72- <1>
    14 00000178 0D0A24              <1>
    15 0000017B 0D0A496E7375666669- <1> badMemFull  db CR,LF,"Insufficient memory",CR,LF,"$"
    15 00000184 6369656E74206D656D- <1>
    15 0000018D 6F72790D0A24        <1>
    16 00000193 4E6F7420656E6F7567- <1> badMergeStr db "Not enough room to merge the entire file",CR,LF,"$"
    16 0000019C 6820726F6F6D20746F- <1>
    16 000001A5 206D65726765207468- <1>
    16 000001AE 6520656E7469726520- <1>
    16 000001B7 66696C650D0A24      <1>
    17 000001BE 43616E6E6F74206564- <1> badFileExt  db "Cannot edit .BAK file--rename file",CR,LF,"$"
    17 000001C7 6974202E42414B2066- <1>
    17 000001D0 696C652D2D72656E61- <1>
    17 000001D9 6D652066696C650D0A- <1>
    17 000001E2 24                  <1>
    18 000001E3 496E76616C6964206F- <1> badROcmd    db "Invalid operation: R/O file",CR,LF,"$"
    18 000001EC 7065726174696F6E3A- <1>
    18 000001F5 20522F4F2066696C65- <1>
    18 000001FE 0D0A24              <1>
    19 00000201 4469736B2066756C6C- <1> badDskFull  db "Disk full-- write not completed$"
    19 0000020A 2D2D20777269746520- <1>
    19 00000213 6E6F7420636F6D706C- <1>
    19 0000021C 6574656424          <1>
    20 00000221 426164207265616420- <1> badRead     db "Bad read of input file. Aborting...",CR,LF,"$"
    20 0000022A 6F6620696E70757420- <1>
    20 00000233 66696C652E2041626F- <1>
    20 0000023C 7274696E672E2E2E0D- <1>
    20 00000245 0A24                <1>
    21 00000247 41626F727420656469- <1> exitQuit    db "Abort edit (Y/N)? $"
    21 00000250 742028592F4E293F20- <1>
    21 00000259 24                  <1>
    22 0000025A 4F2E4B2E3F2024      <1> okString    db "O.K.? $"
    23 00000261 4D7573742073706563- <1> badDestStr  db "Must specify destination line number",CR,LF,"$"
    23 0000026A 696679206465737469- <1>
    23 00000273 6E6174696F6E206C69- <1>
    23 0000027C 6E65206E756D626572- <1>
    23 00000285 0D0A24              <1>
    24 00000288 4E6F7420666F756E64- <1> badSearch   db "Not found",CR,LF,"$"
    24 00000291 0D0A24              <1>
    25 00000294 4C696E6520746F6F20- <1> badLineLen  db "Line too long",CR,LF,"$"
    25 0000029D 6C6F6E670D0A24      <1>
    42                                  Segment .bss align=1 follows=.data nobits
    43                                  bssStart:
    44                                  %include "./Data/edbss.asm"
     1                              <1> ;WE SET ALL VARS TO 0 ON STARTUP!
     2                              <1> 
     3 00000000 ??                  <1> pathSep     db ?    ;Default \, Alternative /
     4 00000001 ??                  <1> switchChar  db ?    ;Default /, Alternative -
     5 00000002 ??                  <1> roFlag      db ?    ;Flag is set if file is read-only. Cannot edit the file.
     6 00000003 ??                  <1> newFileFlag db ?    ;Flag indicating the file being made is new (when set, above flag meaningless)
     7 00000004 ??                  <1> noEofChar   db ?    ;Flag is set if we are not to check for ^Z chars found in the file
     8 00000005 ??                  <1> eofReached  db ?    ;When we reach EOF for file on disk, set to -1, else 0
     9                              <1> 
    10                              <1> ;Memory Related variables
    11 00000006 ????????            <1> arenaSize   dd ?    ;Size of the arena in bytes 
    12 0000000A ????????            <1> freeCnt     dd ?    ;Count of 1/4 of the arena in bytes (for write)
    13 0000000E ????????????????    <1> memPtr      dq ?    ;Ptr to the memory arena given by DOS
    14 00000016 ????????????????    <1> fillPtr     dq ?    ;Ptr to 3/4 of the arena in bytes (for append)
    15                              <1> 
    16                              <1> ;Editor state vars!
    17 0000001E ????                <1> curLineNum  dw ?    ;Word value for the current line number (1 based)
    18 00000020 ????????????????    <1> curLinePtr  dq ?    ;Pointer to the current line
    19 00000028 ????????????????    <1> eofPtr      dq ?    ;Pointer to the EOF char in the buffer
    20 00000030 ????????????????    <1> endOfArena  dq ?    ;Ptr to the last available byte in the arena
    21                              <1> 
    22 00000038 ??                  <1> modFlag     db ?    ;Flag set to indicate the file was modified
    23                              <1> ;Backup is only deleted on exit or write, to make space for temp file.
    24 00000039 ??                  <1> bkupDel     db ?    ;Flag to indicate that the backup was deleted
    25                              <1> 
    26                              <1> ;Don't jiggle these symbols, need dword to be together for -1
    27 0000003A ????                <1> readHdl     dw ?    ;Contain the file handle for the open file
    28 0000003C ????                <1> writeHdl    dw ?    ;Handle to the temporary file
    29                              <1> 
    30 0000003E <res 80h>           <1> pathspec    db 128 dup (?)  ;Space for the 128 byte buffer for full filename
    31                              <1> wkfile:                     ;Ptr to below path for "working" file
    32 000000BE <res 80h>           <1> bkupfile    db 128 dup (?)  ;Pathspec for backup file 
    33                              <1> 
    34                              <1> tmpNamePtr:         ;Ptr to the filename in the commandtail
    35 0000013E ????????????????    <1> fileNamePtr dq ?    ;Ptr to the name portion of filespec
    36                              <1> tmpNamePtr2:        ;Ptr to the end of the command in the commandtail
    37 00000146 ????????????????    <1> fileExtPtr  dq ?    ;Ptr to the extension of the file we are editing
    38                              <1> ;The above pointers point past the dot or pathseperator
    39                              <1> ;Both file*ptr's point to elements on WKFILE not pathspec
    40                              <1> 
    41                              <1> ;Command line variables
    42 0000014E <res 82h>           <1> cmdLine     db halfLine_size dup (?)
    43                              <1> ;Arguments for parsing
    44 000001D0 ????????????????    <1> charPtr     dq ?    ;Ptr to char for continuing processing
    45 000001D8 ??                  <1> argCnt      db ?    ;Count of arguments in parsed command line
    46                              <1> ;Arguments are converted to signed words where appropriate
    47                              <1> ; and parsed into here in the order they are encountered in.
    48                              <1> ;
    49                              <1> ;Any arguments which mean 0 wrt line numbers means current line
    50                              <1> argTbl:
    51 000001D9 ????                <1> arg1        dw ?
    52 000001DB ????                <1> arg2        dw ?
    53 000001DD ????                <1> arg3        dw ?
    54 000001DF ????                <1> arg4        dw ?
    55 000001E1 ??                  <1> qmarkSet    db ?    ;Set if question mark encountered
    56 000001E2 <res 82h>           <1> argString   db halfLine_size dup (?)    ;Used by search and replace only
    57                              <1> 
    58 00000264 ??                  <1> noAppendErr db ?    ;Special init var, prevents append errors for initial load
    59                              <1> 
    60                              <1> ;The workline gets preloaded with the original line before editing
    61 00000265 <res 102h>          <1> workLine    db 258 dup (?)  ;Line in which all editing takes place
    62 00000367 ????????            <1> workLen     dd ?            ;Line length before edit
    63 0000036B <res 102h>          <1> spareLine   db 258 dup (?)  ;Spare editing line
    64                              <1> ;Transfer Vars
    65 0000046D <res 80h>           <1> xfrName     db 128 dup (?)  ;Transfer name buffer
    66 000004ED ????                <1> xfrHdl      dw ?
    67                              <1> ;Block vars
    68 000004EF ??                  <1> movCpFlg    db ?    ;Set if move, clear if copy
    69 000004F0 ????????????????    <1> blkPtrSrc   dq ?    ;Ptr to the line which starts the copy
    70 000004F8 ????????????????    <1> blkPtrEnd   dq ?    ;Ptr to the line after the range we will copy
    71 00000500 ????????????????    <1> cpyPtrDest  dq ?    ;Ptr to the line we will be copying to
    72 00000508 ????????            <1> blkSize     dd ?    ;This is the size of the unit to move (cpySize)
    73 0000050C ????????            <1> copySize    dd ?    ;This is the number of bytes we will copy (cpyLen)
    74                              <1> ;Search/Replace vars
    75 00000510 ??                  <1> srchMode    db ?    ;Set = Find from current line + 1, clear = line 1
    76                              <1> ;Find common vars
    77 00000511 ??                  <1> findMod     db ?    ;Set = Search, Clear = Replace
    78 00000512 ??                  <1> keepOld     db ?    ;Set = Keep old data. Clear = Clear old data (search/rep)
    79 00000513 ????                <1> fndLenOld   dw ?    ;Length of find string 
    80 00000515 ????                <1> fndLenNew   dw ?    ;New string length! 
    81 00000517 ????????????????    <1> fndStrPtr   dq ?    ;[DOS LSTFND] Ptr to the start of the last found string
    82 0000051F ????????????????    <1> fndLinePtr  dq ?    ;[DOS NUMPOS] Ptr to the start of the last found line
    83 00000527 ????                <1> fndLineNum  dw ?    ;[DOS LSTNUM] Line number of the last found line
    84 00000529 ????????            <1> fndSrchLen  dd ?    ;Number of bytes we are searching through!
    85 0000052D <res 81h>           <1> fndString1  db 81h dup (?)  ;1 for string length prefix + 128 for the string
    86 000005AE <res 81h>           <1> fndString2  db 81h dup (?)
    45                                  bssLen equ ($ - bssStart)
    46                                  Segment .stack align=16 follows=.bss nobits
    47                                  ;Use a 200 QWORD stack
    48 00000000 <res 640h>                  dq 200 dup (?)
    49                                  stackTop:
    50                                  endOfProgram:   ;Deallocate from here
    50          ------------------       info: assembly required 1+5+2 passes

