     1                                  [map all ./Listings/edlin.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;EDLIN, an absolute last resort file editor.
     5                                  ;
     6                                  ;                       !!DONT FORGET!!
     7                                  ;       Each line is terminated first with 0Dh then 0Ah (CR,LF)
     8                                  ;                       !!DONT FORGET!!
     9                                  ;
    10                                  ;The logic of this EDLIN will be based on my BASIC interpreter editor.
    11                                  ;Except, users won't need to specify their own line numbers each time.
    12                                  
    13                                  ;Edlin will always produce a backup file and refuses to open files 
    14                                  ; with .BAK extension (backup files)
    15                                  
    16                                  ;Edlin will erase the previous backup if one exists, ensuring there
    17                                  ; is enough free space for a new copy of the backup.
    18                                  ;It then creates a new file with the specified name and a $$$ extension.
    19                                  
    20                                  ;Edlin has two modes of operation: Command and Edit
    21                                  
    22                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
    23                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    24                                  %include "./Include/edStruc.inc"
     1                              <1> lineLength  equ 128
     2                              <1> maxAlloc    equ 65536*lineLength ;8Mb in size
     3                              <1> 
     4                              <1> struc cmdArgs   ;Ptr returned in rdx after 41h/6101h has this structure
     5 00000000 <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
     6 00000010 <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
     7                              <1>     .dta:   ;Pointer to the default DTA in the 
     8 00000024 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
     9 00000025 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
    10                              <1> endstruc
    11                              <1> 
    12                              <1> ;MISC ASCII control chars
    13                              <1> NUL equ 00h ;^@         | ASCII Null
    14                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
    15                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
    16                              <1> BEL equ 07h ;^G         | ASCII Bell
    17                              <1> BSP equ 08h ;^H         | ASCII Backspace
    18                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
    19                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
    20                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
    21                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
    22                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
    23                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
    24                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
    25                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
    26                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
    27                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
    28                              <1> SPC equ 20h ;Printable  | ASCII Space
    29                              <1> ;This last one is NEVER printed with a caret as it is a console control char
    30                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
    31                              <1> 
    32                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
    33                              <1> ;Extended Ascii Codes
    34                              <1> eF1     equ 3Bh ;F1 second byte
    35                              <1> eF2     equ 3Ch ;F2 second byte
    36                              <1> eF3     equ 3Dh ;F3 second byte
    37                              <1> eF4     equ 3Eh ;F4 second byte
    38                              <1> eF5     equ 3Fh ;F5 second byte
    39                              <1> eF6     equ 40h ;F6 second byte
    40                              <1> eF7     equ 41h ;F7 second byte
    41                              <1> eCursL  equ 4Bh ;Cursor Left second byte
    42                              <1> eCursR  equ 4Dh ;Cursor Right second byte
    43                              <1> eIns    equ 52h ;Insert second byte
    44                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
    25                                  Segment .text align=1 
    26                                  %include "./Source/edmain.asm"
     1                              <1> ;Main EDLIN file
     2                              <1> start:
     3 00000000 EB01                <1>     jmp short .cVersion
     4 00000002 01                  <1> .vNum:          db 1    ;Main version number, patchable
     5                              <1> .cVersion:
     6 00000003 0FB6D8              <1>     movzx ebx, al   ;Save drive number validity in bl
     7 00000006 FC                  <1>     cld
     8 00000007 B800300000          <1>     mov eax, 3000h  ;Get version number
     9 0000000C CD41                <1>     int 41h
    10 0000000E 3A05EEFFFFFF        <1>     cmp al, byte [.vNum]
    11 00000014 761A                <1>     jbe short okVersion
    12 00000016 488D15(52000000)    <1>     lea rdx, badVerStr
    13                              <1> badExitMsg:
    14 0000001D 4885D2              <1>     test rdx, rdx   ;Check if null ptr => Dont print on exit
    15 00000020 7407                <1>     jz short .noPrint
    16 00000022 B800090000          <1>     mov eax, 0900h
    17 00000027 CD41                <1>     int 41h
    18                              <1> .noPrint:
    19 00000029 B8FF4C0000          <1>     mov eax, 4CFFh
    20 0000002E CD41                <1>     int 41h
    21                              <1> okVersion:
    22                              <1> ;No command line arguments except for optional filename
    23 00000030 B801610000          <1>     mov eax, 6101h  ;Get parsed FCB and cmdtail for filename in rdx
    24 00000035 CD41                <1>     int 41h
    25                              <1> ;Now parse the command line, to get full command spec for filename.
    26 00000037 488D7A25            <1>     lea rdi, qword [rdx + cmdArgs.progTail] ;Get ptr to tail
    27 0000003B 0FB64A24            <1>     movzx ecx, byte [rdx + cmdArgs.parmList]    ;Get number of chars in cmdline
    28 0000003F 488D15(82000000)    <1>     lea rdx, badNameStr ;Prep for error message
    29 00000046 B020                <1>     mov al, SPC ;Now we search for a space. No leading spaces on cmdine
    30 00000048 F2AE                <1>     repne scasb
    31 0000004A 85C9                <1>     test ecx, ecx   ;If no chars left (even on equality with SPC) fail
    32 0000004C 74CF                <1>     jz short badExitMsg
    33 0000004E F3AE                <1>     repe scasb  ;Now skip the spaces
    34 00000050 85C9                <1>     test ecx, ecx   ;If we run out of chars, fail as no filename
    35 00000052 74C9                <1>     jz short badExitMsg
    36 00000054 48FFCF              <1>     dec rdi ;Point rdi to the start of the filename as given
    37 00000057 48893D(00000000)    <1>     mov qword [fileNamePtr], rdi    ;Save the ptr to the filename
    38 0000005E 48FFC7              <1>     inc rdi ;Go back where it was
    39                              <1> .findEndLoop:
    40 00000061 AC                  <1>     lodsb
    41 00000062 3C20                <1>     cmp al, SPC
    42 00000064 7408                <1>     je short .endFound
    43 00000066 3C0D                <1>     cmp al, CR
    44 00000068 7404                <1>     je short .endFound
    45 0000006A FFC9                <1>     dec ecx
    46 0000006C 74AF                <1>     jz short badExitMsg
    47                              <1> .endFound:
    48 0000006E 48FFCF              <1>     dec rdi
    49 00000071 31C0                <1>     xor eax, eax
    50 00000073 8807                <1>     mov byte [rdi], al  ;Store terminating NULL
    51                              <1> ;Now go backwards a max of 3 chars to get a ptr to the 
    52                              <1> ; extension of the filename if one exists. If not, create an empty extension.
    53                              <1> 
    54 00000075 488B3D(00000000)    <1>     mov rdi, qword [fileNamePtr]
    55 0000007C 668B07              <1>     mov ax, word [rdi]  ;Get the first two chars of file name
    56 0000007F 80FC3A              <1>     cmp ah, ":"
    57 00000082 750C                <1>     jne short .noDriveSpecified
    58                              <1>     ;Check if drive specified is OK, bl has signature
    59 00000084 488D15(68000000)    <1>     lea rdx, badDrvStr
    60 0000008B 80FBFF              <1>     cmp bl, -1
    61 0000008E 748D                <1>     je badExitMsg
    62                              <1> .noDriveSpecified:
    63                              <1> ;Paths can only be a max of 67 chars but the DTA buffer is 127 bytes
    64                              <1> ; so if no extension is provided or too short an extension is provided,
    65                              <1> ; simply add space for the extension.
    66                              <1> ;-----------------------It is nice to dream big-----------------------
    67                              <1> ;Now we proceed with opening the file/creating if it is new.
    68                              <1> 
    69                              <1> ;If the file is new, create with $$$ extension. Goto End.
    70                              <1> ;Else, check if there is a backup by replacing the extension with .BAK.
    71                              <1> ;If so, delete the backup.
    72                              <1> ;Rename the current file to have a .BAK extension.
    73                              <1> ;Open the Backup.
    74                              <1> ;Now change the filename to have a $$$ extension.
    75                              <1> ;Open the new version.
    76                              <1> ;Copy the whole backup into the buffer.
    77                              <1> ;Close the backup.
    78                              <1> ;End:
    79                              <1> ;Process file. On exit, close the handle.
    80                              <1> ;Rename file to have the original (potentially empty) extension.
    81                              <1> ;Return to DOS
    82                              <1> ;-----------------------It is nice to dream big-----------------------
    83                              <1> ; Now we proceed with creating the file if it is new or opening if not
    84                              <1> 
    85 00000090 4889FA              <1>     mov rdx, rdi    ;Get the file name pointer
    86 00000093 B8023D0000          <1>     mov eax, 3D02h  ;Open in R/W mode
    87 00000098 CD41                <1>     int 41h
    88 0000009A 7327                <1>     jnc short .fileOpen
    89 0000009C 3C02                <1>     cmp al, errFnf
    90 0000009E 740C                <1>     je short .createFile
    91 000000A0 488D15(BF000000)    <1>     lea rdx, badOpenStr
    92 000000A7 E971FFFFFF          <1>     jmp badExitMsg
    93                              <1> .createFile:
    94 000000AC B8003C0000          <1>     mov eax, 3C00h  ;Create file
    95 000000B1 31C9                <1>     xor ecx, ecx    ;Regular attributes 
    96 000000B3 CD41                <1>     int 41h
    97 000000B5 730C                <1>     jnc short .fileOpen
    98 000000B7 488D15(A0000000)    <1>     lea rdx, badCreatStr
    99 000000BE E95AFFFFFF          <1>     jmp badExitMsg
   100                              <1> .fileOpen:
   101 000000C3 668905(10000000)    <1>     mov word [fileHdl], ax  ;Save the handle
   102                              <1> 
   103                              <1> 
   104                              <1> exitOk:
   105 000000CA B903000000          <1>     mov ecx, 3  ;Try three times to free if we can't for some reason
   106                              <1> .freeAgain:
   107 000000CF 4C8B05(1F000000)    <1>     mov r8, qword [memPtr]
   108 000000D6 B800490000          <1>     mov eax, 4900h
   109 000000DB CD41                <1>     int 41h
   110 000000DD 7312                <1>     jnc short .freeOk
   111 000000DF FFC9                <1>     dec ecx
   112 000000E1 740E                <1>     jz short .freeOk
   113 000000E3 51                  <1>     push rcx
   114 000000E4 B9FFFFFF00          <1>     mov ecx, 0FFFFFFh
   115 000000E9 E828000000          <1>     call .pauseSpin
   116 000000EE 59                  <1>     pop rcx
   117 000000EF EBDE                <1>     jmp short .freeAgain
   118                              <1> .freeOk:
   119 000000F1 0FB71D(10000000)    <1>     movzx ebx, word [fileHdl]
   120                              <1> .hdlAgain:
   121 000000F8 B8003E0000          <1>     mov eax, 3E00h
   122 000000FD CD41                <1>     int 41h
   123 000000FF 730E                <1>     jnc short .hdlOk
   124 00000101 51                  <1>     push rcx
   125 00000102 B9FFFFFF00          <1>     mov ecx, 0FFFFFFh
   126 00000107 E80A000000          <1>     call .pauseSpin
   127 0000010C 59                  <1>     pop rcx
   128 0000010D EBE9                <1>     jmp short .hdlAgain
   129                              <1> .hdlOk:
   130 0000010F B8004C0000          <1>     mov eax, 4C00h
   131 00000114 CD41                <1>     int 41h
   132                              <1> 
   133                              <1> .pauseSpin:
   134                              <1> ;Called with ecx loaded with the counter to pause for.
   135                              <1> ;Totally non-deterministic so please dont load too large a value.
   136                              <1> ;Recommended: mov ecx, 0FFFFFFh
   137 00000116 F390                <1>     pause
   138 00000118 FFC9                <1>     dec ecx
   139 0000011A 75FA                <1>     jnz short .pauseSpin
   140                              <1>     return
    13                              <2> %%_ret:
    14 0000011C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
    27                                  %include "./Source/edutils.asm"
     1                              <1> ;Utility functions for edlin go here
    28                                  Segment .data align=1 follows=.text 
    29                                  %include "./Data/eddata.asm"
     1                              <1> ;This version can only deal with 65536 line of maximum 128 length each.
     2                              <1> ;This amounts to files of roughly 8Mb in size which is large enough for now.
     3                              <1> ;It suffices to work with the DOS kernel!
     4                              <1> 
     5 00000000 0000000000000000    <1> fileNamePtr dq 0    ;Ptr to the name of the file we are editing
     6 00000008 0000000000000000    <1> fileExtPtr  dq 0    ;Ptr to the extension of the file we are editing
     7 00000010 0000                <1> fileHdl     dw 0    
     8 00000012 202020              <1> bkupExt     db 3 dup (SPC)    ;3 chars to save a given extension if one given
     9                              <1> 
    10 00000015 0000                <1> currentLine dw 0    ;Ctr for the current line we are on. 65536 Lines possible
    11 00000017 0000000000000000    <1> linePtr     dq 0    ;Ptr to the current line start
    12                              <1> 
    13                              <1> ;Use a single buffer. For now, if less than 8Mb available, just don't load
    14 0000001F 0000000000000000    <1> memPtr      dq 0    ;Ptr to the memory arena given by DOS
    15 00000027 0000000000000000    <1> bufferPtr   dq 0    ;Ptr to the buffer for the current line
    16 0000002F 00000000            <1> bufferSize  dd 0    ;Mustnt exceed 1024*1024*8 bytes (8Mbytes)
    30                                  %include "./Data/edmsg.asm"
     1                              <1> ;Edlin Strings are in this file 
     2 00000033 4E65772066696C65    <1> newStr  db "New file"   ;This string is terminated by the next line
     3 0000003B 0D0A24              <1> crlf    db CR,LF,"$"
     4 0000003E 456E64206F6620696E- <1> eofStr  db "End of input file",CR,LF,"$"    ;When EOF occurs
     4 00000047 7075742066696C650D- <1>
     4 00000050 0A24                <1>
     5 00000052 496E76616C69642044- <1> badVerStr   db "Invalid DOS Version",CR,LF,"$"
     5 0000005B 4F532056657273696F- <1>
     5 00000064 6E0D0A24            <1>
     6 00000068 496E76616C69642044- <1> badDrvStr   db "Invalid Drive Specified",CR,LF,"$"
     6 00000071 726976652053706563- <1>
     6 0000007A 69666965640D0A24    <1>
     7 00000082 46696C65206E616D65- <1> badNameStr  db "File name must be specified",CR,LF,"$"
     7 0000008B 206D75737420626520- <1>
     7 00000094 737065636966696564- <1>
     7 0000009D 0D0A24              <1>
     8 000000A0 43616E6E6F74206372- <1> badCreatStr db "Cannot create specified file",CR,LF,"$"
     8 000000A9 656174652073706563- <1>
     8 000000B2 69666965642066696C- <1>
     8 000000BB 650D0A24            <1>
     9 000000BF 43616E6E6F74206F70- <1> badOpenStr  db "Cannot open specified file",CR,LF,"$"
     9 000000C8 656E20737065636966- <1>
     9 000000D1 6965642066696C650D- <1>
     9 000000DA 0A24                <1>
    10                              <1> 
    11 000000DC 456E74727920657272- <1> badInput    db "Entry error",CR,LF,"$"
    11 000000E5 6F720D0A24          <1>
    31                                  Segment .stack align=8 follows=.data nobits
    32                                  ;Use a 200 QWORD stack
    33 00000000 <res 640h>                  dq 200 dup (?)
    34                                  stackTop:
    35                                  endOfProgram:   ;Deallocate from here
    35          ------------------       info: assembly required 1+2+2 passes

