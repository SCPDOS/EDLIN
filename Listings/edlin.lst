     1                                  [map all ./Listings/edlin.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;EDLIN, an absolute last resort file editor.
     5                                  ;
     6                                  ;                       !!DONT FORGET!!
     7                                  ;       Each line is terminated first with 0Dh then 0Ah (CR,LF)
     8                                  ;                       !!DONT FORGET!!
     9                                  ;
    10                                  
    11                                  ;Edlin will always produce a backup file and refuses to open files 
    12                                  ; with .BAK extension (backup files)
    13                                  
    14                                  ;Edlin will erase the previous backup if one exists, ensuring there
    15                                  ; is enough free space for a new copy of the backup.
    16                                  ;It then creates a new file with the filename with a $$$ extension.
    17                                  ;All edits occur in memory and are flushed to it. We then rename it
    18                                  ; to the desired filename.
    19                                  ;BAK files cannot be opened.
    20                                  ;
    21                                  ;Empty lines are default just a CR,LF pair
    22                                  
    23                                  ;Edlin has two modes of operation: Command and Edit
    24                                  
    25                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
    26                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    27                                  %include "./Include/edStruc.inc"
     1                              <1> ;edlin structures
     2                              <1> lineLen     equ 253
     3                              <1> halflineLen equ 128
     4                              <1> maxLine     equ 65529
     5                              <1> maxAlloc    equ maxLine*lineLen 
     6                              <1> maxParas    equ (maxAlloc >> 4) + 1
     7                              <1> fileRO      equ 1   ;Mask for Read Only
     8                              <1> 
     9                              <1> ;MISC ASCII control chars
    10                              <1> NUL equ 00h ;^@         | ASCII Null
    11                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
    12                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
    13                              <1> BEL equ 07h ;^G         | ASCII Bell
    14                              <1> BSP equ 08h ;^H         | ASCII Backspace
    15                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
    16                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
    17                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
    18                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
    19                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
    20                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
    21                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
    22                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
    23                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
    24                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
    25                              <1> SPC equ 20h ;Printable  | ASCII Space
    26                              <1> ;This last one is NEVER printed with a caret as it is a console control char
    27                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
    28                              <1> 
    29                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
    30                              <1> ;Extended Ascii Codes
    31                              <1> eF1     equ 3Bh ;F1 second byte
    32                              <1> eF2     equ 3Ch ;F2 second byte
    33                              <1> eF3     equ 3Dh ;F3 second byte
    34                              <1> eF4     equ 3Eh ;F4 second byte
    35                              <1> eF5     equ 3Fh ;F5 second byte
    36                              <1> eF6     equ 40h ;F6 second byte
    37                              <1> eF7     equ 41h ;F7 second byte
    38                              <1> eCursL  equ 4Bh ;Cursor Left second byte
    39                              <1> eCursR  equ 4Dh ;Cursor Right second byte
    40                              <1> eIns    equ 52h ;Insert second byte
    41                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
    42                              <1> 
    43                              <1> ;Bona-Fida Structures
    44                              <1> 
    45                              <1> struc cmdArgs   ;Ptr returned in rdx after 41h/6101h has this structure
    46 00000000 <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
    47 00000010 <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
    48                              <1>     .dta:   ;Pointer to the default DTA in the 
    49 00000024 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
    50 00000025 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
    51                              <1> endstruc
    52                              <1> 
    53                              <1> struc line
    54 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (255)
    55 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    56 00000002 <res FDh>           <1>     .pString    db lineLen dup (?)      ;Actual string itself
    57                              <1> endstruc
    58                              <1> 
    59                              <1> struc halfLine
    60 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (130)
    61 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    62 00000002 <res 80h>           <1>     .pString    db halflineLen dup (?)   ;Actual string itself
    63                              <1> endstruc
    28                                  Segment .text align=1 
    29                                  %include "./Source/edmain.asm"
     1                              <1> ;Main EDLIN file
     2                              <1> start:
     3 00000000 EB01                <1>     jmp short .cVersion
     4 00000002 01                  <1> .vNum:          db 1    ;Main version number, patchable
     5                              <1> .cVersion:
     6 00000003 0FB6D8              <1>     movzx ebx, al   ;Save drive number validity in bl
     7 00000006 FC                  <1>     cld
     8 00000007 B800300000          <1>     mov eax, 3000h  ;Get version number
     9 0000000C CD41                <1>     int 41h
    10 0000000E 3A05EEFFFFFF        <1>     cmp al, byte [.vNum]
    11 00000014 761A                <1>     jbe short okVersion
    12 00000016 488D15(3E000000)    <1>     lea rdx, badVerStr
    13                              <1> badExitMsg:
    14 0000001D 4885D2              <1>     test rdx, rdx   ;Check if null ptr => Dont print on exit
    15 00000020 7407                <1>     jz short .noPrint
    16 00000022 B800090000          <1>     mov eax, 0900h
    17 00000027 CD41                <1>     int 41h
    18                              <1> .noPrint:
    19 00000029 B8FF4C0000          <1>     mov eax, 4CFFh
    20 0000002E CD41                <1>     int 41h
    21                              <1> okVersion:
    22                              <1> ;One command line argument except for mandatory filename, /B=(binary read)
    23 00000030 B800370000          <1>     mov eax, 3700h
    24 00000035 CD41                <1>     int 41h 
    25 00000037 88D7                <1>     mov bh, dl  ;Preserve switch char in bh
    26                              <1> 
    27 00000039 B801610000          <1>     mov eax, 6101h  ;Get parsed FCB and cmdtail for filename in rdx
    28 0000003E CD41                <1>     int 41h
    29                              <1> ;Now parse the command line, to get full command spec for filename.
    30 00000040 488D7A25            <1>     lea rdi, qword [rdx + cmdArgs.progTail] ;Get ptr to tail
    31 00000044 0FB64A24            <1>     movzx ecx, byte [rdx + cmdArgs.parmList]    ;Get number of chars in cmdline
    32 00000048 488D15(6E000000)    <1>     lea rdx, badNameStr ;Prep for error message
    33 0000004F B020                <1>     mov al, SPC ;Now we search for a space. No leading spaces on cmdine
    34 00000051 F2AE                <1>     repne scasb
    35 00000053 85C9                <1>     test ecx, ecx   ;If no chars left (even on equality with SPC) fail
    36 00000055 74C6                <1>     jz short badExitMsg
    37 00000057 F3AE                <1>     repe scasb  ;Now skip the spaces
    38 00000059 85C9                <1>     test ecx, ecx   ;If we run out of chars, fail as no filename
    39 0000005B 74C0                <1>     jz short badExitMsg
    40 0000005D 48FFCF              <1>     dec rdi ;Point rdi to the start of the filename as given
    41 00000060 48893D(00000000)    <1>     mov qword [tmpNamePtr], rdi    ;Save the ptr to the filename
    42 00000067 48FFC7              <1>     inc rdi ;Go back where it was
    43 0000006A 4889FE              <1>     mov rsi, rdi
    44                              <1> .findEndLoop:
    45 0000006D AC                  <1>     lodsb
    46 0000006E 3C20                <1>     cmp al, SPC
    47 00000070 740A                <1>     je short .endFoundSpc
    48 00000072 3C0D                <1>     cmp al, CR
    49 00000074 7422                <1>     je short .endFound
    50 00000076 FFC9                <1>     dec ecx
    51 00000078 74A3                <1>     jz short badExitMsg
    52 0000007A EBF1                <1>     jmp short .findEndLoop  ;Keep looking for the end of the string
    53                              <1> .endFoundSpc:
    54                              <1> ;If a space found now search for a switch, continue decrementing ecx 
    55 0000007C 4889F7              <1>     mov rdi, rsi    ;Points at first char past CR/SPC terminator
    56 0000007F 88F8                <1>     mov al, bh  ;Get the switch char back
    57 00000081 F2AE                <1>     repne scasb   ;Search for switchChar, modify rdi
    58 00000083 7513                <1>     jne short .endFound ;If we come out here and no switchchar found, exit check
    59 00000085 803F42              <1>     cmp byte [rdi], "B" ;Was the char after the switchChar a B (binary mode)?
    60 00000088 488D15(EA000000)    <1>     lea rdx, badParm
    61 0000008F 758C                <1>     jne badExitMsg  ;If not, exit
    62 00000091 C605(01000000)FF    <1>     mov byte [noEOFCheck], -1   ;Else, set the flag
    63                              <1> .endFound:
    64 00000098 48FFCE              <1>     dec rsi ;Move rsi back to the terminating char
    65 0000009B 31C0                <1>     xor eax, eax
    66 0000009D 8806                <1>     mov byte [rsi], al  ;Store terminating NULL
    67                              <1> ;Now check if the drive is specified that it is valid
    68 0000009F 488B35(00000000)    <1>     mov rsi, qword [tmpNamePtr]
    69 000000A6 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars of file name
    70 000000A9 80FC3A              <1>     cmp ah, ":"
    71 000000AC 7510                <1>     jne short .noDriveSpecified
    72                              <1>     ;Check if drive specified is OK, bl has signature
    73 000000AE 488D15(54000000)    <1>     lea rdx, badDrvStr
    74 000000B5 80FBFF              <1>     cmp bl, -1
    75 000000B8 0F845FFFFFFF        <1>     je badExitMsg
    76                              <1> .noDriveSpecified:
    77                              <1> ;Now we canonicalise the filename since now it is ASCIIZ
    78 000000BE 488D3D(24000000)    <1>     lea rdi, pathspec
    79 000000C5 B800600000          <1>     mov eax, 6000h  ;Truename the path in rsi to rdi 
    80 000000CA CD41                <1>     int 41h
    81                              <1>     ;Now get a pointer to the file name and file extension
    82 000000CC B944000000          <1>     mov ecx, 68
    83 000000D1 31C0                <1>     xor eax, eax    ;Find the null terminator
    84 000000D3 F2AE                <1>     repne scasb
    85 000000D5 67E368              <1>     jecxz .badPathError
    86 000000D8 B05C                <1>     mov al, "\"     ;Find the first pathsep backwards
    87 000000DA B90E000000          <1>     mov ecx, 14
    88 000000DF FD                  <1>     std 
    89 000000E0 F2AE                <1>     repne scasb
    90 000000E2 FC                  <1>     cld
    91 000000E3 67E35A              <1>     jecxz .badPathError
    92 000000E6 4881C702000000      <1>     add rdi, 2 ;Point to the first char in the filename
    93 000000ED 48893D(00000000)    <1>     mov qword [fileNamePtr], rdi
    94 000000F4 4889FE              <1>     mov rsi, rdi
    95                              <1>     ; Now find the extension (or add one if no extension)
    96                              <1> .extSearch:
    97                              <1> ;Keep searching for . or NUL in filename portion of path
    98 000000F7 AC                  <1>     lodsb
    99 000000F8 3C2E                <1>     cmp al, "."
   100 000000FA 741C                <1>     je short .extFnd
   101 000000FC 84C0                <1>     test al, al
   102 000000FE 75F7                <1>     jnz short .extSearch
   103                              <1> ;No extension found, add one made of spaces
   104 00000100 48FFCE              <1>     dec rsi ;Point rdi back at the null char
   105 00000103 488935(08000000)    <1>     mov qword [fileExtPtr], rsi
   106 0000010A 4889F7              <1>     mov rdi, rsi
   107 0000010D B82E202020          <1>     mov eax, ".   "    ;dot and three spaces (obviously)
   108 00000112 AB                  <1>     stosd
   109 00000113 31C0                <1>     xor eax, eax
   110 00000115 AA                  <1>     stosb
   111 00000116 EB34                <1>     jmp short .pathComplete
   112                              <1> .extFnd:
   113                              <1> ;rsi points to the first char of the extension (not the dot)
   114 00000118 48FFCE              <1>     dec rsi
   115 0000011B 488935(08000000)    <1>     mov qword [fileExtPtr], rsi
   116 00000122 48FFC6              <1>     inc rsi ;Go back to the first char past the dot
   117 00000125 4889F7              <1>     mov rdi, rsi
   118 00000128 B903000000          <1>     mov ecx, 3  ;Three chars in the extension
   119 0000012D 31C0                <1>     xor eax, eax
   120 0000012F F2AE                <1>     repne scasb   ;Look for the terminating null
   121 00000131 67E318              <1>     jecxz .pathComplete ;Already a three char extension
   122 00000134 48FFCF              <1>     dec rdi ;Go back to terminating null and overwrite it
   123 00000137 B020                <1>     mov al, " "
   124 00000139 F3AA                <1>     rep stosb   ;Store the number of remaining spaces
   125 0000013B 31C0                <1>     xor eax, eax
   126 0000013D AA                  <1>     stosb
   127 0000013E EB0C                <1>     jmp short .pathComplete
   128                              <1> .badPathError:
   129 00000140 488D15(C8000000)    <1>     lea rdx, badFileStr
   130 00000147 E9D1FEFFFF          <1>     jmp badExitMsg
   131                              <1> .pathComplete:
   132                              <1> ;Paths can only be a max of 67 chars but the DTA buffer is 127 bytes
   133                              <1> ; so if no extension is provided or too short an extension is provided,
   134                              <1> ; simply add space for the extension.
   135                              <1> ;-----------------------It is nice to dream big-----------------------
   136                              <1> ;Now we proceed with opening the file/creating if it is new.
   137                              <1> ;
   138                              <1> ;1) Create a temp file.
   139                              <1> ;2) If the file is new, goto End.
   140                              <1> ;3) Else, check if there is a backup by replacing the extension with .BAK.
   141                              <1> ;4) If so, delete the backup. Fail to edit if backup is Read Only
   142                              <1> ;5) Rename the current file to have a .BAK extension.
   143                              <1> ;6) Open the Backup and preprocess. Once done, close backup.
   144                              <1> ;End:
   145                              <1> ;7) Process file, exit when ready. 
   146                              <1> ;8) Flush data from temp file and memory to new file
   147                              <1> ;8) Rename file to have the original (potentially empty) extension.
   148                              <1> ;9) Return to DOS
   149                              <1> ;-----------------------It is nice to dream big-----------------------
   150                              <1> ; Now we proceed with creating the file if it is new or opening if not
   151                              <1> 
   152 0000014C 4889FA              <1>     mov rdx, rdi    ;Get the file name pointer
   153 0000014F B8023D0000          <1>     mov eax, 3D02h  ;Open in R/W mode
   154 00000154 CD41                <1>     int 41h
   155 00000156 7327                <1>     jnc short .fileOpen
   156 00000158 3C02                <1>     cmp al, errFnf
   157 0000015A 740C                <1>     je short .createFile
   158 0000015C 488D15(AB000000)    <1>     lea rdx, badOpenStr
   159 00000163 E9B5FEFFFF          <1>     jmp badExitMsg
   160                              <1> .createFile:
   161 00000168 B8003C0000          <1>     mov eax, 3C00h  ;Create file
   162 0000016D 31C9                <1>     xor ecx, ecx    ;Regular attributes 
   163 0000016F CD41                <1>     int 41h
   164 00000171 730C                <1>     jnc short .fileOpen
   165 00000173 488D15(8C000000)    <1>     lea rdx, badCreatStr
   166 0000017A E99EFEFFFF          <1>     jmp badExitMsg
   167                              <1> .fileOpen:
   168 0000017F 668905(10000000)    <1>     mov word [fileHdl], ax  ;Save the handle for access whenever
   169                              <1> 
   170                              <1> ;Now get the attribs of the file (rdi points to the filename)
   171 00000186 B800430000          <1>     mov eax, 4300h  ;CHMOD get attribs
   172 0000018B CD41                <1>     int 41h
   173 0000018D 80E101              <1>     and cl, fileRO   ;Save only the RO bit
   174 00000190 7407                <1>     jz short .notRO
   175 00000192 C605(00000000)FF    <1>     mov byte [roFlag], -1   ;Set Read Only bit on
   176                              <1> .notRO:
   177                              <1>     
   178                              <1> 
   179                              <1> exitOk:
   180                              <1> ;Let DOS take care of freeing all resources
   181 00000199 B8004C0000          <1>     mov eax, 4C00h
   182 0000019E CD41                <1>     int 41h
   183                              <1> 
   184                              <1> 
    30                                  %include "./Source/edutils.asm"
     1                              <1> ;Utility functions for edlin go here
     2                              <1> 
     3                              <1> strlen:
     4                              <1> ;String length based on terminator in al
     5                              <1> ;Input: rsi -> Source Ptr
     6                              <1> ;       al = Terminating char to search for
     7                              <1> ;Output: ecx = Number of chars i nstring including terminator
     8 000001A0 31C9                <1>     xor ecx, ecx
     9 000001A2 FFC9                <1>     dec ecx
    10 000001A4 57                  <1>     push rdi
    11 000001A5 4889F7              <1>     mov rdi, rsi
    12 000001A8 F2AE                <1>     repne scasb
    13 000001AA 5F                  <1>     pop rdi
    14 000001AB F7D9                <1>     neg ecx ;Take 2's compliment to get number of chars including terminator
    15                              <1>     return
    13                              <2> %%_ret:
    14 000001AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    16                              <1> 
    17                              <1> strcpy:
    18                              <1> ;Copies a string from one buffer to another
    19                              <1> ;Input: rsi -> Source Ptr
    20                              <1> ;       rdi -> Destination Ptr
    21 000001AE 56                  <1>     push rsi 
    22 000001AF 57                  <1>     push rdi
    23 000001B0 51                  <1>     push rcx
    24 000001B1 B9FD000000          <1>     mov ecx, lineLen    ;Max number of chars in a string
    25                              <1> .lp:
    26 000001B6 E830000000          <1>     call isCharEOL
    27 000001BB 7405                <1>     je short .exit
    28 000001BD A4                  <1>     movsb   ;Move the char over, inc both pointers
    29 000001BE FFC9                <1>     dec ecx
    30 000001C0 75F4                <1>     jnz short .lp
    31                              <1> .exit:
    32 000001C2 59                  <1>     pop rcx
    33 000001C3 5F                  <1>     pop rdi
    34 000001C4 5E                  <1>     pop rsi
    35                              <1>     return
    13                              <2> %%_ret:
    14 000001C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                              <1> 
    37                              <1> memmove:
    38                              <1> ;Copies a number of bytes over from one buffer to another 
    39                              <1> ;Input: rsi -> Source Ptr
    40                              <1> ;       rdi -> Destination Ptr
    41                              <1> ;       ecx = Count of chars to copy
    42 000001C6 56                  <1>     push rsi
    43 000001C7 57                  <1>     push rdi
    44 000001C8 51                  <1>     push rcx
    45 000001C9 F3A4                <1>     rep movsb
    46 000001CB 59                  <1>     pop rcx
    47 000001CC 5F                  <1>     pop rdi
    48 000001CD 5E                  <1>     pop rsi
    49                              <1>     return
    13                              <2> %%_ret:
    14 000001CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    50                              <1> 
    51                              <1> memset:
    52                              <1> ;Initialises a buffer to contain a particular value
    53                              <1> ;Input: rdi -> Buffer to set to given value
    54                              <1> ;       al = Value to set the buffer to
    55                              <1> ;       rcx = Number of bytes in buffer
    56 000001CF 51                  <1>     push rcx
    57 000001D0 57                  <1>     push rdi
    58 000001D1 F3AA                <1>     rep stosb
    59 000001D3 5F                  <1>     pop rdi
    60 000001D4 59                  <1>     pop rcx
    61                              <1>     return
    13                              <2> %%_ret:
    14 000001D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> findLineEnd:
    64                              <1> ;Returns in rsi a pointer to the end of the line
    65                              <1> ;Input: rsi -> Start of the line find the end of
    66                              <1> ;Output: rsi -> Last char in the string (NOTE: LAST CHAR NOT PAST)
    67                              <1> ;Trashes: rcx
    68 000001D6 B9FD000000          <1>     mov ecx, lineLen
    69                              <1> .lp:
    70 000001DB E80B000000          <1>     call isCharEOL  ;If ZF=ZE, then rsi points to EOL
    71                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000001E0 74(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    72 000001E2 FFC9                <1>     dec ecx
    73                              <1>     retz    ;If ecx is now 0, means rsi points to the end of line (NO EOL CHAR)
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000001E4 74(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    74 000001E6 48FFC6              <1>     inc rsi
    75 000001E9 EBF0                <1>     jmp short .lp
    76                              <1> 
    77                              <1> isCharEOL:
    78                              <1> ;Input: rsi -> Char/Word to analyse
    79                              <1> ;Output: ZF=ZE if char/word at rsi LF or CR,LF.
    80                              <1> ;        ZF=NZ if not 
    81 000001EB 803E0A              <1>     cmp byte [rsi], LF
    82                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000001EE 74(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    83 000001F0 803E0D              <1>     cmp byte [rsi], CR
    84                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000001F3 75(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    85 000001F5 807E010A            <1>     cmp byte [rsi + 1], LF
    86                              <1>     return
    13                              <2> %%_ret:
    14 000001F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                                  Segment .data align=1 follows=.text 
    32                                  %include "./Data/eddata.asm"
     1                              <1> ;Treat line numbers as dwords even though they are words
     2                              <1> 
     3 00000000 00                  <1> roFlag      db 0    ;Flag is set if file is read-only. Cannot edit the file.
     4 00000001 00                  <1> noEOFCheck  db 0    ;Flag is set if we are to ignore ^Z chars found in the file
     5                              <1> 
     6                              <1> ;File editor state information
     7 00000002 00                  <1> eofReached  db 0    ;When we reach EOF for file, set to -1
     8                              <1> 
     9 00000003 0000000000000000    <1> memPtr      dq 0    ;Ptr to the memory arena given by DOS
    10 0000000B 00000000            <1> arenaSize   dd 0    ;Size of the arena
    11 0000000F 00000000            <1> memInUse    dd 0    ;Number of bytes in use
    12                              <1> ;If arenaSize = memInUse, refuse any "extensionary" instructions.
    13                              <1> ; Allow searching, editing, flushing, editing up to equal 
    14                              <1> ; number of chars in line.
    15                              <1> 
    16 00000013 0000000000000000    <1> linePtr     dq 0    ;Ptr to the current source line in memory
    17 0000001B 00000000            <1> lastLine    dd 0    ;Last line number currently in memory
    33                                  %include "./Data/edmsg.asm"
     1                              <1> ;Edlin Strings are in this file 
     2 0000001F 4E65772066696C65    <1> newStr  db "New file"   ;This string is terminated by the next line
     3 00000027 0D0A24              <1> crlf    db CR,LF,"$"
     4 0000002A 456E64206F6620696E- <1> eofStr  db "End of input file",CR,LF,"$"    ;When EOF occurs
     4 00000033 7075742066696C650D- <1>
     4 0000003C 0A24                <1>
     5 0000003E 496E76616C69642044- <1> badVerStr   db "Invalid DOS Version",CR,LF,"$"
     5 00000047 4F532056657273696F- <1>
     5 00000050 6E0D0A24            <1>
     6 00000054 496E76616C69642044- <1> badDrvStr   db "Invalid Drive Specified",CR,LF,"$"
     6 0000005D 726976652053706563- <1>
     6 00000066 69666965640D0A24    <1>
     7 0000006E 46696C65206E616D65- <1> badNameStr  db "File name must be specified",CR,LF,"$"
     7 00000077 206D75737420626520- <1>
     7 00000080 737065636966696564- <1>
     7 00000089 0D0A24              <1>
     8 0000008C 43616E6E6F74206372- <1> badCreatStr db "Cannot create specified file",CR,LF,"$"
     8 00000095 656174652073706563- <1>
     8 0000009E 69666965642066696C- <1>
     8 000000A7 650D0A24            <1>
     9 000000AB 43616E6E6F74206F70- <1> badOpenStr  db "Cannot open specified file",CR,LF,"$"
     9 000000B4 656E20737065636966- <1>
     9 000000BD 6965642066696C650D- <1>
     9 000000C6 0A24                <1>
    10 000000C8 43616E6E6F74207061- <1> badFileStr  db "Cannot parse sepcified filespec",CR,LF,"$"
    10 000000D1 727365207365706369- <1>
    10 000000DA 666965642066696C65- <1>
    10 000000E3 737065630D0A24      <1>
    11 000000EA 496E76616C69642050- <1> badParm     db "Invalid Parameter",CR,LF,"$"
    11 000000F3 6172616D657465720D- <1>
    11 000000FC 0A24                <1>
    12 000000FE 456E74727920657272- <1> badInput    db "Entry error",CR,LF,"$"
    12 00000107 6F720D0A24          <1>
    34                                  Segment .stack align=8 follows=.data nobits
    35                                  %include "./Data/edbss.asm"
     1                              <1> ;All variables that dont need initialisation go here
     2                              <1> tmpNamePtr:
     3 00000000 ????????????????    <1> fileNamePtr dq ?    ;Ptr to the name portion of filespec
     4 00000008 ????????????????    <1> fileExtPtr  dq ?    ;Ptr to the extension of the file we are editing
     5 00000010 ????                <1> fileHdl     dw ?    ;Contain the file handle for the open file
     6 00000012 ????                <1> bkupHdl     dw ?    ;Handle to the backup file
     7                              <1> 
     8 00000014 <res 10h>           <1> tmpName     db 16 dup (?)   ;Space for the ASCIIZ path for tmp name.
     9                              <1> ;                              names of the form ".\12345678.ext",0
    10 00000024 <res 80h>           <1> pathspec    db 128 dup (?)  ;Space for the 128 byte buffer for full filename
    11 000000A4 <res 80h>           <1> pathspec2   db 128 dup (?)  ;Second pathspec space
    12 00000124 ????????            <1> bkupExt     db 4 dup (?)    ;A backup for a .EXT to be used (dot included!!!)
    13                              <1> 
    14                              <1> ;Command line variables
    15 00000128 <res 82h>           <1> cmdLine     db halfLine_size dup (?)
    16 000001AA ??                  <1> args        db ?    ;Count of arguments in parsed command line
    17 000001AB ??                  <1> cmdChar     db ?
    18                              <1> ;Arguments are converted to signed words where appropriate
    19                              <1> ; and parsed into here in the order they are encountered in.
    20                              <1> ;
    21 000001AC ????                <1> arg1        dw ?
    22 000001AE ????                <1> arg2        dw ?
    23 000001B0 ????                <1> arg3        dw ?
    24 000001B2 ????                <1> arg4        dw ?
    25 000001B4 <res 82h>           <1> argString   db halfLine_size dup (?)    ;Used by search and replace only
    26 00000236 ??                  <1> argPastEnd  db ?    ;0 -> normal, -1 -> Offset from end of mem (indicated by #)
    27                              <1> 
    28                              <1> ;The editLine gets preloaded with the original line before editing
    29                              <1> ;editLine has type "line"
    30 00000237 <res 100h>          <1> editLine    db 256 dup (?)  ;Line in which all editing takes place
    36                                  ;Use a 200 QWORD stack
    37 00000337 <res 640h>                  dq 200 dup (?)
    38                                  stackTop:
    39                                  endOfProgram:   ;Deallocate from here
    39          ------------------       info: assembly required 1+2+2 passes

