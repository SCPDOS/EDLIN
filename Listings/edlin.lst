     1                                  [map all ./Listings/edlin.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;EDLIN, an absolute last resort file editor.
     5                                  ;
     6                                  ;                       !!DONT FORGET!!
     7                                  ;       Each line is terminated first with 0Dh then 0Ah (CR,LF)
     8                                  ;                       !!DONT FORGET!!
     9                                  ;
    10                                  
    11                                  ;Edlin will always produce a backup file and refuses to open files 
    12                                  ; with .BAK extension (backup files)
    13                                  
    14                                  ;Edlin will always terminate a file with a single EOF character
    15                                  
    16                                  ;Edlin will erase the previous backup if one exists, ensuring there
    17                                  ; is enough free space for a new copy of the backup.
    18                                  ;It then creates a new file with the filename with a $$$ extension.
    19                                  ;All edits occur in memory and are flushed to it. We then rename it
    20                                  ; to the desired filename.
    21                                  ;BAK files cannot be opened.
    22                                  ;
    23                                  ;Empty lines are default just a CR,LF pair
    24                                  
    25                                  ;Edlin has two modes of operation: Command and Edit
    26                                  
    27                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro retbe 0
    81                              <1> cret be
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retae 0
    85                              <1> cret ae
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> ;A macro for returning to dos
    93                              <1> %macro retToDOS 1
    94                              <1>     mov eax, 04C00h | %1
    95                              <1>     int 21h
    96                              <1> %endmacro
    28                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    29                                  %include "./Include/edError.inc"
     1                              <1> ;Edlin specific errors
     2                              <1> 
     3                              <1> errOk       equ 0
     4                              <1> errBadRen   equ 1   ;Couldn't rename files.
     5                              <1> errDskFull  equ 2   ;Disk full.
     6                              <1> errBadRead  equ 3   ;Couldn't move file pointer or read file in append
     7                              <1> errBadBak   equ 4   ;Couldn't delete backup file
    30                                  %include "./Include/edStruc.inc"
     1                              <1> ;edlin structures
     2                              <1> lineLen     equ 253
     3                              <1> halflineLen equ 128
     4                              <1> maxLine     equ 65529
     5                              <1> maxAlloc    equ maxLine*lineLen
     6                              <1> maxParas    equ (maxAlloc >> 4) + 1
     7                              <1> 
     8                              <1> prompt      equ "*"
     9                              <1> 
    10                              <1> ;Bona-Fida Structures
    11                              <1> 
    12                              <1> struc line
    13 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (255)
    14 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    15 00000002 <res FDh>           <1>     .pString    db lineLen dup (?)      ;Actual string itself
    16                              <1> endstruc
    17                              <1> 
    18                              <1> struc halfLine
    19 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (130)
    20 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    21 00000002 <res 80h>           <1>     .pString    db halflineLen dup (?)   ;Actual string itself
    22                              <1> endstruc
    23                              <1> 
    24                              <1> struc filename
    25                              <1> ;8.3 File name struct
    26 00000000 ????????????????    <1>     .fName  resb 8
    27 00000008 ??????              <1>     .fExt   resb 3
    28                              <1> endstruc
    31                                  %include "./Include/dosStruc.inc"
     1                              <1> ;Structures and equates coming from DOS
     2                              <1> 
     3                              <1> ;MISC ASCII control chars
     4                              <1> NUL equ 00h ;^@         | ASCII Null
     5                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text)
     6                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
     7                              <1> BEL equ 07h ;^G         | ASCII Bell
     8                              <1> BSP equ 08h ;^H         | ASCII Backspace
     9                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
    10                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
    11                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
    12                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
    13                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
    14                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
    15                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
    16                              <1> CMD equ 16h ;^V         | EDLIN COMMAND CHAR
    17                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
    18                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
    19                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
    20                              <1> SPC equ 20h ;Printable  | ASCII Space
    21                              <1> ;This last one is NEVER printed with a caret as it is a console control char
    22                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
    23                              <1> 
    24                              <1> CRLF equ 0A0Dh
    25                              <1> 
    26                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
    27                              <1> asciiMask   equ asciiCaret - 1  ;Turn into a bitmask
    28                              <1> 
    29                              <1> ;Extended Ascii Codes
    30                              <1> eF1     equ 3Bh ;F1 second byte
    31                              <1> eF2     equ 3Ch ;F2 second byte
    32                              <1> eF3     equ 3Dh ;F3 second byte
    33                              <1> eF4     equ 3Eh ;F4 second byte
    34                              <1> eF5     equ 3Fh ;F5 second byte
    35                              <1> eF6     equ 40h ;F6 second byte
    36                              <1> eF7     equ 41h ;F7 second byte
    37                              <1> eCursL  equ 4Bh ;Cursor Left second byte
    38                              <1> eCursR  equ 4Dh ;Cursor Right second byte
    39                              <1> eIns    equ 52h ;Insert second byte
    40                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
    41                              <1> 
    42                              <1> ;Directory attribute equates
    43                              <1>     dirReadOnly     equ 01h
    44                              <1>     dirHidden       equ 02h
    45                              <1>     dirSystem       equ 04h
    46                              <1>     dirVolumeID     equ 08h
    47                              <1>     dirDirectory    equ 10h
    48                              <1>     dirArchive      equ 20h
    49                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    50                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    51                              <1>     ;If any of the three bits are set, then ALL three bits are set
    52                              <1>     ; in addition to whatever the user passed to search for.
    53                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    54                              <1>     dirIncFiles     equ dirHidden | dirSystem
    55                              <1> 
    56                              <1> struc cmdArgs   ;Ptr returned in rdx after 41h/6101h has this structure
    57 00000000 <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1
    58 00000010 <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
    59                              <1>     .dta:   ;Pointer to the default DTA in the
    60 00000024 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
    61 00000025 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
    62                              <1> endstruc
    63                              <1> 
    64                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
    65 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
    66 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
    67 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
    68 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
    69 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
    70 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
    71 00000016 ????                <1>     .fileTime   resw 1  ;File time
    72 00000018 ????                <1>     .fileDate   resw 1  ;File date
    73 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
    74 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;Open Mode equates
    78                              <1> ;Access modes   Bits[2:0]
    79                              <1> ReadAccess      equ 0h
    80                              <1> WriteAccess     equ 1h
    81                              <1> RWAccess        equ 2h
    82                              <1> ;Bit 3 reserved 0
    83                              <1> ;Sharing modes  Bits[6:4]
    84                              <1> CompatShare     equ 0h
    85                              <1> denyRWShare     equ 10h
    86                              <1> denyWriteShare  equ 20h
    87                              <1> denyReadShare   equ 30h
    88                              <1> denyNoneShare   equ 40h
    89                              <1> netFCBShare     equ 70h
    90                              <1> noInherit       equ 80h
    32                                  Segment .text align=1 
    33                                  progHeadPtr:      ;DO NOT TOUCH THIS POINTER. ALL TABLES ARE REL THIS PTR.
    34                                  %include "./Source/edmain.asm"
     1                              <1> ;Contains the program loader
     2                              <1> start:
     3 00000000 EB01                <1>     jmp short .cVersion
     4 00000002 01                  <1> .vNum:          db 1    ;Main version number, patchable
     5                              <1> .cVersion:
     6 00000003 FC                  <1>     cld
     7 00000004 B800300000          <1>     mov eax, 3000h  ;Get version number
     8 00000009 CD21                <1>     int 21h
     9 0000000B 3A05F1FFFFFF        <1>     cmp al, byte [.vNum]
    10 00000011 760C                <1>     jbe short okVersion
    11 00000013 488D15(5B000000)    <1>     lea rdx, badVerStr
    12 0000001A E996040000          <1>     jmp badExitMsg
    13                              <1> okVersion:
    14                              <1> ;Initialise the BSS to 0
    15 0000001F 488D3D(00000000)    <1>     lea rdi, section..bss.start
    16 00000026 48B9EF040000000000- <1>     mov rcx, bssLen
    16 0000002F 00                  <1>
    17 00000030 31C0                <1>     xor eax, eax
    18 00000032 F3AA                <1>     rep stosb
    19                              <1> ;Now move the stack pointer to its new position and reallocate!
    20 00000034 488D25(40060000)    <1>     lea rsp, stackTop
    21 0000003B 488D1D(40060000)    <1>     lea rbx, endOfProgram   ;Guaranteed paragraph alignment
    22 00000042 4C29C3              <1>     sub rbx, r8 ;Get number of bytes in block
    23 00000045 48C1EB04            <1>     shr rbx, 4  ;Convert to paragraphs
    24 00000049 48FFC3              <1>     inc rbx     ;Add one more paragraph for good measure
    25 0000004C B8004A0000          <1>     mov eax, 4A00h
    26 00000051 CD21                <1>     int 21h
    27 00000053 488D15(66010000)    <1>     lea rdx, badRealloc
    28 0000005A 0F8255040000        <1>     jc badExitMsg
    29                              <1> ;One command line argument except for mandatory filename, /B=(binary read)
    30 00000060 B800370000          <1>     mov eax, 3700h
    31 00000065 CD21                <1>     int 21h
    32 00000067 B85C000000          <1>     mov eax, "\"    ;Default pathsep
    33 0000006C B92F000000          <1>     mov ecx, "/"    ;Alternative pathsep
    34 00000071 80FA2D              <1>     cmp dl, "-"     ;Is the switch char default or alternative?
    35 00000074 0F44C1              <1>     cmove eax, ecx  ;Move if alternative
    36 00000077 88D3                <1>     mov bl, dl  ;Preserve switch char in bl
    37 00000079 881D(01000000)      <1>     mov byte [switchChar], bl
    38 0000007F 8805(00000000)      <1>     mov byte [pathSep], al
    39                              <1> getCmdTail:
    40 00000085 B801610000          <1>     mov eax, 6101h  ;Get parsed FCB and cmdtail for filename in rdx
    41 0000008A CD21                <1>     int 21h
    42                              <1> ;Now parse the command line, to get full command spec for filename.
    43 0000008C 488D7A25            <1>     lea rdi, qword [rdx + cmdArgs.progTail]     ;Get ptr to tail
    44 00000090 0FB64A24            <1>     movzx ecx, byte [rdx + cmdArgs.parmList]    ;Get number of chars in cmdline
    45                              <1> cmdTailParse:
    46 00000094 B020                <1>     mov al, SPC ;Comparing against a space
    47                              <1> .searchLoop:
    48 00000096 67E368              <1>     jecxz .parseComplete    ;If we run out of chars, exit!
    49 00000099 F3AE                <1>     repe scasb  ;Search for the first non-space char
    50 0000009B 385FFF              <1>     cmp byte [rdi - 1], bl  ;Did we find a switchchar?
    51 0000009E 7539                <1>     jne short .notSwitch
    52 000000A0 8A07                <1>     mov al, byte [rdi]      ;Get the char after the switch
    53                              <1>     ;Now we lookahead only if we have more than 1 char left in buffer
    54 000000A2 81F901000000        <1>     cmp ecx, 1  ;If we have 1 char left, automatically accept as arg
    55 000000A8 7419                <1>     je short .goodSwitch
    56 000000AA 8A6701              <1>     mov ah, byte byte [rdi + 1] ;Lookahead
    57 000000AD 80FC20              <1>     cmp ah, SPC ;If char after switchchar is SPC, accept
    58 000000B0 7411                <1>     je short .goodSwitch
    59                              <1> .parseBadExit:
    60 000000B2 E9F7030000          <1>     jmp badParmExit
    61                              <1> .nameBadExit:
    62 000000B7 488D15(9E000000)    <1>     lea rdx, badNameStr
    63 000000BE E9F2030000          <1>     jmp badExitMsg
    64                              <1> .goodSwitch:
    65 000000C3 24DF                <1>     and al, ~20h    ;Clear the lowercase flag
    66 000000C5 3C42                <1>     cmp al, "B"     ;The flag is /B
    67 000000C7 75E9                <1>     jne short .parseBadExit
    68 000000C9 C605(04000000)FF    <1>     mov byte [noEofChar], -1   ;Set the internal flag
    69 000000D0 48FFC7              <1>     inc rdi ;Move rdi to the char after the B
    70 000000D3 FFC9                <1>     dec ecx ;And decrement count of chars left
    71 000000D5 742A                <1>     jz short .parseComplete
    72 000000D7 EBBB                <1>     jmp short cmdTailParse   ;Now skip next lot of spaces
    73                              <1> .notSwitch:
    74                              <1>     ;Thus rdi must point one char past the start of a filename. 
    75                              <1>     ;If there is no filename, accept the pointer. 
    76                              <1>     ;If not, fail.
    77 000000D9 48813D(3E010000)00- <1>     cmp qword [tmpNamePtr], 0
    77 000000E1 000000              <1>
    78 000000E4 75CC                <1>     jnz short .parseBadExit ;If its not empty, too many filenames passed in
    79 000000E6 48FFCF              <1>     dec rdi
    80 000000E9 48893D(3E010000)    <1>     mov qword [tmpNamePtr], rdi ;Store the ptr temporarily here
    81 000000F0 48FFC7              <1>     inc rdi
    82 000000F3 F2AE                <1>     repne scasb ;Now we keep going until we hit a space
    83 000000F5 48893D(46010000)    <1>     mov qword [tmpNamePtr2], rdi    ;Store first char past end of name here.
    84 000000FC 3847FF              <1>     cmp byte [rdi - 1], al  ;Was this a space or run out of chars?
    85 000000FF 7495                <1>     je short .searchLoop    ;Jump if a space, else, we parsed the tail.
    86                              <1> .parseComplete:
    87                              <1> ;Check we have a pointer to a filename AT LEAST.
    88 00000101 48813D(3E010000)00- <1>     cmp qword [tmpNamePtr], 0
    88 00000109 000000              <1>
    89 0000010C 74A9                <1>     je short .nameBadExit
    90                              <1> ;Now we copy the filename internally.
    91 0000010E 488D3D(3E000000)    <1>     lea rdi, pathspec
    92 00000115 488B35(3E010000)    <1>     mov rsi, qword [tmpNamePtr]
    93                              <1> nameCopy:
    94 0000011C A4                  <1>     movsb   ;Copy one char at a time
    95 0000011D 483B35(46010000)    <1>     cmp rsi, qword [tmpNamePtr2]    ;Check if we are equal to end of string ptr
    96 00000124 75F6                <1>     jne short nameCopy
    97 00000126 31C0                <1>     xor eax, eax
    98 00000128 AA                  <1>     stosb   ;Store the null terminating char
    99 00000129 488D3D(3E000000)    <1>     lea rdi, pathspec
   100 00000130 4889FE              <1>     mov rsi, rdi
   101 00000133 B800600000          <1>     mov eax, 6000h  ;TRUENAME the filename
   102 00000138 CD21                <1>     int 21h
   103 0000013A 731D                <1>     jnc short .nameGood ;Name ok, proceed
   104 0000013C 3C0F                <1>     cmp al, errBadDrv
   105 0000013E 750C                <1>     jne short .genericError
   106 00000140 488D15(71000000)    <1>     lea rdx, badDrvStr
   107 00000147 E969030000          <1>     jmp badExitMsg
   108                              <1> .genericError:
   109 0000014C 488D15(F8000000)    <1>     lea rdx, badFileStr ;If this fails, bad filespec
   110 00000153 0F825C030000        <1>     jc badExitMsg  ;The filename is bad for some reason!
   111                              <1> .nameGood:
   112                              <1> ;Now we produce a backup/working filespec
   113 00000159 488D35(3E000000)    <1>     lea rsi, pathspec
   114 00000160 488D3D(BE000000)    <1>     lea rdi, wkfile ;This pathspec always has an extension
   115 00000167 E8DB040000          <1>     call strcpyASCIIZ
   116                              <1> ;Now invalidate tmpNamePtr and tmpNamePtr2
   117 0000016C 31C9                <1>     xor ecx, ecx
   118 0000016E 48890D(3E010000)    <1>     mov qword [tmpNamePtr], rcx
   119 00000175 48890D(46010000)    <1>     mov qword [tmpNamePtr2], rcx
   120 0000017C 48FFC9              <1>     dec rcx
   121 0000017F 488D3D(BE000000)    <1>     lea rdi, wkfile
   122 00000186 31C0                <1>     xor eax, eax
   123 00000188 F2AE                <1>     repne scasb   ;rdi points past terminating null
   124                              <1>     ;Find the nearest pathsep (since we have fully qualified the name)
   125 0000018A FD                  <1>     std
   126 0000018B 0FB605(00000000)    <1>     movzx eax, byte [pathSep]   ;Get pathsep char in al
   127 00000192 F2AE                <1>     repne scasb
   128 00000194 FC                  <1>     cld
   129 00000195 4881C702000000      <1>     add rdi, 2  ;Point rdi to first char past the pathsep
   130 0000019C 48893D(3E010000)    <1>     mov qword [fileNamePtr], rdi    ;Save the ptr
   131 000001A3 4889FE              <1>     mov rsi, rdi
   132 000001A6 B908000000          <1>     mov ecx, 8  ;number of chars to search thru
   133                              <1> .extSearch:
   134 000001AB AC                  <1>     lodsb
   135 000001AC 84C0                <1>     test al, al
   136 000001AE 7408                <1>     jz short .insertExt
   137 000001B0 3C2E                <1>     cmp al, "."
   138 000001B2 740E                <1>     je short .extFound
   139 000001B4 FFC9                <1>     dec ecx
   140 000001B6 75F3                <1>     jnz short .extSearch    ;Impossible edgecase (TRUENAME returns 8.3 filename)
   141                              <1> .insertExt:
   142                              <1>     ;rsi points just past the null
   143 000001B8 C646FF2E            <1>     mov byte [rsi - 1], "." ;Store a pathsep
   144 000001BC C70620202000        <1>     mov dword [rsi], "   "   ;Store empty extension so no accidental BAK issues.
   145                              <1> .extFound:
   146 000001C2 488935(46010000)    <1>     mov qword [fileExtPtr], rsi
   147                              <1> ;Now we have all the metadata for the filename we are working with
   148 000001C9 8B06                <1>     mov eax, dword [rsi]
   149 000001CB 3D42414B00          <1>     cmp eax, "BAK"  ;Is this a bakup file?
   150 000001D0 488D15(BE010000)    <1>     lea rdx, badFileExt
   151 000001D7 0F84D8020000        <1>     je badExitMsg   ;If yes, error!
   152 000001DD C70624242400        <1>     mov dword [rsi], "$$$"   ;Now we store working file $$$ extension 
   153                              <1> ;Now we check to make sure the path has no global filename chars
   154                              <1> wildcardCheck:
   155 000001E3 488D35(3E000000)    <1>     lea rsi, pathspec
   156                              <1> .mainlp:
   157 000001EA AC                  <1>     lodsb
   158 000001EB 84C0                <1>     test al, al ;Once we're at the null char, proceed
   159 000001ED 7414                <1>     jz short fileOpen
   160 000001EF 3C3F                <1>     cmp al, "?"
   161 000001F1 7404                <1>     je short .error
   162 000001F3 3C2A                <1>     cmp al, "*"
   163 000001F5 75F3                <1>     jne short .mainlp
   164                              <1> .error:
   165 000001F7 488D15(71000000)    <1>     lea rdx, badDrvStr
   166 000001FE E9B2020000          <1>     jmp badExitMsg
   167                              <1> ;Now we open the file to check if it exists and if it does, if it is readonly
   168                              <1> fileOpen:
   169                              <1> ;first set the handles to -1
   170 00000203 C705(3A000000)FFFF- <1>     mov dword [readHdl], -1 ;Init the handles to -1
   170 0000020B FFFF                <1>
   171                              <1> ;Now we search for the file
   172 0000020D 488D15(3E000000)    <1>     lea rdx, pathspec
   173 00000214 B906000000          <1>     mov ecx, dirIncFiles
   174 00000219 B8004E0000          <1>     mov eax, 4E00h  ;Find First 
   175 0000021E CD21                <1>     int 21h
   176 00000220 723B                <1>     jc .fileNotFound
   177                              <1> ;Check if file is read only
   178 00000222 B8002F0000          <1>     mov eax, 2F00h  ;Get a pointer to the DTA in rbx
   179 00000227 CD21                <1>     int 21h
   180 00000229 0FB64315            <1>     movzx eax, byte [rbx + ffBlock.attribFnd]
   181 0000022D A801                <1>     test al, dirReadOnly
   182 0000022F 7407                <1>     jz short .notReadOnly
   183                              <1> .readOnly:
   184                              <1> ;Read only files here
   185 00000231 C605(02000000)FF    <1>     mov byte [roFlag], -1   ;Set read only flag!
   186                              <1> .notReadOnly:
   187                              <1> ;File exists, lets open it, to read from
   188 00000238 B8203D0000          <1>     mov eax, (3Dh << 8) | ReadAccess | denyWriteShare
   189 0000023D 488D15(3E000000)    <1>     lea rdx, pathspec    ;Get the pointer to the working filename
   190 00000244 CD21                <1>     int 21h         ;Open the file
   191 00000246 730C                <1>     jnc short .backupOpened
   192                              <1> ;File failed to open
   193 00000248 488D15(DB000000)    <1>     lea rdx, badOpenStr
   194 0000024F E961020000          <1>     jmp badExitMsg
   195                              <1> .backupOpened:
   196                              <1> ;Backup opened and handle in ax.
   197 00000254 668905(3A000000)    <1>     mov word [readHdl], ax  ;Store the read handle here
   198 0000025B EB1F                <1>     jmp short createWorkingFile
   199                              <1> .fileNotFound:
   200                              <1> ;Maybe new file? Check reason for error! If FNF, its good!
   201 0000025D 663D0200            <1>     cmp ax, errFnf  ;If its a file not found error, then we are good!
   202 00000261 488D15(DB000000)    <1>     lea rdx, badOpenStr ;We can't open the file for whatever reason
   203 00000268 0F8547020000        <1>     jne badExitMsg
   204                              <1> ;Error was file not found so we can make the file!
   205 0000026E C605(03000000)FF    <1>     mov byte [newFileFlag], -1  ;Set the new file flag!
   206 00000275 C605(05000000)FF    <1>     mov byte [eofReached], -1   ;Setup that we at eof
   207                              <1> createWorkingFile:
   208                              <1> ;Now open a new file with triple question mark extension
   209                              <1> ;rdi -> Path to file with $$$ (the working file)
   210 0000027C 488D15(BE000000)    <1>     lea rdx, wkfile    ;Get a pointer to this filename
   211 00000283 B8005B0000          <1>     mov eax, 5B00h  ;Create file (atomic), prevent two edlins from editing same file
   212 00000288 31C9                <1>     xor ecx, ecx    ;Clear all file attributes (normal file)
   213 0000028A CD21                <1>     int 21h
   214 0000028C 488D15(BC000000)    <1>     lea rdx, badCreatStr    ;Creating the working file will fail if already exits
   215 00000293 0F821C020000        <1>     jc badExitMsg   ;This prevents someone from overriding the file
   216 00000299 668905(3C000000)    <1>     mov word [writeHdl], ax ;Store a pointer to the write handle
   217 000002A0 F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;If set, this is a new file!
   218 000002A7 740E                <1>     jz short .notNewFile
   219 000002A9 488D15(3C000000)    <1>     lea rdx, newStr
   220 000002B0 B800090000          <1>     mov eax, 0900h
   221 000002B5 CD21                <1>     int 21h
   222                              <1> .notNewFile:
   223                              <1> ;Now the following:
   224                              <1> ;1) Allocate max memory (1Mb max)
   225                              <1> ;2) If new file, goto 4. Print "new file" message
   226                              <1> ;3) Else, fill up to 75% of arena according to table. If 
   227                              <1> ;    EOF reached (either due to no bytes left or ^Z (if enabled))
   228                              <1> ;    print "EOF reached message".
   229                              <1> ;4) Install Int 23h handler
   230                              <1> ;5) Goto main loop
   231                              <1> allocateMemory:
   232 000002B7 31DB                <1>     xor ebx, ebx
   233 000002B9 BB00000100          <1>     mov ebx, 10000h ;Start trying to allocate at 1Mb
   234 000002BE B800480000          <1>     mov eax, 4800h
   235 000002C3 CD21                <1>     int 21h
   236 000002C5 731E                <1>     jnc short .loadProgram
   237                              <1>     ;If the allocation failed, eax has max paragraphs
   238 000002C7 3D10000000          <1>     cmp eax, 10h    ;If we have less than 256 bytes available, fail
   239 000002CC 720B                <1>     jb short .notEnoughMem
   240 000002CE 89C3                <1>     mov ebx, eax    ;Get the number of paragraphs into ebx for request
   241 000002D0 B800480000          <1>     mov eax, 4800h
   242 000002D5 CD21                <1>     int 21h
   243 000002D7 730C                <1>     jnc short .loadProgram
   244                              <1> .notEnoughMem:
   245 000002D9 488D15(7B010000)    <1>     lea rdx, badMemFull
   246 000002E0 E9D0010000          <1>     jmp badExitMsg
   247                              <1> .loadProgram:
   248                              <1> ;rax has pointer here
   249 000002E5 488905(0E000000)    <1>     mov qword [memPtr], rax
   250 000002EC 4889C6              <1>     mov rsi, rax
   251 000002EF C1E304              <1>     shl ebx, 4  ;Multiply by 16 to get number of bytes
   252 000002F2 4801DE              <1>     add rsi, rbx
   253 000002F5 48FFCE              <1>     dec rsi     ;Point rsi to the last char of the arena
   254 000002F8 488935(30000000)    <1>     mov qword [endOfArena], rsi
   255 000002FF 891D(06000000)      <1>     mov dword [arenaSize], ebx  ;Save number of bytes in arena here
   256 00000305 F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;We skip setting the 1/4 and 3/4 markers 
   257 0000030C 7522                <1>     jnz .newFile
   258 0000030E 4889C6              <1>     mov rsi, rax    ;Save the pointer to memory arena in rsi
   259 00000311 31C9                <1>     xor ecx, ecx    ;Zero the upper 32 bits
   260 00000313 678D0C5B            <1>     lea ecx, dword [2*ebx + ebx]    ;Multiply ebx by 3 into ecx
   261 00000317 C1E902              <1>     shr ecx, 2  ;Divide by 4 to get # of bytes to default fill by
   262 0000031A 890D(16000000)      <1>     mov dword [fillPtr], ecx   ;Save number of bytes to fill arena with
   263 00000320 480105(16000000)    <1>     add qword [fillPtr], rax   ;Turn into offset from start of arena
   264 00000327 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get # of bytes to default free until
   265 0000032A 891D(0A000000)      <1>     mov dword [freeCnt], ebx   ;Save number of bytes to free from the arena
   266                              <1> .newFile:
   267                              <1> ;Now we setup the edit and command buffers
   268 00000330 C605(65020000)FD    <1>     mov byte [workLine + line.bBufLen], lineLen
   269 00000337 C605(4E010000)80    <1>     mov byte [cmdLine + line.bBufLen], halflineLen
   270 0000033E 66C705(1E000000)01- <1>     mov word [curLineNum], 1    ;Start at line 1
   270 00000346 00                  <1>
   271 00000347 488905(20000000)    <1>     mov qword [curLinePtr], rax
   272 0000034E C6001A              <1>     mov byte [rax], EOF ;Store an EOF at the start of the buffer!
   273 00000351 488905(28000000)    <1>     mov qword [eofPtr], rax
   274                              <1> ;Nice trick, ensure we dont print any errors on append when initially loading the
   275                              <1> ; file! Since we are appending, we setup as if the user typed in an arg. 
   276                              <1> ;arg1 is already zero due to BSS zeroing
   277 00000358 C605(D8010000)01    <1>     mov byte [argCnt], 1    ;Default to one argument! arg1 = 0 means load to 3/4!
   278 0000035F F605(03000000)FF    <1>     test byte [newFileFlag], -1
   279 00000366 7513                <1>     jnz getCommand
   280 00000368 C605(64020000)FF    <1>     mov byte [noAppendErr], -1
   281 0000036F E8DE040000          <1>     call appendLines
   282 00000374 C605(64020000)00    <1>     mov byte [noAppendErr], 0
   283                              <1> getCommand:
   284 0000037B 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset the stack pointer
   285 00000382 488D157B040000      <1>     lea rdx, i23h
   286 00000389 B823250000          <1>     mov eax, 2523h  ;Set Interrupt handler for Int 23h
   287 0000038E CD21                <1>     int 21h
   288 00000390 B82A000000          <1>     mov eax, prompt
   289 00000395 E8170C0000          <1>     call printChar
   290 0000039A 488D15(4E010000)    <1>     lea rdx, cmdLine
   291 000003A1 B8000A0000          <1>     mov eax, 0A00h  ;Take buffered input.
   292 000003A6 CD21                <1>     int 21h
   293 000003A8 E8020C0000          <1>     call printLF 
   294 000003AD 488D35(50010000)    <1>     lea rsi, qword [cmdLine + halfLine.pString] ;Point to the text of the line
   295 000003B4 488935(D0010000)    <1>     mov qword [charPtr], rsi
   296                              <1> ;Now we parse the command line!
   297                              <1> ;NOTE: Multiple commands may be on the same command line.
   298                              <1> ;Commands are terminated by a command letter (except in the
   299                              <1> ; case of S and R where they may be followed by a string).
   300                              <1> ;If we encounter a CR in the string parsing, then we are
   301                              <1> ; finished with this command line. Else, we keep parsing the
   302                              <1> ; same command line, until all the chars in the buffer 
   303                              <1> ; have been processed and/or a CR has been hit.
   304                              <1> parseCommand:
   305 000003BB 31C0                <1>     xor eax, eax
   306 000003BD 8805(D8010000)      <1>     mov byte [argCnt], al
   307 000003C3 488905(D9010000)    <1>     mov qword [argTbl], rax ;Clear the argument table
   308 000003CA 8805(E1010000)      <1>     mov byte [qmarkSet], al
   309 000003D0 488B35(D0010000)    <1>     mov rsi, qword [charPtr]    ;Get rsi to the right place in command line
   310 000003D7 488D2D(D9010000)    <1>     lea rbp, argTbl
   311                              <1> .parse:
   312 000003DE FE05(D8010000)      <1>     inc byte [argCnt]   ;Parsing an argument
   313 000003E4 E83C030000          <1>     call parseEntry ;Returns in bx the word to store in the arg table
   314 000003E9 0FB63D(D8010000)    <1>     movzx edi, byte [argCnt]
   315 000003F0 FFCF                <1>     dec edi ;Turn into offset
   316 000003F2 66895C7D00          <1>     mov word [rbp + 2*rdi], bx  ;Store the argument
   317 000003F7 48FFCE              <1>     dec rsi     ;Go back to the first char past the argument
   318 000003FA E8CA030000          <1>     call skipSpaces ;Skip spaces
   319 000003FF 3C2C                <1>     cmp al, "," ;Is the first char the argument separator?
   320 00000401 74DB                <1>     je .parse
   321 00000403 48FFCE              <1>     dec rsi ;Move rsi back to the non comma char
   322 00000406 E8BE030000          <1>     call skipSpaces
   323 0000040B 3C3F                <1>     cmp al, "?"
   324 0000040D 750C                <1>     jne short .notQmark
   325 0000040F C605(E1010000)FF    <1>     mov byte [qmarkSet], -1
   326 00000416 E8AE030000          <1>     call skipSpaces ;Get the next char (must be a cmd char) in al
   327                              <1> .notQmark:
   328 0000041B 3C61                <1>     cmp al, "a"
   329 0000041D 7202                <1>     jb short .noUC
   330 0000041F 24DF                <1>     and al, 0DFh    ;Convert cmd char to upper case if LC 
   331                              <1> .noUC:
   332 00000421 488D3D(00000000)    <1>     lea rdi, cmdLetterTable
   333 00000428 B90F000000          <1>     mov ecx, cmdLetterTableL
   334 0000042D F2AE                <1>     repne scasb
   335 0000042F 0F859F0C0000        <1>     jne printComErr ;Print an error if char not in table
   336 00000435 F7D1                <1>     not ecx ;1's compliment to subtract 1 too
   337 00000437 81C10F000000        <1>     add ecx, cmdLetterTableL    ;Get L->R offset into table
   338                              <1> ;Now check the R/O permissions for the selected function
   339                              <1> ;ecx has the offset into the table
   340 0000043D F605(02000000)FF    <1>     test byte [roFlag], -1  ;If this flag is not set, ignore r/o
   341 00000444 7421                <1>     jz short execCmd
   342 00000446 488D2D(2D000000)    <1>     lea rbp, cmdRoTable
   343 0000044D F6440D00FF          <1>     test byte [rbp + rcx], -1   ;Test the flag
   344 00000452 7513                <1>     jnz short execCmd
   345 00000454 488D15(E3010000)    <1>     lea rdx, badROcmd
   346 0000045B B800090000          <1>     mov eax, 0900h
   347 00000460 CD21                <1>     int 21h
   348 00000462 E96D0C0000          <1>     jmp printComErr
   349                              <1> execCmd:
   350 00000467 488935(D0010000)    <1>     mov qword [charPtr], rsi
   351 0000046E 488D2D(0F000000)    <1>     lea rbp, cmdFcnTable
   352 00000475 480FBF5C4D00        <1>     movsx rbx, word [rbp + 2*rcx]    ;Get word ptr into rbx
   353 0000047B 4801EB              <1>     add rbx, rbp    ;Convert the word offset from cmdFcnTbl to pointer
   354 0000047E FFD3                <1>     call rbx
   355                              <1> nextCmd:
   356 00000480 488B35(D0010000)    <1>     mov rsi, qword [charPtr]
   357 00000487 E83D030000          <1>     call skipSpaces ;Now move to the "following command" or CR
   358 0000048C 3C0D                <1>     cmp al, CR
   359 0000048E 0F84E7FEFFFF        <1>     je getCommand   ;If CR, end of line. Get new command
   360 00000494 3C1A                <1>     cmp al, EOF
   361 00000496 7404                <1>     je short .eocChar
   362 00000498 3C3B                <1>     cmp al, ";"
   363 0000049A 7503                <1>     jne short .skipEocChar
   364                              <1> .eocChar:
   365 0000049C 48FFC6              <1>     inc rsi ;Move rsi ahead one to avoid the below...
   366                              <1> .skipEocChar:
   367 0000049F 48FFCE              <1>     dec rsi ;Move rsi back to the first char of the new command
   368 000004A2 488935(D0010000)    <1>     mov qword [charPtr], rsi    ;Save the command line pointer
   369 000004A9 E90DFFFFFF          <1>     jmp parseCommand
   370                              <1> 
   371                              <1> ;----Bad Exits----
   372                              <1> badParmExit:
   373 000004AE 488D15(44010000)    <1>     lea rdx, badParm    ;Bad number of parameters
   374                              <1> badExitMsg:
   375 000004B5 4885D2              <1>     test rdx, rdx   ;Check if null ptr => Dont print on exit
   376 000004B8 7407                <1>     jz short badExit
   377 000004BA B800090000          <1>     mov eax, 0900h
   378 000004BF CD21                <1>     int 21h
   379                              <1> badExit:
   380 000004C1 B8FF4C0000          <1>     mov eax, 4CFFh
   381 000004C6 CD21                <1>     int 21h
    35                                  %include "./Source/edutils.asm"
     1                              <1> ;General Utility functions for edlin go here
     2                              <1> 
     3                              <1> replaceLine:
     4                              <1> ;Replaces a line in memory with a line in a buffer.
     5                              <1> ;Input: ecx = New line length
     6                              <1> ;       rsi -> New line source ptr
     7                              <1> ;       edx = Old line length
     8                              <1> ;       rdi -> Old line ptr
     9 000004C8 39D1                <1>     cmp ecx, edx
    10 000004CA 7447                <1>     je .doCopy
    11 000004CC 51                  <1>     push rcx
    12 000004CD 56                  <1>     push rsi
    13 000004CE 57                  <1>     push rdi
    14 000004CF 4889FE              <1>     mov rsi, rdi
    15 000004D2 4801D6              <1>     add rsi, rdx    ;Go to the end of the old line 
    16 000004D5 4801CF              <1>     add rdi, rcx    ;Go to where the new line will end
    17 000004D8 488B05(28000000)    <1>     mov rax, qword [eofPtr]
    18 000004DF 4829D0              <1>     sub rax, rdx    ;See if we have enough space for the new line!!
    19 000004E2 4801C8              <1>     add rax, rcx
    20 000004E5 483B05(30000000)    <1>     cmp rax, qword [endOfArena]
    21 000004EC 0F83D90B0000        <1>     jae printMemErr
    22 000004F2 488705(28000000)    <1>     xchg qword [eofPtr], rax    ;This will be the new eof
    23 000004F9 4889C1              <1>     mov rcx, rax    ;Get the old eofPtr in rcx
    24 000004FC 4829F1              <1>     sub rcx, rsi
    25 000004FF 4839FE              <1>     cmp rsi, rdi
    26 00000502 7707                <1>     ja .noRevMove
    27 00000504 4801CE              <1>     add rsi, rcx    ;Here we setup reverse copy!!
    28 00000507 4801CF              <1>     add rdi, rcx
    29 0000050A FD                  <1>     std
    30                              <1> .noRevMove:
    31 0000050B FFC1                <1>     inc ecx         ;Add a char for the EOF itself!
    32 0000050D F3A4                <1>     rep movsb
    33 0000050F FC                  <1>     cld
    34 00000510 5F                  <1>     pop rdi
    35 00000511 5E                  <1>     pop rsi
    36 00000512 59                  <1>     pop rcx
    37                              <1>     ;Now that there is space in the buffer, we can do the copy!
    38                              <1> .doCopy:
    39 00000513 F3A4                <1>     rep movsb
    40                              <1>     return
    13                              <2> %%_ret:
    14 00000515 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                              <1> 
    42                              <1> stufBuf:
    43                              <1> ;Stuffs the workLine with a line of text from memory!
    44                              <1> ;Input: rsi -> Buffer to source the stuff from
    45                              <1> ;Output: Buffer stuffed. If line too long, truncated to the first 253 chars.
    46                              <1> ;       edx = Real length of line!
    47 00000516 488D3D(67020000)    <1>     lea rdi, workLine + 2   ;Go to the start of the text portion
    48 0000051D B9FF000000          <1>     mov ecx, 255
    49 00000522 31D2                <1>     xor edx, edx            ;Use as the char counter in the buffer
    50                              <1> .lp:
    51 00000524 AC                  <1>     lodsb
    52 00000525 AA                  <1>     stosb
    53 00000526 FFC2                <1>     inc edx     ;Copied one more char over
    54 00000528 3C0D                <1>     cmp al, CR  ;Was this a CR?
    55 0000052A 7404                <1>     je .eol     ;Exit if so
    56 0000052C FFC9                <1>     dec ecx     ;Else decrement from buffer counter
    57 0000052E 75F4                <1>     jnz .lp     ; and go again!
    58                              <1> .eol:
    59 00000530 FFCA                <1>     dec edx     ;Drop the CR from the char count
    60 00000532 8815(66020000)      <1>     mov byte [workLine + 1], dl ;Store the char count here
    61 00000538 3C0D                <1>     cmp al, CR  ;Now check we are here due to having a valid EOL
    62                              <1>     rete        ;Exit if so
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000053A 74(15)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    63 0000053C FFC2                <1>     inc edx
    64                              <1> .longLine:  ;Else scan for the EOL char
    65 0000053E AC                  <1>     lodsb   ;Get the next char
    66 0000053F FFC2                <1>     inc edx ;Keep track of the real length of the line
    67 00000541 3C0D                <1>     cmp al, CR
    68 00000543 75F9                <1>     jne .longLine   ;If not CR, keep searching
    69 00000545 48FFCF              <1>     dec rdi ;Go back to the last char position in the buffer
    70 00000548 AA                  <1>     stosb   ;Store the CR there
    71                              <1>     return  ;We stored max count in workLine+1 earlier. We are done
    13                              <2> %%_ret:
    14 00000549 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> 
    73                              <1> doCmdChar:
    74                              <1> ;Handles command chars that are typed into the buffer. These chars are
    75                              <1> ; ^V<CHAR> where <CHAR> has to be a UC char to be treated as a command char.
    76                              <1> ;Assumes that rsi is pointing to the start of the data portion of a command line.
    77                              <1> ;Thus:  rsi -> Input buffer
    78                              <1> ;       rsi - 1 = Number of chars typed 
    79                              <1> ;       rsi - 2 = Input buffer length
    80 0000054A FC                  <1>     cld                         ;Ensure we are searching the right way
    81 0000054B 51                  <1>     push rcx
    82 0000054C 56                  <1>     push rsi
    83 0000054D 57                  <1>     push rdi
    84 0000054E 4889F7              <1>     mov rdi, rsi                ;Copy the pointer for scanning
    85 00000551 0FB64EFF            <1>     movzx ecx, byte [rsi - 1]   ;Get number of chars typed in to scan
    86                              <1> .lp:
    87 00000555 67E32A              <1>     jecxz .exit                 ;No more chars to handle, exit!
    88 00000558 B816000000          <1>     mov eax, CMD                ;Scan for the ^V char in al
    89 0000055D F2AE                <1>     repne scasb
    90 0000055F 7521                <1>     jne .exit                   ;Ran out of chars to scan, exit!
    91                              <1> ;Here rdi points to the char after the quote char.
    92 00000561 8A07                <1>     mov al, byte [rdi]  ;Get the quote char
    93 00000563 E81E000000          <1>     call doControl  ;Convert into a control char if appropriate
    94 00000568 8807                <1>     mov byte [rdi], al  ;Write back
    95                              <1> ;Save our position and count and pull the string up.
    96 0000056A 51                  <1>     push rcx
    97 0000056B 56                  <1>     push rsi
    98 0000056C 57                  <1>     push rdi
    99 0000056D 4889FE              <1>     mov rsi, rdi    ;Start copying from this replaced char
   100 00000570 48FFCF              <1>     dec rdi         ;Store to the char before
   101 00000573 FFC1                <1>     inc ecx         ;Copy over the CR too
   102 00000575 F3A4                <1>     rep movsb
   103 00000577 5F                  <1>     pop rdi
   104 00000578 5E                  <1>     pop rsi
   105 00000579 59                  <1>     pop rcx
   106 0000057A 67E305              <1>     jecxz .exit     ;If we terminated the line with a ^V<CR>, now exit
   107 0000057D FE4EFF              <1>     dec byte [rsi - 1]  ;Else drop one char from the count
   108 00000580 EBD3                <1>     jmp short .lp   ;And keep scanning
   109                              <1> .exit:
   110 00000582 5F                  <1>     pop rdi
   111 00000583 5E                  <1>     pop rsi
   112 00000584 59                  <1>     pop rcx
   113                              <1>     return
    13                              <2> %%_ret:
    14 00000585 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> doControl:
   116                              <1> ;Input: al = Possible control char. This has to be an uppercase char! 
   117 00000586 50                  <1>     push rax
   118 00000587 24E0                <1>     and al, 0E0h    ;Preserve upper three bits only (not used for chars)
   119 00000589 3C40                <1>     cmp al, 40h     ;Check if only the middle (UC) was set!
   120 0000058B 58                  <1>     pop rax
   121                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000058C 75(85)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   122 0000058E 241F                <1>     and al, asciiMask   ;Convert into a control char
   123                              <1>     return
    13                              <2> %%_ret:
    14 00000590 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> checkArgOrder:
   126                              <1> ;Checks two arguments to ensure the second one is 
   127                              <1> ; greater than the first.
   128                              <1> ;Input: bx = first argument
   129                              <1> ;       word [arg2] = second argument
   130                              <1> ;Output: If it returns, its ok. Else it resets the command loop
   131 00000591 66813D(DB010000)00- <1>     cmp word [arg2], 0
   131 00000599 00                  <1>
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000059A 74(90)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 0000059C 663B1D(DB010000)    <1>     cmp bx, word [arg2]
   134                              <1>     retbe
    81                              <2> cret be
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000005A3 76(90)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   135 000005A5 58                  <1>     pop rax     ;Pop off the return address
   136 000005A6 E9290B0000          <1>     jmp printComErr
   137                              <1> 
   138                              <1> makeSpace:
   139                              <1> ;Makes space for a new string in the text
   140                              <1> ;Input: rdx -> Where in the arena we will move our text
   141                              <1> ;       rdi -> First byte we will be moving
   142                              <1> ;       bx = Line number we are making space for!
   143 000005AB 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   144 000005B2 4889CE              <1>     mov rsi, rcx    ;Copy in reverse, sourcing from the EOF ptr!!    
   145 000005B5 4829F9              <1>     sub rcx, rdi    ;Get the count of bytes to copy
   146 000005B8 FFC1                <1>     inc ecx         ;Including EOF
   147 000005BA 4889D7              <1>     mov rdi, rdx    
   148 000005BD FD                  <1>     std
   149 000005BE F3A4                <1>     rep movsb
   150 000005C0 FC                  <1>     cld
   151 000005C1 4887F7              <1>     xchg rsi, rdi   ;Swap the new EOF pointer and source
   152 000005C4 48FFC7              <1>     inc rdi         ;Point to the first byte of made space
   153 000005C7 4889F5              <1>     mov rbp, rsi    ;Setup to fall through now
   154                              <1> setLineVars:
   155                              <1> ;Sets the current line number, pointer and the new EOF pointer
   156                              <1> ;Input: bx = Current line number
   157                              <1> ;       rdi -> Space where this line is
   158                              <1> ;       rbp -> EOF char pointer
   159 000005CA 66891D(1E000000)    <1>     mov word [curLineNum], bx
   160 000005D1 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   161 000005D8 48892D(28000000)    <1>     mov qword [eofPtr], rbp
   162                              <1>     return
    13                              <2> %%_ret:
    14 000005DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> findLine:
   165                              <1> ;Given a line number, tries to find the actual line.
   166                              <1> ;Input: ebx = Line number to search for, 0 means exhaust all chars!
   167                              <1> ;Output: ZF=ZE: rdi -> Ptr to the line
   168                              <1> ;               edx = Actual line number we are at
   169                              <1> ;               eax = Line number specified
   170                              <1> ;        ZF=NZ: Line not found. (i.e. beyond last line)
   171                              <1> ;               edx = Line number past current line number
   172                              <1> ;               rdi -> End of memory space
   173 000005E0 0FB715(1E000000)    <1>     movzx edx, word [curLineNum]    ;Line to start counting from
   174 000005E7 488B3D(20000000)    <1>     mov rdi, qword [curLinePtr]     ;Pointer to this line
   175 000005EE 39D3                <1>     cmp ebx, edx
   176                              <1>     rete    ;If we are already at the line we want to be at, return!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000005F0 74(DF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   177 000005F2 7714                <1>     ja .prepSearch  
   178 000005F4 85DB                <1>     test ebx, ebx   ;Are we in the goto last line case?
   179 000005F6 7410                <1>     jz .prepSearch
   180                              <1> ;Else, we start scanning from the start of the arena!
   181 000005F8 BA01000000          <1>     mov edx, 1
   182 000005FD 488B3D(0E000000)    <1>     mov rdi, qword [memPtr] 
   183 00000604 39D3                <1>     cmp ebx, edx
   184                              <1>     rete    ;If we want to find line 1, here we are!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000606 74(DF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   185                              <1> .prepSearch:
   186 00000608 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   187 0000060F 4829F9              <1>     sub rcx, rdi    ;Turn ecx into count of chars left in buffer to scan
   188                              <1> findLineCore:
   189                              <1> ;Finds a line but from a presetup position as opposed to the global state!
   190                              <1> ;Input: rdi -> Line to check if it is terminated by a LF
   191                              <1> ;       ecx = Number of chars to check on
   192                              <1> ;       edx = Offset of line count to search for (line counter)
   193                              <1> ;       ebx = Count of lines to search for (0 means exhaust chars)
   194                              <1> ;Output:
   195                              <1> ;       al = LF
   196                              <1> ;       ZF=ZE: We read bx lines. rdi -> Past LF which terminated line
   197                              <1> ;       ZF=NZ: Ran out of chars
   198 00000612 B80A000000          <1>     mov eax, LF
   199                              <1> .lp:
   200 00000617 67E308              <1>     jecxz .exit ;Return w/o setting flags if we have no more chars left!
   201 0000061A F2AE                <1>     repne scasb
   202 0000061C FFC2                <1>     inc edx
   203 0000061E 39DA                <1>     cmp edx, ebx    ;Have we gone past bx lines yet?
   204 00000620 75F5                <1>     jne .lp    ;Scan the next line if not!!
   205                              <1> .exit:
   206                              <1>     return
    13                              <2> %%_ret:
    14 00000622 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> strlen:
   209                              <1> ;String length based on terminator in al
   210                              <1> ;Input: rsi -> Source Ptr
   211                              <1> ;       al = Terminating char to search for
   212                              <1> ;Output: ecx = Number of chars instring including terminator
   213 00000623 31C9                <1>     xor ecx, ecx
   214 00000625 FFC9                <1>     dec ecx
   215 00000627 57                  <1>     push rdi
   216 00000628 4889F7              <1>     mov rdi, rsi
   217 0000062B F2AE                <1>     repne scasb
   218 0000062D 5F                  <1>     pop rdi
   219 0000062E F7D9                <1>     neg ecx ;Take 2's compliment to get number of chars including terminator
   220                              <1>     return
    13                              <2> %%_ret:
    14 00000630 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   221                              <1> 
   222                              <1> strcpy:
   223                              <1> ;Copies a string from one buffer to another
   224                              <1> ;Input: rsi -> Source Ptr
   225                              <1> ;       rdi -> Destination Ptr
   226 00000631 56                  <1>     push rsi
   227 00000632 57                  <1>     push rdi
   228 00000633 51                  <1>     push rcx
   229 00000634 B9FD000000          <1>     mov ecx, lineLen    ;Max number of chars in a string
   230                              <1> .lp:
   231 00000639 803E0A              <1>     cmp byte [rsi], LF
   232 0000063C 7405                <1>     je short .exit
   233 0000063E A4                  <1>     movsb   ;Move the char over, inc both pointers
   234 0000063F FFC9                <1>     dec ecx
   235 00000641 75F6                <1>     jnz short .lp
   236                              <1> .exit:
   237 00000643 59                  <1>     pop rcx
   238 00000644 5F                  <1>     pop rdi
   239 00000645 5E                  <1>     pop rsi
   240                              <1>     return
    13                              <2> %%_ret:
    14 00000646 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> strcpyASCIIZ:
   243                              <1> ;Copies a ASCIIZ string from one buffer to another. 
   244                              <1> ;Pointers don't move.
   245                              <1> ;Input: rsi -> Source Ptr
   246                              <1> ;       rdi -> Destination Ptr
   247 00000647 56                  <1>     push rsi
   248 00000648 57                  <1>     push rdi
   249                              <1> .cpChar:
   250 00000649 AC                  <1>     lodsb
   251 0000064A AA                  <1>     stosb
   252 0000064B 84C0                <1>     test al, al ;Was this a nul char?
   253 0000064D 75FA                <1>     jnz .cpChar
   254 0000064F 5F                  <1>     pop rdi
   255 00000650 5E                  <1>     pop rsi
   256                              <1>     return
    13                              <2> %%_ret:
    14 00000651 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> 
   259                              <1> memmove:
   260                              <1> ;Copies a number of bytes over from one buffer to another
   261                              <1> ;Input: rsi -> Source Ptr
   262                              <1> ;       rdi -> Destination Ptr
   263                              <1> ;       ecx = Count of chars to copy
   264 00000652 56                  <1>     push rsi
   265 00000653 57                  <1>     push rdi
   266 00000654 51                  <1>     push rcx
   267 00000655 F3A4                <1>     rep movsb
   268 00000657 59                  <1>     pop rcx
   269 00000658 5F                  <1>     pop rdi
   270 00000659 5E                  <1>     pop rsi
   271                              <1>     return
    13                              <2> %%_ret:
    14 0000065A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   272                              <1> 
   273                              <1> checkEOF:
   274                              <1> ;Checks if we are at the EOF or if we hit an EOF char in the file.
   275                              <1> ;Input: ecx = Count of bytes
   276                              <1> ;       rdi -> Ptr to the start of the region we just read into memory
   277                              <1> ;       r10 = Original requested byte count
   278                              <1> ;Output: ZF=ZE => Found EOF in file (or ecx = 0)
   279                              <1> ;        ZF=NZ => No EOF found in file!
   280                              <1> ;       ecx = Count of relevant bytes in the buffer
   281 0000065B F605(04000000)FF    <1>     test byte [noEofChar], -1   ;If set, binary semantics!
   282 00000662 7542                <1>     jnz .binScan
   283                              <1> ;Here we scan for ^Z char
   284 00000664 57                  <1>     push rdi
   285 00000665 51                  <1>     push rcx
   286 00000666 B81A000000          <1>     mov eax, EOF
   287 0000066B 85C9                <1>     test ecx, ecx   ;If ecx is 0, skip the scan! Pretend we hit an EOF
   288 0000066D 7408                <1>     jz .ascNoEof
   289 0000066F F2AE                <1>     repne scasb
   290 00000671 7504                <1>     jne .ascNoEof
   291 00000673 9C                  <1>     pushfq
   292 00000674 FFC1                <1>     inc ecx         ;Increment by 1 to include the ptr to the EOF char itself!
   293 00000676 9D                  <1>     popfq
   294                              <1> .ascNoEof:
   295 00000677 89CF                <1>     mov edi, ecx    ;Save the byte count in edi (rdi)
   296 00000679 59                  <1>     pop rcx         ;Get back the original byte count!
   297 0000067A 9C                  <1>     pushfq
   298 0000067B 29F9                <1>     sub ecx, edi    ;Get the number of chars into the string we are 
   299 0000067D 9D                  <1>     popfq
   300 0000067E 5F                  <1>     pop rdi
   301                              <1> .niceExit:
   302                              <1>     retnz               ;If we are here and ZF=NZ, exit as no EOF hit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000067F 75(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   303                              <1> ;Now we adjust the end of the file, if the end of the file was a ^Z
   304                              <1> ; so that if the last char was not an LF, we add a CRLF pair
   305 00000681 9C                  <1>     pushfq
   306 00000682 57                  <1>     push rdi
   307 00000683 4801CF              <1>     add rdi, rcx    ;Go the the end of the buffer
   308 00000686 48FFCF              <1>     dec rdi
   309 00000689 48393D(0E000000)    <1>     cmp qword [memPtr], rdi ;Are we at the head of the buffer?
   310 00000690 7405                <1>     je .putCRLF ;If so, forcefully place a CRLF pair
   311 00000692 803F0A              <1>     cmp byte [rdi], LF
   312 00000695 740C                <1>     je .exit
   313                              <1> .putCRLF:
   314 00000697 66C747010D0A        <1>     mov word [rdi + 1], CRLF
   315 0000069D 81C102000000        <1>     add ecx, 2  ;We added two chars to the count
   316                              <1> .exit:
   317 000006A3 5F                  <1>     pop rdi
   318 000006A4 9D                  <1>     popfq
   319                              <1>     return
    13                              <2> %%_ret:
    14 000006A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .binScan:
   321                              <1> ;Here we deal with binary semantics
   322 000006A6 4439D1              <1>     cmp ecx, r10d   ;If we read less bytes than desired, check if an EOF present!
   323 000006A9 7205                <1>     jb .binLess
   324 000006AB 31C0                <1>     xor eax, eax
   325 000006AD FFC0                <1>     inc eax         ;Clear ZF
   326                              <1>     return
    13                              <2> %%_ret:
    14 000006AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   327                              <1> .binLess:
   328 000006B0 67E308              <1>     jecxz .binEofExit ;If ecx = 0, just adjust end and exit!
   329 000006B3 803C0F1A            <1>     cmp byte [rdi + rcx], EOF   ;Was this byte an EOF char?
   330 000006B7 7502                <1>     jne .binEofExit
   331 000006B9 FFC9                <1>     dec ecx             ;Drop it from the count.
   332                              <1> .binEofExit:
   333 000006BB 31C0                <1>     xor eax, eax
   334 000006BD EBC0                <1>     jmp short .niceExit
   335                              <1> 
   336                              <1> 
   337                              <1> markFileModified:
   338 000006BF C605(38000000)FF    <1>     mov byte [modFlag], -1
   339                              <1>     return
    13                              <2> %%_ret:
    14 000006C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> getModifiedStatus:
   342                              <1> ;If returns ZF=ZE, file NOT modified.
   343                              <1> ;Else, file modified.
   344 000006C7 F605(38000000)FF    <1>     test byte [modFlag], -1
   345                              <1>     return
    13                              <2> %%_ret:
    14 000006CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> delBkup:
   348                              <1> ;Finally, we delete the backup if it exists. If it doesn't delete
   349                              <1> ; for some reason, might be problematic later but not a big issue.
   350                              <1> ;If returns with CF=CY, know that the backup didn't delete...
   351                              <1> ;Preserves all registers!
   352 000006CF F605(39000000)FF    <1>     test byte [bkupDel], -1     ;If set, backup already deleted
   353                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000006D6 75(CE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   354 000006D8 E8EAFFFFFF          <1>     call getModifiedStatus   ;If clear, buffer has not been modified.
   355                              <1>     retz                        
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000006DD 74(CE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   356 000006DF F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;If the file is new then it has no backup!
   357                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000006E6 75(CE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 000006E8 C605(39000000)FF    <1>     mov byte [bkupDel], -1      ;Now deleting backup
   359 000006EF 50                  <1>     push rax
   360 000006F0 52                  <1>     push rdx
   361 000006F1 57                  <1>     push rdi
   362 000006F2 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   363 000006F9 B842414B00          <1>     mov eax, "BAK"
   364 000006FE AB                  <1>     stosd
   365 000006FF 488D15(BE000000)    <1>     lea rdx, bkupfile
   366 00000706 B800410000          <1>     mov eax, 4100h
   367 0000070B CD21                <1>     int 21h
   368 0000070D 5F                  <1>     pop rdi
   369 0000070E 5A                  <1>     pop rdx
   370 0000070F 58                  <1>     pop rax
   371                              <1>     retnc  ;Could overwrite first byte of this function with a ret 0:)
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000710 73(CE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   372                              <1>     ;I like my idea... but no, we need the flag.
   373 00000712 488D15(1A010000)    <1>     lea rdx, badBackDel
   374 00000719 E87E080000          <1>     call printString
   375                              <1>     retToDOS errBadBak
    94 0000071E B8044C0000          <2>  mov eax, 04C00h | %1
    95 00000723 CD21                <2>  int 21h
   376                              <1> 
   377                              <1> 
   378                              <1> parseEntry:
   379                              <1> ;Parses a single command line argument.
   380                              <1> ;. means current line
   381                              <1> ;+ means positive number offset from current line
   382                              <1> ;- means negative number offset from current line
   383                              <1> ;# means line after the last line in file ALWAYS.
   384                              <1> ; This is represented in the argument var as the 
   385                              <1> ; word 0FFFFh.
   386                              <1> ;A naked number is interpreted as a line number 
   387                              <1> ; directly.
   388                              <1> ;Maximum input value per argument: 65529
   389                              <1> ;--------------------------------------------
   390                              <1> ;Input: rsi -> String to parse
   391                              <1> ;Output: (e)bx = Value of argument
   392                              <1> ;          rsi -> First char past the end of arg
   393                              <1> ;--------------------------------------------
   394 00000725 E89F000000          <1>     call skipSpaces ;Move rsi past first non-space char and get al = First char
   395 0000072A 3C2B                <1>     cmp al, "+" ;Positive offset from current line
   396 0000072C 7444                <1>     je .plus
   397 0000072E 3C2D                <1>     cmp al, "-" ;Negative offset from current line
   398 00000730 7454                <1>     je .minus
   399 00000732 3C2E                <1>     cmp al, "." ;Current line, advance ptr to command terminator
   400 00000734 746E                <1>     je .dot
   401 00000736 3C23                <1>     cmp al, "#" ;Last line (-1), advance ptr to command terminator
   402 00000738 7478                <1>     je .pound
   403 0000073A 31DB                <1>     xor ebx, ebx
   404 0000073C 31C9                <1>     xor ecx, ecx
   405                              <1> .getArg:
   406 0000073E 3C30                <1>     cmp al, "0"
   407 00000740 7222                <1>     jb .endOfArg
   408 00000742 3C39                <1>     cmp al, "9"
   409 00000744 771E                <1>     ja .endOfArg
   410 00000746 81FB99190000        <1>     cmp ebx, 0FFFFh/0Ah ;If we are gonna go above the max, fail now
   411 0000074C 0F8382090000        <1>     jae printComErr
   412 00000752 FFC9                <1>     dec ecx ;Indicate we have a valid digit
   413 00000754 2C30                <1>     sub al, "0"
   414 00000756 678D1C9B            <1>     lea ebx, dword [4*ebx + ebx]    ;5*ebx
   415 0000075A D1E3                <1>     shl ebx, 1          ;2*5*ebx = 10*ebx
   416 0000075C 0FB6C0              <1>     movzx eax, al
   417 0000075F 01C3                <1>     add ebx, eax
   418 00000761 AC                  <1>     lodsb   ;Get the next char
   419 00000762 EBDA                <1>     jmp short .getArg
   420                              <1> .endOfArg:
   421 00000764 85C9                <1>     test ecx, ecx
   422                              <1>     retz    ;If no char provided, exit silently. Var already 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000766 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000768 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   423 00000769 85DB                <1>     test ebx, ebx   
   424 0000076B 0F8463090000        <1>     jz printComErr  ;Dont allow 0 as an argument
   425                              <1>     return
    13                              <2> %%_ret:
    14 00000771 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   426                              <1> .plus:
   427 00000772 E844000000          <1>     call .validSpecial
   428 00000777 E8A9FFFFFF          <1>     call parseEntry ;Now parse the entry again
   429 0000077C 0FB705(1E000000)    <1>     movzx eax, word [curLineNum]
   430 00000783 01C3                <1>     add ebx, eax    ;Only the low word is considered!!
   431                              <1>     return
    13                              <2> %%_ret:
    14 00000785 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   432                              <1> .minus:
   433 00000786 E830000000          <1>     call .validSpecial
   434 0000078B E895FFFFFF          <1>     call parseEntry ;Now parse the entry again, get result in ebx
   435 00000790 0FB705(1E000000)    <1>     movzx eax, word [curLineNum]
   436 00000797 29D8                <1>     sub eax, ebx    ;Now get the differnece and ...
   437 00000799 89C3                <1>     mov ebx, eax    ;save the difference in ebx
   438 0000079B B801000000          <1>     mov eax, 1
   439 000007A0 0F48D8              <1>     cmovs ebx, eax  ;If the difference is less than 0, return to line 1
   440                              <1>     return
    13                              <2> %%_ret:
    14 000007A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> .dot:
   442 000007A4 E812000000          <1>     call .validSpecial
   443 000007A9 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Goto current line (starts from 1)
   444 000007B0 AC                  <1>     lodsb
   445                              <1>     return
    13                              <2> %%_ret:
    14 000007B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> .pound:
   447 000007B2 E804000000          <1>     call .validSpecial
   448 000007B7 FFCB                <1>     dec ebx         ;Go to last line
   449 000007B9 AC                  <1>     lodsb
   450                              <1>     return
    13                              <2> %%_ret:
    14 000007BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> .validSpecial:
   452                              <1> ;Returns if it is a valid case to do so. Else no
   453 000007BB 803D(D8010000)04    <1>     cmp byte [argCnt], 4    ;Argument 2 is for the count
   454 000007C2 0F840C090000        <1>     je printComErr
   455                              <1>     return
    13                              <2> %%_ret:
    14 000007C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> skipSpaces:
   458                              <1> ;Also skips tabs
   459                              <1> ;Input: rsi must point to the start of the data string
   460                              <1> ;Output: rsi points to the first non-space char
   461                              <1> ;           al = First non-space char
   462 000007C9 AC                  <1>     lodsb
   463 000007CA 3C20                <1>     cmp al, " "
   464 000007CC 74FB                <1>     je short skipSpaces  
   465 000007CE 3C09                <1>     cmp al, TAB
   466 000007D0 74F7                <1>     je short skipSpaces
   467                              <1>     return
    13                              <2> %%_ret:
    14 000007D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> getPtrToStr:
   470                              <1> ;Gets a pointer to the string number specified.
   471                              <1> ;Input: eax = String number to get a pointer to
   472                              <1> ;Output: rsi -> First byte of the string selected
   473 000007D3 51                  <1>     push rcx
   474 000007D4 56                  <1>     push rsi
   475 000007D5 488B35(0E000000)    <1>     mov rsi, qword [memPtr] ;Get a pointer to the area to read
   476                              <1>     
   477                              <1> .exit:
   478 000007DC 5E                  <1>     pop rsi
   479 000007DD 59                  <1>     pop rcx
   480                              <1>     return
    13                              <2> %%_ret:
    14 000007DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   481                              <1> 
   482                              <1> ;---------------------------------------------------------------------------
   483                              <1> ;                  !!!! IMPORTANT Int 23h HANDLERS !!!!
   484                              <1> ;---------------------------------------------------------------------------
   485                              <1> i23hXfr:
   486 000007DF 0FB71D(ED040000)    <1>     movzx ebx, word [xfrHdl]
   487 000007E6 B8003E0000          <1>     mov eax, 3E00h  ;Close the handle
   488 000007EB CD21                <1>     int 21h
   489                              <1>     ;Now reset the stack and proceed as normal
   490                              <1> i23hInsert:
   491                              <1> ;^C handler for insert!
   492 000007ED 488D25(40060000)    <1>     lea rsp, stackTop
   493 000007F4 FC                  <1>     cld
   494 000007F5 E8AE070000          <1>     call printCRLF
   495 000007FA E868040000          <1>     call insertLine.cleanInsert ;We now reset the state of the memory
   496 000007FF E97CFCFFFF          <1>     jmp nextCmd     ;Now go to the next command in the command line!
   497                              <1> 
   498                              <1> i23h:
   499                              <1> ;^C handler. Reset the stack pointer and jump to get command
   500 00000804 488D25(40060000)    <1>     lea rsp, stackTop
   501 0000080B FC                  <1>     cld
   502 0000080C E897070000          <1>     call printCRLF
   503 00000811 E965FBFFFF          <1>     jmp getCommand  ;Now jump to get the command
   504                              <1> 
   505                              <1> 
   506                              <1> ;Remove before finishing!
   507                              <1> _unimplementedFunction:
   508 00000816 488D1508000000      <1>     lea rdx, .str
   509 0000081D B800090000          <1>     mov eax, 0900h
   510 00000822 CD21                <1>     int 21h
   511                              <1>     return
    13                              <2> %%_ret:
    14 00000824 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512 00000825 0D0A45584345505449- <1> .str:   db CR,LF,"EXCEPTION: UNIMPLEMENTED FUNCTION CALLED",CR,LF,"$"
   512 0000082E 4F4E3A20554E494D50- <1>
   512 00000837 4C454D454E54454420- <1>
   512 00000840 46554E4354494F4E20- <1>
   512 00000849 43414C4C45440D0A24  <1>
    36                                  %include "./Source/edfunc.asm"
     1                              <1> ;This is where the main user selectable routines are
     2                              <1> ;All arguments specified are signed words
     3                              <1> 
     4                              <1> ;Arguments above these limits will throw an error and the input
     5                              <1> ; will be discarded.
     6                              <1> 
     7                              <1> appendLines:
     8                              <1> ;If the file is not fully loaded in arena, allows you to load 
     9                              <1> ; the next portion into the arena. Essentially ignores the 
    10                              <1> ; input and always fills up to the 3/4 limit.
    11                              <1> ;--------------------------------------------
    12                              <1> ;Invoked by: [n]A (number of bytes to read)
    13                              <1> ;--------------------------------------------
    14 00000852 803D(D8010000)01    <1>     cmp byte [argCnt], 1
    15 00000859 0F8575080000        <1>     jne printComErr
    16 0000085F F605(05000000)FF    <1>     test byte [eofReached], -1
    17 00000866 0F8531010000        <1>     jnz .outEofStr   ;Print the eof reached string
    18 0000086C 488B15(28000000)    <1>     mov rdx, qword [eofPtr]
    19 00000873 803D(D9010000)00    <1>     cmp byte [arg1], 0          ;Arg <> 0 means we fill the arena
    20 0000087A 7509                <1>     jne .argGiven
    21 0000087C 483B15(16000000)    <1>     cmp rdx, qword [fillPtr]    ;Are we at/past the fill point?
    22                              <1>     retnb   ;Return if so!
    69                              <2> cret nb
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000883 73(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    23                              <1> .argGiven:
    24                              <1> ;rdx -> The start of the read in buffer
    25 00000885 488B0D(30000000)    <1>     mov rcx, qword [endOfArena] ;Fill the arena
    26 0000088C 4829D1              <1>     sub rcx, rdx        ;Get the number of bytes to read
    27 0000088F 0F8436080000        <1>     jz printMemErr      ;If we @ end of arena, free some space!!
    28 00000895 4989CA              <1>     mov r10, rcx        ;Use r10 to save byte count we want to read in
    29 00000898 0FB71D(3A000000)    <1>     movzx ebx, word [readHdl]
    30 0000089F B8003F0000          <1>     mov eax, 3F00h
    31 000008A4 CD21                <1>     int 21h
    32 000008A6 39C8                <1>     cmp eax, ecx
    33 000008A8 7426                <1>     je .notEof
    34                              <1>     ;Check this is really the eof (by trying to read one more byte)
    35 000008AA 50                  <1>     push rax    ;Save the byte count
    36 000008AB 4801C2              <1>     add rdx, rax
    37 000008AE B901000000          <1>     mov ecx, 1
    38 000008B3 B8003F0000          <1>     mov eax, 3F00h
    39 000008B8 CD21                <1>     int 21h
    40 000008BA 89C1                <1>     mov ecx, eax
    41 000008BC 58                  <1>     pop rax     ;Get original byte count back
    42 000008BD 0F8222080000        <1>     jc badReadFail
    43 000008C3 85C9                <1>     test ecx, ecx   ;Did we read bytes?
    44 000008C5 7507                <1>     jnz .notEofInc  ;If not, inc byte count!
    45 000008C7 C605(05000000)FF    <1>     mov byte [eofReached], -1   ;Else, set the flag!!
    46                              <1> .notEofInc:
    47 000008CE FFC0                <1>     inc eax
    48                              <1> .notEof:
    49 000008D0 4801C2              <1>     add rdx, rax        ;rax has the number of bytes we have read
    50 000008D3 89C1                <1>     mov ecx, eax        ;Save the byte count in ecx
    51 000008D5 488B3D(28000000)    <1>     mov rdi, qword [eofPtr] ;Point rdi to the start of the read in region
    52 000008DC 4989CB              <1>     mov r11, rcx            ;Save real byte count in r11 temporarily
    53 000008DF E877FDFFFF          <1>     call checkEOF
    54 000008E4 7507                <1>     jnz .noSetEof   ;Set the byte here if ZF=ZE on return
    55 000008E6 C605(05000000)FF    <1>     mov byte [eofReached], -1   ;to keep it all on the same level!
    56                              <1> .noSetEof:
    57 000008ED 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]  ;Get the line number to read in to
    58 000008F4 85DB                <1>     test ebx, ebx
    59 000008F6 7521                <1>     jnz .fndLine    ;If we are searching for line 0, go to the end
    60 000008F8 4889F8              <1>     mov rax, rdi
    61 000008FB 4801C8              <1>     add rax, rcx    ;Move the the end of the text we read in
    62 000008FE 483B05(16000000)    <1>     cmp rax, qword [fillPtr]
    63 00000905 7612                <1>     jbe .fndLine    ;If we are leq than fill point, scan for the lnnum  in bx!
    64                              <1>     ;Else we search for one line past the fillPtr at most
    65 00000907 4889C1              <1>     mov rcx, rax
    66 0000090A 488B3D(16000000)    <1>     mov rdi, qword [fillPtr]
    67 00000911 4829F9              <1>     sub rcx, rdi    ;Get the excess of bytes to scan for the line
    68 00000914 BB01000000          <1>     mov ebx, 1      ;Make sure we count only 1 line!
    69                              <1> .fndLine:
    70 00000919 31D2                <1>     xor edx, edx    ;Set the line counter to start at 0
    71 0000091B E8F2FCFFFF          <1>     call findLineCore   ;Returns al = LF, rdi -> either LF or first char after ecx
    72 00000920 3847FF              <1>     cmp byte [rdi - 1], al
    73 00000923 742F                <1>     je .lineOk
    74                              <1> ;Here we ran out of chars to scan through
    75 00000925 F605(05000000)FF    <1>     test byte [eofReached], -1
    76 0000092C 7510                <1>     jnz .findPrevLine   ;If not at EOF, and ran out of chars, go to prev line
    77                              <1>     ;Else, at EOF and ran out of chars, add a CRLF
    78 0000092E B80D0A0000          <1>     mov eax, CRLF   ;Store in the empty space pointed to by rdi
    79 00000933 66AB                <1>     stosw    
    80 00000935 4981C302000000      <1>     add r11, 2  ;Added two more chars to the count
    81 0000093C EB16                <1>     jmp short .lineOk
    82                              <1> .findPrevLine:
    83 0000093E FFCA                <1>     dec edx     ;Remember we have to dec the line number
    84 00000940 48FFCF              <1>     dec rdi     ;Point to the char previous to start searching at
    85 00000943 8B0D(06000000)      <1>     mov ecx, dword [arenaSize]  ;Get the size of the allocation to search thru
    86 00000949 FD                  <1>     std
    87 0000094A F2AE                <1>     repne scasb ;Scan for the LF in al
    88 0000094C FC                  <1>     cld
    89 0000094D 4881C702000000      <1>     add rdi, 2  ;Go to first char past it
    90                              <1> .lineOk:
    91 00000954 C6071A              <1>     mov byte [rdi], EOF ;Add the terminating EOF char here!
    92 00000957 4C89D9              <1>     mov rcx, r11    ;Get back the real byte count
    93 0000095A 48030D(0E000000)    <1>     add rcx, qword [memPtr] ;Get ptr to last byte we actually read in
    94 00000961 4829F9              <1>     sub rcx, rdi    ;Get the excess number of chars we added since reading in
    95 00000964 48873D(28000000)    <1>     xchg qword [eofPtr], rdi    ;Swap the old and new EOF char ptrs
    96 0000096B 4801CF              <1>     add rdi, rcx    ;Adjust file ptr by amount we read in but ignored
    97 0000096E 4885FF              <1>     test rdi, rdi
    98 00000971 741E                <1>     jz .noIgnore    ;We ignored no bytes read in, proceed
    99                              <1>     ;Else, we are at the previous line, so move file ptr there!
   100 00000973 53                  <1>     push rbx
   101 00000974 52                  <1>     push rdx
   102 00000975 4889FA              <1>     mov rdx, rdi
   103 00000978 48B9FFFFFFFFFFFFFF- <1>     mov rcx, -1
   103 00000981 FF                  <1>
   104 00000982 B801420000          <1>     mov eax, 4201h  ;Seek from current position by the amount in dx
   105 00000987 CD21                <1>     int 21h
   106 00000989 5A                  <1>     pop rdx
   107 0000098A 5B                  <1>     pop rbx
   108 0000098B 0F8254070000        <1>     jc badReadFail
   109                              <1> .noIgnore:
   110 00000991 39D3                <1>     cmp ebx, edx    ;Is the line number specified = line number we are at?
   111 00000993 7515                <1>     jne .checkEnd
   112 00000995 C605(05000000)00    <1>     mov byte [eofReached], 0    ;Reset byte if this is the case (adding new lines)
   113                              <1>     return
    13                              <2> %%_ret:
    14 0000099C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> .outEofStr:
   115 0000099D 488D15(47000000)    <1>     lea rdx, eofStr
   116 000009A4 E8F3050000          <1>     call printString
   117                              <1>     return
    13                              <2> %%_ret:
    14 000009A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .checkEnd:
   119 000009AA F605(05000000)FF    <1>     test byte [eofReached], -1
   120 000009B1 75EA                <1>     jnz .outEofStr
   121 000009B3 F605(64020000)FF    <1>     test byte [noAppendErr], -1 ;Ignore EOF errors on initial load!
   122                              <1>     retnz 
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000009BA 75(A9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   123 000009BC E90A070000          <1>     jmp printMemErr
   124                              <1> 
   125                              <1> copyLines:
   126                              <1> ;Duplicates a line or a range of lines to a position specifed 
   127                              <1> ;   (non-overlapping) 
   128                              <1> ;--------------------------------------------
   129                              <1> ;Invoked by: [line],[line],line[,count]C
   130                              <1> ;--------------------------------------------
   131 000009C1 E950FEFFFF          <1>     jmp _unimplementedFunction
   132                              <1> 
   133                              <1> deleteLines:
   134                              <1> ;Deletes one or a range of lines
   135                              <1> ;--------------------------------------------
   136                              <1> ;Invoked by: [line][,line]D
   137                              <1> ;--------------------------------------------
   138 000009C6 803D(D8010000)02    <1>     cmp byte [argCnt], 2
   139 000009CD 0F8701070000        <1>     ja printComErr
   140 000009D3 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   141 000009DA 85DB                <1>     test ebx, ebx
   142 000009DC 750E                <1>     jnz .notCur
   143 000009DE 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]
   144 000009E5 66891D(D9010000)    <1>     mov word [arg1], bx ;Store it explicitly for later
   145                              <1> .notCur:
   146 000009EC 0FB71D(DB010000)    <1>     movzx ebx, word [arg2]
   147 000009F3 85DB                <1>     test ebx, ebx
   148 000009F5 750E                <1>     jnz .goDel
   149 000009F7 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]     ;Use arg1 as the range end
   150 000009FE 66891D(DB010000)    <1>     mov word [arg2], bx
   151                              <1> .goDel:
   152 00000A05 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   153 00000A0C E880FBFFFF          <1>     call checkArgOrder  ;Now we check if our args are ok
   154 00000A11 E8CAFBFFFF          <1>     call findLine   ;If ZF=NZ, start of del not found, just return
   155                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000A16 75(A9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   156 00000A18 53                  <1>     push rbx    ;Save the line number
   157 00000A19 57                  <1>     push rdi    ;And pointer to it
   158 00000A1A 0FB71D(DB010000)    <1>     movzx ebx, word [arg2]
   159 00000A21 FFC3                <1>     inc ebx     ;Range so end at the line after
   160 00000A23 E8B8FBFFFF          <1>     call findLine   ;Get the end of the copy ptr
   161 00000A28 4889FE              <1>     mov rsi, rdi    ;Source chars from this line
   162 00000A2B 5F                  <1>     pop rdi
   163 00000A2C 5B                  <1>     pop rbx
   164 00000A2D 66891D(1E000000)    <1>     mov word [curLineNum], bx   ;Now update the line number
   165 00000A34 48893D(20000000)    <1>     mov qword [curLinePtr], rdi ;This is where we will be copying to
   166 00000A3B 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   167 00000A42 4829F1              <1>     sub rcx, rsi    ;Get the number of chars to copy up
   168 00000A45 FFC1                <1>     inc ecx         ;Add one char for the eof char itself
   169 00000A47 FC                  <1>     cld 
   170 00000A48 F3A4                <1>     rep movsb       ;Copy the whole file up
   171 00000A4A 48FFCF              <1>     dec rdi         ;Point to the EOF char itself
   172 00000A4D 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   173                              <1>     return
    13                              <2> %%_ret:
    14 00000A54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> 
   175                              <1> editLine:
   176                              <1> ;Displays a line and allows it to be edited
   177                              <1> ;--------------------------------------------
   178                              <1> ;Invoked by: [line]
   179                              <1> ;--------------------------------------------
   180 00000A55 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   181 00000A5C 0F8572060000        <1>     jne printComErr
   182 00000A62 48FF0D(D0010000)    <1>     dec qword [charPtr] ;Adjust ptr to point to the CR or ;
   183 00000A69 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]  ;Get the line number
   184 00000A70 85DB                <1>     test ebx, ebx
   185 00000A72 7509                <1>     jnz .notNext
   186                              <1>     ;If 0, means next line
   187 00000A74 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Get the current line number
   188 00000A7B FFC3                <1>     inc ebx ;and go to the next line
   189                              <1> .notNext:
   190 00000A7D E85EFBFFFF          <1>     call findLine   ;rdi points to the end of memory selected line
   191                              <1>     ;If we return with ZF set, we proceed because we found the line,
   192                              <1>     ; else we simply return!
   193 00000A82 668915(1E000000)    <1>     mov word [curLineNum], dx
   194 00000A89 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   195                              <1>     retnz   ;If the line specified was past the end, we return now
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000A90 75(54)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   196 00000A92 483B3D(28000000)    <1>     cmp rdi, qword [eofPtr]
   197                              <1>     rete    ;Return if these are equal!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000A99 74(54)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   198 00000A9B 4889FE              <1>     mov rsi, rdi    ;Save the current line ptr on the stack
   199 00000A9E 56                  <1>     push rsi
   200 00000A9F E872FAFFFF          <1>     call stufBuf    ;Stuff the line pointed to by rsi into the buffer
   201 00000AA4 5E                  <1>     pop rsi         ;Get back the curLinePtr in rsi
   202 00000AA5 8915(67030000)      <1>     mov dword [workLen], edx    ;Store the real length into the var
   203 00000AAB E87F050000          <1>     call printLine      
   204 00000AB0 E80B050000          <1>     call printLineNum
   205 00000AB5 488D15(65020000)    <1>     lea rdx, workLine
   206 00000ABC B8000A0000          <1>     mov eax, 0A00h  ;Edit magic woo
   207 00000AC1 CD21                <1>     int 21h
   208 00000AC3 E8E7040000          <1>     call printLF
   209 00000AC8 807A0100            <1>     cmp byte [rdx + 1], 0   ;If just a CR input, return with no edit!
   210                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000ACC 74(54)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   211 00000ACE 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the string portion immediately
   212 00000AD2 E873FAFFFF          <1>     call doCmdChar
   213 00000AD7 488B3D(20000000)    <1>     mov rdi, qword [curLinePtr] ;Point to the line we have edited
   214 00000ADE 0FB64A01            <1>     movzx ecx, byte [rdx + 1]   ;Get the adjusted string length in ecx
   215 00000AE2 8B15(67030000)      <1>     mov edx, dword [workLen]    ;Get the old line length in edx
   216 00000AE8 E9DBF9FFFF          <1>     jmp replaceLine
   217                              <1> 
   218                              <1> endEdit:
   219                              <1> ;Inserts a EOF char at the end of the file if one not already present
   220                              <1> ; renames the original file (if applicable) to have .bak ending and
   221                              <1> ; renames the working file to the name originally specified.
   222                              <1> ;--------------------------------------------
   223                              <1> ;Invoked by: E
   224                              <1> ;--------------------------------------------
   225 00000AED 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   226 00000AF4 0F85DA050000        <1>     jne printComErr
   227 00000AFA 803D(D9010000)00    <1>     cmp byte [arg1], 0
   228 00000B01 0F85BB050000        <1>     jne printArgError
   229 00000B07 F605(02000000)FF    <1>     test byte [roFlag], -1  ;If we are readonly, delete $$$ and quit
   230 00000B0E 0F8592020000        <1>     jnz quit.roQuit
   231 00000B14 C605(64020000)FF    <1>     mov byte [noAppendErr], -1  ;Suppress errors again
   232                              <1> .writeLp:
   233 00000B1B BBFFFFFFFF          <1>     mov ebx, -1             ;Write out max lines
   234 00000B20 E80E040000          <1>     call writeLines.goFindLine
   235 00000B25 F605(05000000)FF    <1>     test byte [eofReached], -1  ;Are we at EOF yet?
   236 00000B2C 7517                <1>     jnz .writeDone  ;If yes, we are done writing to disk
   237 00000B2E C605(D8010000)01    <1>     mov byte [argCnt], 1    ;Else we keep reading the file
   238 00000B35 66C705(D9010000)FF- <1>     mov word [arg1], -1     ;Now fill the arena with lines
   238 00000B3D FF                  <1>
   239 00000B3E E80FFDFFFF          <1>     call appendLines
   240 00000B43 EBD6                <1>     jmp short .writeLp      ;And write them out again
   241                              <1> .writeDone:
   242 00000B45 488B15(28000000)    <1>     mov rdx, qword [eofPtr] ;Now write out the EOF char to the file
   243 00000B4C B901000000          <1>     mov ecx, 1
   244 00000B51 0FB71D(3C000000)    <1>     movzx ebx, word [writeHdl]
   245 00000B58 B800400000          <1>     mov eax, 4000h
   246 00000B5D CD21                <1>     int 21h
   247 00000B5F 0FB71D(3A000000)    <1>     movzx ebx, word [readHdl]
   248 00000B66 B8003E0000          <1>     mov eax, 3E00h  ;Close the reading file!
   249 00000B6B CD21                <1>     int 21h
   250 00000B6D 0FB71D(3C000000)    <1>     movzx ebx, word [writeHdl]  ;Get the write handle
   251 00000B74 B8003E0000          <1>     mov eax, 3E00h  ;Close the temp file!
   252 00000B79 CD21                <1>     int 21h
   253 00000B7B F605(03000000)FF    <1>     test byte [newFileFlag], -1  ;If this is new file, skip this!
   254 00000B82 7522                <1>     jnz short .skipBkup
   255                              <1>     ;Now set the backup extension
   256 00000B84 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   257 00000B8B B842414B00          <1>     mov eax, "BAK"
   258 00000B90 AB                  <1>     stosd
   259 00000B91 488D15(3E000000)    <1>     lea rdx, pathspec
   260 00000B98 488D3D(BE000000)    <1>     lea rdi, bkupfile
   261 00000B9F B800560000          <1>     mov eax, 5600h
   262 00000BA4 CD21                <1>     int 21h
   263                              <1> .skipBkup:
   264 00000BA6 B824242400          <1>     mov eax, "$$$"  ;Always set this as triple dollar as this is saved name!
   265 00000BAB 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   266 00000BB2 AB                  <1>     stosd
   267 00000BB3 488D15(BE000000)    <1>     lea rdx, bkupfile
   268 00000BBA 488D3D(3E000000)    <1>     lea rdi, pathspec   ;Now name the temp file by the og name!
   269 00000BC1 B800560000          <1>     mov eax, 5600h
   270 00000BC6 CD21                <1>     int 21h
   271                              <1>     retToDOS errOk ;Let DOS do cleanup of memory allocations!
    94 00000BC8 B8004C0000          <2>  mov eax, 04C00h | %1
    95 00000BCD CD21                <2>  int 21h
   272                              <1> 
   273                              <1> insertLine:
   274                              <1> ;Inserts a line
   275                              <1> ;--------------------------------------------
   276                              <1> ;Invoked by: [line]I
   277                              <1> ;--------------------------------------------
   278 00000BCF 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   279 00000BD6 0F85F8040000        <1>     jne printComErr
   280 00000BDC 488D150AFCFFFF      <1>     lea rdx, i23hInsert ;Set to the insert handler
   281 00000BE3 B823250000          <1>     mov eax, 2523h
   282 00000BE8 CD21                <1>     int 21h
   283 00000BEA 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]  ;Get the line number
   284 00000BF1 85DB                <1>     test ebx, ebx
   285 00000BF3 7507                <1>     jnz .notNext
   286                              <1>     ;If 0, means next line
   287 00000BF5 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Get the current line number
   288                              <1> .notNext:
   289 00000BFC E8DFF9FFFF          <1>     call findLine   ;Set line number in dx and rdi -> Space in memory!
   290 00000C01 89D3                <1>     mov ebx, edx    ;Move the actual line number into ebx
   291 00000C03 488B15(30000000)    <1>     mov rdx, qword [endOfArena]
   292 00000C0A E89CF9FFFF          <1>     call makeSpace  ;Make space to insert new line!
   293                              <1> .inLp:
   294 00000C0F E8B6F9FFFF          <1>     call setLineVars
   295 00000C14 E8A7030000          <1>     call printLineNum
   296 00000C19 488D15(65020000)    <1>     lea rdx, workLine
   297 00000C20 B8000A0000          <1>     mov eax, 0A00h  ;Full on edit mode
   298 00000C25 CD21                <1>     int 21h
   299 00000C27 E883030000          <1>     call printLF
   300                              <1>     ;Check if the first char in the buffer is a EOF
   301 00000C2C 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the string portion immediately
   302 00000C30 803E1A              <1>     cmp byte [rsi], EOF         ;Apparent EDLIN behaviour, terminate insert so!
   303 00000C33 7432                <1>     je .cleanInsert
   304 00000C35 E810F9FFFF          <1>     call doCmdChar              ;Preserves rdi, the curLinePtr
   305 00000C3A 0FB64EFF            <1>     movzx ecx, byte [rsi - 1]   ;Get the number of chars typed in
   306 00000C3E 4889FA              <1>     mov rdx, rdi                
   307 00000C41 FFC1                <1>     inc ecx                     ;Make space for terminating LF too
   308 00000C43 4801CA              <1>     add rdx, rcx                ;Check if we will go out of bounds
   309 00000C46 483B15(30000000)    <1>     cmp rdx, qword [endOfArena]
   310 00000C4D 730E                <1>     jae .inBad
   311 00000C4F 4839EA              <1>     cmp rdx, rbp                ;Are we past file Eof?
   312 00000C52 7309                <1>     jae .inBad                  ;Jump if so
   313 00000C54 F3A4                <1>     rep movsb                   ;Else copy from edit line to space made
   314 00000C56 B00A                <1>     mov al, LF
   315 00000C58 AA                  <1>     stosb                       ;Store the line feed too
   316 00000C59 FFC3                <1>     inc ebx                     ;Go to next line :)
   317 00000C5B EBB2                <1>     jmp short .inLp
   318                              <1> .inBad:
   319 00000C5D E805000000          <1>     call .cleanInsert
   320 00000C62 E964040000          <1>     jmp printMemErr
   321                              <1> .cleanInsert: 
   322                              <1> ;Move the lines after the insertion point back to where they need to be :)
   323 00000C67 488B35(28000000)    <1>     mov rsi, qword [eofPtr] 
   324 00000C6E 488B3D(20000000)    <1>     mov rdi, qword [curLinePtr]
   325 00000C75 488B0D(30000000)    <1>     mov rcx, qword [endOfArena]
   326 00000C7C 4829F1              <1>     sub rcx, rsi    ;Get the number of bytes to copy high again
   327 00000C7F 48FFC6              <1>     inc rsi         ;Go to char past EOF to source chars from
   328 00000C82 F3A4                <1>     rep movsb
   329 00000C84 48FFCF              <1>     dec rdi         ;Go back to the EOF char itself
   330 00000C87 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   331 00000C8E 488D156FFBFFFF      <1>     lea rdx, i23h
   332 00000C95 B823250000          <1>     mov eax, 2523h  ;Set Interrupt handler for Int 23h
   333 00000C9A CD21                <1>     int 21h
   334                              <1>     return
    13                              <2> %%_ret:
    14 00000C9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> 
   336                              <1> listLines:
   337                              <1> ;Prints a line or a number of lines.
   338                              <1> ;Defaults to from current line print 23 lines.
   339                              <1> ;Doesnt change the current line!
   340                              <1> ;--------------------------------------------
   341                              <1> ;Invoked by: [line][,line]L
   342                              <1> ;--------------------------------------------
   343 00000C9D 803D(D8010000)02    <1>     cmp byte [argCnt], 2
   344 00000CA4 0F872A040000        <1>     ja printComErr
   345 00000CAA 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   346 00000CB1 85DB                <1>     test ebx, ebx
   347 00000CB3 7514                <1>     jnz .notCur ;If not the default, we do as told
   348                              <1>     ;Else, default behaviour
   349 00000CB5 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]
   350 00000CBC 81EB0B000000        <1>     sub ebx, 11 ;Start printing 11 lines before the current line!
   351 00000CC2 7705                <1>     ja .notCur  
   352 00000CC4 BB01000000          <1>     mov ebx, 1
   353                              <1> .notCur:
   354 00000CC9 E812F9FFFF          <1>     call findLine
   355                              <1>     retnz   ;Return if the line not found!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000CCE 75(9C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   356 00000CD0 4889FE              <1>     mov rsi, rdi
   357 00000CD3 0FB73D(DB010000)    <1>     movzx edi, word [arg2]  ;Get the last line to print
   358 00000CDA FFC7                <1>     inc edi
   359 00000CDC 29DF                <1>     sub edi, ebx            ;Get the difference!
   360 00000CDE 0F8750030000        <1>     ja printLines   
   361 00000CE4 BF17000000          <1>     mov edi, 23     ;Else the default
   362 00000CE9 E946030000          <1>     jmp printLines  ;Return through printLines!
   363                              <1> 
   364                              <1> pageLines:
   365                              <1> ;Prints a page of lines
   366                              <1> ;Defaults to from current line to print 23 lines
   367                              <1> ;Changes the current line to the last line printed!
   368                              <1> ;--------------------------------------------
   369                              <1> ;Invoked by: [line][,line]P
   370                              <1> ;--------------------------------------------
   371 00000CEE 803D(D8010000)02    <1>     cmp byte [argCnt], 2
   372 00000CF5 0F87D9030000        <1>     ja printComErr
   373 00000CFB 31DB                <1>     xor ebx, ebx    ;Set the pointer to the end of the file firstly
   374 00000CFD E8DEF8FFFF          <1>     call findLine   
   375                              <1>     ;Use r10 to keep track of the last line in the file that we will set
   376 00000D02 4989D2              <1>     mov r10, rdx
   377 00000D05 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   378 00000D0C 85DB                <1>     test ebx, ebx
   379 00000D0E 7511                <1>     jnz .notCur
   380 00000D10 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]
   381 00000D17 81FB01000000        <1>     cmp ebx, 1  ;If the first line is 1, keep it there
   382 00000D1D 7402                <1>     je .notCur
   383 00000D1F FFC3                <1>     inc ebx     ;Else go to the line after
   384                              <1> .notCur:
   385 00000D21 4C39D3              <1>     cmp rbx, r10
   386                              <1>     reta    ;If we specify past the last line, do nothing
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000D24 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000D26 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   387 00000D27 0FB715(DB010000)    <1>     movzx edx, word [arg2]  
   388 00000D2E 85D2                <1>     test edx, edx   ;Did the user give what line to stop printing on?
   389 00000D30 7508                <1>     jnz .arg2Given 
   390                              <1> ;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
   391                              <1> ;Here is where the screen width is computed when we do dynamic 
   392                              <1> ; screen size stuff
   393 00000D32 89DA                <1>     mov edx, ebx
   394 00000D34 81C216000000        <1>     add edx, 22     ;Else its current line + 23
   395                              <1> ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   396                              <1> .arg2Given:
   397 00000D3A FFC2                <1>     inc edx         ;Get that last line
   398 00000D3C 4C39D2              <1>     cmp rdx, r10    ;Is it past the end of the file?
   399 00000D3F 7603                <1>     jbe .okRange
   400 00000D41 4C89D2              <1>     mov rdx, r10    ;Else, use r10 as the last line
   401                              <1> .okRange:
   402 00000D44 52                  <1>     push rdx        ;Save the end line
   403 00000D45 53                  <1>     push rbx        ;and the start line
   404 00000D46 89D3                <1>     mov ebx, edx    ;Now setup the pointers to point to the last line
   405 00000D48 FFCB                <1>     dec ebx         
   406 00000D4A E891F8FFFF          <1>     call findLine   ;Get the actual line number in dx and ptr in rdi
   407 00000D4F 668915(1E000000)    <1>     mov word [curLineNum], dx
   408 00000D56 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   409 00000D5D 5B                  <1>     pop rbx         ;Get back the actual start line
   410 00000D5E E87DF8FFFF          <1>     call findLine   ;Now find the first line!
   411 00000D63 4889FE              <1>     mov rsi, rdi    ;This is the source of the copy
   412 00000D66 5F                  <1>     pop rdi         ;Get the end line count in edi
   413 00000D67 29DF                <1>     sub edi, ebx    ;Get the number of lines to print in edi
   414 00000D69 E9C6020000          <1>     jmp printLines  ;Return through printLines!
   415                              <1> 
   416                              <1> moveLines:
   417                              <1> ;Moves a block of lines elsewhere (non overlapping moves only)
   418                              <1> ;--------------------------------------------
   419                              <1> ;Invoked by: [line][line],lineM
   420                              <1> ;--------------------------------------------
   421 00000D6E E9A3FAFFFF          <1>     jmp _unimplementedFunction
   422                              <1> 
   423                              <1> quit:
   424                              <1> ;Quits EDLIN, not saving work and deleting working file.
   425                              <1> ;--------------------------------------------
   426                              <1> ;Invoked by: Q
   427                              <1> ;--------------------------------------------
   428 00000D73 803D(02000000)FF    <1>     cmp byte [roFlag], -1   ;If the flag is clear, dont prompt, just quit.
   429 00000D7A 742A                <1>     je short .roQuit
   430 00000D7C 488D15(47020000)    <1>     lea rdx, exitQuit
   431 00000D83 B800090000          <1>     mov eax, 0900h
   432 00000D88 CD21                <1>     int 21h
   433 00000D8A B8010C0000          <1>     mov eax, 0C01h  ;Flush input buffer and read a single char from stdin
   434 00000D8F CD21                <1>     int 21h
   435 00000D91 0FB6D8              <1>     movzx ebx, al
   436 00000D94 81E3DF000000        <1>     and ebx, 0DFh    ;Convert to upper case
   437 00000D9A 81FB59000000        <1>     cmp ebx, "Y"
   438 00000DA0 0F8502020000        <1>     jne printCRLF   ;Print CRLF and return via that return instruction
   439                              <1>     ;Delete the working file
   440                              <1> .roQuit:
   441 00000DA6 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   442 00000DAD B824242400          <1>     mov eax, "$$$"
   443 00000DB2 AB                  <1>     stosd
   444 00000DB3 488D15(BE000000)    <1>     lea rdx, wkfile
   445 00000DBA B800410000          <1>     mov eax, 4100h  ;Delete the file
   446 00000DBF CD21                <1>     int 21h
   447                              <1>     retToDOS errOk
    94 00000DC1 B8004C0000          <2>  mov eax, 04C00h | %1
    95 00000DC6 CD21                <2>  int 21h
   448                              <1> 
   449                              <1> replaceText:
   450                              <1> ;Replaces all matching strings with specified string (NO REGEX)
   451                              <1> ;--------------------------------------------
   452                              <1> ;Invoked by: [line][,line][?]R[string]<EOF>[string]
   453                              <1> ;--------------------------------------------
   454 00000DC8 E949FAFFFF          <1>     jmp _unimplementedFunction
   455                              <1> 
   456                              <1> searchText:
   457                              <1> ;Searches text for a string
   458                              <1> ;--------------------------------------------
   459                              <1> ;Invoked by: [line][,line][?]S[string]
   460                              <1> ;--------------------------------------------
   461 00000DCD E944FAFFFF          <1>     jmp _unimplementedFunction
   462                              <1> 
   463                              <1> transferLines:
   464                              <1> ;Writes the lines specified to the specified file
   465                              <1> ;--------------------------------------------
   466                              <1> ;Invoked by: [line]T[d:]filename
   467                              <1> ;--------------------------------------------
   468 00000DD2 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   469 00000DD9 0F85F5020000        <1>     jne printComErr
   470 00000DDF E8E5F9FFFF          <1>     call skipSpaces ;Move rsi to the first char of the xfrspec
   471 00000DE4 48FFCE              <1>     dec rsi         ;Go to the first char
   472 00000DE7 488D15(6D040000)    <1>     lea rdx, xfrName
   473 00000DEE 4889D7              <1>     mov rdi, rdx
   474                              <1> .nameCp:
   475 00000DF1 AC                  <1>     lodsb
   476 00000DF2 3C20                <1>     cmp al, SPC
   477 00000DF4 740F                <1>     je .cpOk
   478 00000DF6 3C09                <1>     cmp al, TAB
   479 00000DF8 740B                <1>     je .cpOk
   480 00000DFA 3C0D                <1>     cmp al, CR
   481 00000DFC 7407                <1>     je .cpOk
   482 00000DFE 3C3B                <1>     cmp al, ";"
   483 00000E00 7403                <1>     je .cpOk
   484 00000E02 AA                  <1>     stosb
   485 00000E03 EBEC                <1>     jmp short .nameCp
   486                              <1> .cpOk:
   487 00000E05 C60700              <1>     mov byte [rdi], 0   ;Store terminating null
   488 00000E08 48FFCE              <1>     dec rsi             ;Now go to the char which terminated the copy
   489 00000E0B 488935(D0010000)    <1>     mov qword [charPtr], rsi    ;And store this as the new continuation ptr
   490 00000E12 B8003D0000          <1>     mov eax, 3D00h      ;Open file pointed to by rdx for reading
   491 00000E17 CD21                <1>     int 21h
   492 00000E19 731B                <1>     jnc .fileOpen
   493 00000E1B 663D0200            <1>     cmp ax, errFnf
   494 00000E1F 488D15(8D000000)    <1>     lea rdx, badFindStr ;String for if the file is not found
   495 00000E26 488D1D(71000000)    <1>     lea rbx, badDrvStr  ;Else just say drive or fnf!
   496 00000E2D 480F45D3            <1>     cmovne rdx, rbx
   497 00000E31 E9A5020000          <1>     jmp printErr    ;Print the string in rdx
   498                              <1> .fileOpen:
   499 00000E36 668905(ED040000)    <1>     mov word [xfrHdl], ax   ;Save the handle
   500                              <1>     ;Transfer lines works like insert lines, in that it is inserting lines
   501                              <1>     ; but from a separate file. We therefore set up a custom ^C handler 
   502                              <1>     ; and cleanup like insert if it is invoked!
   503 00000E3D B823250000          <1>     mov eax, 2523h  ;Setup int 23h for xfr
   504 00000E42 488D1596F9FFFF      <1>     lea rdx, i23hXfr
   505 00000E49 CD21                <1>     int 21h
   506 00000E4B 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   507 00000E52 85DB                <1>     test ebx, ebx
   508 00000E54 7507                <1>     jnz .notCur
   509 00000E56 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Get the current line number ptr
   510                              <1> .notCur:
   511 00000E5D E87EF7FFFF          <1>     call findLine   ;Get actual line number in dx, and ptr in rdi
   512 00000E62 89D3                <1>     mov ebx, edx
   513 00000E64 488B15(30000000)    <1>     mov rdx, qword [endOfArena]     ;Copy to the end of the arena
   514 00000E6B E83BF7FFFF          <1>     call makeSpace  ;And jiggle it over
   515 00000E70 488B15(20000000)    <1>     mov rdx, qword [curLinePtr] ;Read data into here now
   516 00000E77 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   517 00000E7E 29D1                <1>     sub ecx, edx    ;Get the number of chars of space we have to read in
   518 00000E80 51                  <1>     push rcx
   519 00000E81 B8003F0000          <1>     mov eax, 3F00h
   520 00000E86 0FB71D(ED040000)    <1>     movzx ebx, word [xfrHdl]
   521 00000E8D CD21                <1>     int 21h
   522 00000E8F 5A                  <1>     pop rdx     ;Get the count back into rdx
   523 00000E90 89C1                <1>     mov ecx, eax    ;Move the count into ecx
   524 00000E92 39C2                <1>     cmp edx, eax
   525 00000E94 7713                <1>     ja .fullXfr
   526                              <1>     ;We copied exactly the size of the arena, assume this means the whole 
   527                              <1>     ; file may not have been copied. We still proceed though
   528 00000E96 488D15(93010000)    <1>     lea rdx, badMergeStr
   529 00000E9D 488B0D(20000000)    <1>     mov rcx, qword [curLinePtr]
   530 00000EA4 E915000000          <1>     jmp .endXfr
   531                              <1> .fullXfr:
   532 00000EA9 48030D(20000000)    <1>     add rcx, qword [curLinePtr] ;Turn into offset from start of line
   533 00000EB0 4889CE              <1>     mov rsi, rcx
   534 00000EB3 48FFCE              <1>     dec rsi ;Go to the last char we read in
   535 00000EB6 AC                  <1>     lodsb
   536 00000EB7 3C1A                <1>     cmp al, EOF
   537 00000EB9 7503                <1>     jne .endXfr
   538 00000EBB 48FFC9              <1>     dec rcx ;Drop a byte
   539                              <1> .endXfr:
   540 00000EBE 4889CF              <1>     mov rdi, rcx        ;Copy to the curLinePtr pos
   541 00000EC1 488B35(28000000)    <1>     mov rsi, qword [eofPtr]
   542 00000EC8 48FFC6              <1>     inc rsi             ;Start copying from the stored data past the eofPtr
   543 00000ECB 488B0D(30000000)    <1>     mov rcx, qword [endOfArena]
   544 00000ED2 4829F1              <1>     sub rcx, rsi
   545 00000ED5 FFC1                <1>     inc ecx             ;Add EOF char to the count
   546 00000ED7 F3A4                <1>     rep movsb
   547 00000ED9 48FFCF              <1>     dec rdi             ;Go back to the EOF char
   548 00000EDC 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   549 00000EE3 0FB71D(ED040000)    <1>     movzx ebx, word [xfrHdl]
   550 00000EEA B8003E0000          <1>     mov eax, 3E00h      ;Close handle!
   551 00000EEF CD21                <1>     int 21h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00000EF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> 
   554                              <1> writeLines:
   555                              <1> ;Writes the current arena to disk. If no 
   556                              <1> ; n specified, EDLIN writes lines until
   557                              <1> ; 1/4 of the arena is free.
   558                              <1> ;--------------------------------------------
   559                              <1> ;Invoked by: [n]W (number of bytes to write)
   560                              <1> ;--------------------------------------------
   561                              <1> ;When invoked, must delete the backup if it not already deleted.
   562 00000EF2 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   563 00000EF9 0F87D5010000        <1>     ja printComErr
   564 00000EFF 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   565 00000F06 85DB                <1>     test ebx, ebx
   566 00000F08 7529                <1>     jnz .goFindLine
   567                              <1>     ;If 0, means, write everything from 1/4 onwards
   568 00000F0A 8B0D(0A000000)      <1>     mov ecx, dword [freeCnt]    ;Get the count of 1/4 of the arena
   569 00000F10 488B3D(28000000)    <1>     mov rdi, qword [eofPtr]
   570 00000F17 4829CF              <1>     sub rdi, rcx    ;Move rdi back by a quarter
   571                              <1>     retbe           ;If the result is leq 0, fail (never will happen)
    81                              <2> cret be
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000F1A 76(F1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   572 00000F1C 483B3D(0E000000)    <1>     cmp rdi, qword [memPtr] ;Are we pointing before the start of the arena
   573                              <1>     retbe           ;Return as we have nothing to write!
    81                              <2> cret be
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000F23 76(F1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   574                              <1>     ;rdi now points back by a quarter
   575 00000F25 31D2                <1>     xor edx, edx    ;Init to "line 0"
   576 00000F27 BB01000000          <1>     mov ebx, 1      ;Find the end of the line we are
   577 00000F2C E8E1F6FFFF          <1>     call findLineCore
   578 00000F31 EB07                <1>     jmp short .prepWrite
   579                              <1> .goFindLine:
   580 00000F33 FFC3                <1>     inc ebx     ;Find line 1 (user said 0, this means 1 for us!)
   581 00000F35 E8A6F6FFFF          <1>     call findLine
   582                              <1> .prepWrite:
   583 00000F3A E890F7FFFF          <1>     call delBkup    ;Delete the backup, all regs preserved
   584 00000F3F 4889F9              <1>     mov rcx, rdi    ;rdi points to up to where to do the write
   585 00000F42 488B15(0E000000)    <1>     mov rdx, qword [memPtr] ;Start writing from here
   586 00000F49 4829D1              <1>     sub rcx, rdx    ;Get the byte offset into the arena
   587 00000F4C 0FB71D(3C000000)    <1>     movzx ebx, word [writeHdl]
   588 00000F53 B800400000          <1>     mov eax, 4000h
   589 00000F58 CD21                <1>     int 21h
   590 00000F5A 0F8298010000        <1>     jc fullDiskFail
   591 00000F60 39C8                <1>     cmp eax, ecx
   592 00000F62 0F8590010000        <1>     jne fullDiskFail
   593                              <1>     ;Now pull up the rest of the arena and reset the internal line numbers
   594 00000F68 4889FE              <1>     mov rsi, rdi    ;Source chars from here
   595 00000F6B 488B3D(0E000000)    <1>     mov rdi, qword [memPtr]
   596 00000F72 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   597 00000F79 66C705(1E000000)01- <1>     mov word [curLineNum], 1    ;Go back to line 1 again
   597 00000F81 00                  <1>
   598 00000F82 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   599 00000F89 4829F1              <1>     sub rcx, rsi    ;Get the number of bytes left in the arena to pull up
   600 00000F8C FFC1                <1>     inc ecx         ;Copy the EOF marker too
   601 00000F8E FC                  <1>     cld 
   602 00000F8F F3A4                <1>     rep movsb
   603 00000F91 48FFCF              <1>     dec rdi         ;Go back to EOF
   604 00000F94 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   605                              <1>     return
    13                              <2> %%_ret:
    14 00000F9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                                  %include "./Source/edprn.asm"
     1                              <1> ;---------------------
     2                              <1> ; Print Routines here
     3                              <1> ;---------------------
     4                              <1> printString:
     5 00000F9C B800090000          <1>     mov eax, 0900h
     6 00000FA1 CD21                <1>     int 21h
     7                              <1>     return
    13                              <2> %%_ret:
    14 00000FA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     8                              <1> ;----------------------------------------
     9                              <1> ; These functions print individual chars
    10                              <1> ;----------------------------------------
    11                              <1> printSpace:
    12 00000FA4 B020                <1>     mov al, SPC
    13 00000FA6 EB09                <1>     jmp short printChar
    14                              <1> printCRLF:
    15                              <1> ;Prints CRLF
    16 00000FA8 B00D                <1>     mov al, CR
    17 00000FAA E802000000          <1>     call printChar
    18                              <1> printLF:
    19 00000FAF B00A                <1>     mov al, LF
    20                              <1> printChar:
    21                              <1> ;Input: al = Char to print
    22 00000FB1 50                  <1>     push rax    ;To preserve the rest of eax
    23 00000FB2 52                  <1>     push rdx
    24 00000FB3 0FB6D0              <1>     movzx edx, al
    25 00000FB6 B800020000          <1>     mov eax, 0200h
    26 00000FBB CD21                <1>     int 21h
    27 00000FBD 5A                  <1>     pop rdx
    28 00000FBE 58                  <1>     pop rax
    29                              <1>     return
    13                              <2> %%_ret:
    14 00000FBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> ;------------------------------------------------
    32                              <1> ; These functions are specialised print routines
    33                              <1> ;------------------------------------------------
    34                              <1> printLineNum:
    35                              <1> ;Prints the line number in bx
    36                              <1> ;Input: bx = Line number to print
    37 00000FC0 E8DFFFFFFF          <1>     call printSpace
    38 00000FC5 E816000000          <1>     call printNum
    39 00000FCA B03A                <1>     mov al, ":"
    40 00000FCC E8E0FFFFFF          <1>     call printChar
    41 00000FD1 663B1D(1E000000)    <1>     cmp bx, word [curLineNum]
    42 00000FD8 B020                <1>     mov al, SPC
    43 00000FDA 75D5                <1>     jne printChar
    44 00000FDC B02A                <1>     mov al, "*"
    45 00000FDE EBD1                <1>     jmp short printChar
    46                              <1> 
    47                              <1> printNum:
    48                              <1> ;Takes in bx a binary word and prints the ASCII value
    49                              <1> ; with leading blanks suppressed.
    50                              <1> ;Trashes eax, ecx and edx only
    51 00000FE0 55                  <1>     push rbp
    52 00000FE1 31ED                <1>     xor ebp, ebp    ;If not zero, stop suppressing leading zeros
    53 00000FE3 0FB7D3              <1>     movzx edx, bx   ;Init with value in edx
    54                              <1> ;Do 10000's
    55 00000FE6 B910270000          <1>     mov ecx, 10000
    56 00000FEB E827000000          <1>     call .doCompute
    57                              <1> ;Do 1000's
    58 00000FF0 B9E8030000          <1>     mov ecx, 1000
    59 00000FF5 E81D000000          <1>     call .doCompute
    60                              <1> ;Do 100's
    61 00000FFA B964000000          <1>     mov ecx, 100
    62 00000FFF E813000000          <1>     call .doCompute
    63                              <1> ;Do 10's
    64 00001004 B90A000000          <1>     mov ecx, 10
    65 00001009 E809000000          <1>     call .doCompute
    66                              <1> ;Do 1's, mild optimisation to avoid div move the remainder directly
    67 0000100E 89D0                <1>     mov eax, edx    ;Remainder in edx
    68 00001010 E808000000          <1>     call .printDig  ;Print the value in eax
    69                              <1> ;Exit
    70 00001015 5D                  <1>     pop rbp
    71                              <1>     return
    13                              <2> %%_ret:
    14 00001016 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> .doCompute:
    73                              <1> ;Input: ecx = Divisor for place value
    74                              <1> ;       edx = Remainder left to divide
    75 00001017 89D0                <1>     mov eax, edx    ;Moves the prev. remainder into eax for dividing
    76 00001019 31D2                <1>     xor edx, edx    
    77 0000101B F7F1                <1>     div ecx         
    78                              <1> .printDig:
    79                              <1> ;Now print the digit in al, the quotient. edx has the remainder
    80 0000101D 85ED                <1>     test ebp, ebp
    81 0000101F 750A                <1>     jnz .pDigOk
    82 00001021 85C0                <1>     test eax, eax   ;Is ebp = 0 and value to print 0? 
    83 00001023 0F847BFFFFFF        <1>     jz printSpace   ;If so, print a space char (retz for no suppression)
    84 00001029 FFCD                <1>     dec ebp         ;Else, now set ebp and print al
    85                              <1> .pDigOk:
    86 0000102B 0430                <1>     add al, "0"     ;Convert into an ASCII value
    87 0000102D EB82                <1>     jmp short printChar   ;Return through printchar
    88                              <1> 
    89                              <1> printLine:
    90                              <1> ;Prints a single line
    91 0000102F BF01000000          <1>     mov edi, 1  ;Print a single line
    92                              <1> printLines:
    93                              <1> ;Prints many lines in EDLIN fashion. All regs trashed.
    94                              <1> ;Input:
    95                              <1> ;   bx = Line number offset to keep track of printing
    96                              <1> ;   rsi -> Ptr to start printing from
    97                              <1> ;   edi = Number of lines to print. Used as a word!
    98                              <1> ;Output:
    99                              <1> ;   bx = Last line number printed
   100 00001034 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   101 0000103B 4829F1              <1>     sub rcx, rsi
   102                              <1>     retz    ;If we are pointing to the eofPtr, nothing to print, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000103E 74(16)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   103                              <1>     ;Now ecx = Number of chars to print!
   104                              <1> ;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
   105                              <1> ; Get screen attribs here for controlled printing
   106 00001040 89FA                <1>     mov edx, edi    ;Save number of lines to print in edx
   107                              <1> ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   108                              <1> .freshLine:
   109 00001042 51                  <1>     push rcx
   110 00001043 52                  <1>     push rdx
   111 00001044 E877FFFFFF          <1>     call printLineNum   ;Save ecx and edx as these are trashed!
   112 00001049 5A                  <1>     pop rdx
   113 0000104A 59                  <1>     pop rcx
   114 0000104B 488D3D(6B030000)    <1>     lea rdi, spareLine
   115                              <1> .goLine:
   116                              <1> ;Now we read the line into the spare buffer and echo each char one by one
   117                              <1> ;ecx = Number of chars to print
   118                              <1> ;edx = Number of lines we are printing
   119 00001052 AC                  <1>     lodsb
   120 00001053 55                  <1>     push rbp
   121 00001054 488D2D(69040000)    <1>     lea rbp, spareLine + 254
   122 0000105B 4839EF              <1>     cmp rdi, rbp
   123 0000105E 5D                  <1>     pop rbp
   124 0000105F 731B                <1>     jae .goDone
   125 00001061 3C20                <1>     cmp al, SPC
   126 00001063 7316                <1>     jae .store  ;If a normal char print it
   127                              <1>     ;Pick off LF, CR and TAB as special chars. Everything else is a ctrl char!
   128 00001065 3C0A                <1>     cmp al, LF 
   129 00001067 7412                <1>     je .store
   130 00001069 3C0D                <1>     cmp al, CR
   131 0000106B 740E                <1>     je .store
   132 0000106D 3C09                <1>     cmp al, TAB
   133 0000106F 740A                <1>     je .store
   134 00001071 B45E                <1>     mov ah, "^"
   135 00001073 0C40                <1>     or al, 40h  ;Convert to UC
   136 00001075 86C4                <1>     xchg al, ah
   137 00001077 66AB                <1>     stosw   ;Store the pair of chars
   138 00001079 EB01                <1>     jmp short .goDone
   139                              <1> .store:
   140 0000107B AA                  <1>     stosb
   141                              <1> .goDone:
   142 0000107C 3C0A                <1>     cmp al, LF  ;If not a line feed yet, keep going
   143 0000107E 7404                <1>     je .lfFnd   ;Else, we are done!
   144 00001080 FFC9                <1>     dec ecx     ;One less char to deal with
   145 00001082 75CE                <1>     jnz .goLine
   146                              <1> .lfFnd:
   147 00001084 FFC9                <1>     dec ecx     ;Drop the final char on the line too!
   148 00001086 807FFF0A            <1>     cmp byte [rdi - 1], LF  ;Was the last char a LF?
   149 0000108A 740C                <1>     je .okLine
   150 0000108C 807FFF0D            <1>     cmp byte [rdi - 1], CR  ;Was the last char a CR?
   151 00001090 7403                <1>     je .putLF
   152 00001092 B00D                <1>     mov al, CR
   153 00001094 AA                  <1>     stosb
   154                              <1> .putLF:
   155 00001095 B00A                <1>     mov al, LF
   156 00001097 AA                  <1>     stosb
   157                              <1> .okLine:
   158 00001098 C60700              <1>     mov byte [rdi], 0   ;Null terminate the line for printing
   159 0000109B E80C000000          <1>     call .prnChars  ;Print the chars in the buffer
   160 000010A0 67E31E              <1>     jecxz .exit     ;If we have no more chars to print, exit!
   161 000010A3 FFC3                <1>     inc ebx         ;Goto next line number
   162 000010A5 FFCA                <1>     dec edx         ;One less line to print!
   163 000010A7 7599                <1>     jnz .freshLine  ;If this is non-zero, keep going!
   164 000010A9 FFCB                <1>     dec ebx         ;We done the last line
   165                              <1>     return
    13                              <2> %%_ret:
    14 000010AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .prnChars:
   167 000010AC 56                  <1>     push rsi
   168 000010AD 488D35(6B030000)    <1>     lea rsi, spareLine  ;Now print the line we just made!
   169                              <1> .pcLp:
   170 000010B4 AC                  <1>     lodsb
   171 000010B5 84C0                <1>     test al, al
   172 000010B7 7407                <1>     jz .pcExit
   173 000010B9 E8F3FEFFFF          <1>     call printChar  ;Preserves dx
   174 000010BE EBF4                <1>     jmp short .pcLp
   175                              <1> .pcExit:
   176 000010C0 5E                  <1>     pop rsi
   177                              <1> .exit:
   178                              <1>     return
    13                              <2> %%_ret:
    14 000010C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./Source/ederr.asm"
     1                              <1> ;---------------------
     2                              <1> ; Error Routines here
     3                              <1> ;---------------------
     4                              <1> 
     5                              <1> printArgError:
     6 000010C2 488D15(58010000)    <1>     lea rdx, badInput
     7 000010C9 EB10                <1>     jmp short printErr
     8                              <1> printMemErr:
     9 000010CB 488D15(7B010000)    <1>     lea rdx, badMemFull
    10 000010D2 EB07                <1>     jmp short printErr
    11                              <1> printComErr:
    12                              <1> ;JUMP to this procedure and it jumps back to
    13                              <1> ; the command loop resetting the stack!
    14 000010D4 488D15(58010000)    <1>     lea rdx, badInput
    15                              <1> printErr:
    16 000010DB E8BCFEFFFF          <1>     call printString
    17 000010E0 E996F2FFFF          <1>     jmp getCommand
    18                              <1> 
    19                              <1> ;The below "Fail" units are a class of Edlin terminating functions
    20                              <1> badReadFail:
    21 000010E5 488D15(21020000)    <1>     lea rdx, badRead
    22 000010EC E8ABFEFFFF          <1>     call printString
    23                              <1>     retToDOS errBadRead
    94 000010F1 B8034C0000          <2>  mov eax, 04C00h | %1
    95 000010F6 CD21                <2>  int 21h
    24                              <1> 
    25                              <1> fullDiskFail:
    26 000010F8 488D15(01020000)    <1>     lea rdx, badDskFull ;Write disk full error, but return to prompt
    27 000010FF E898FEFFFF          <1>     call printString
    28                              <1>     retToDOS errDskFull
    94 00001104 B8024C0000          <2>  mov eax, 04C00h | %1
    95 00001109 CD21                <2>  int 21h
    29                              <1> 
    39                                  Segment .data align=1 follows=.text 
    40                                  %include "./Data/eddata.asm"
     1                              <1> ;Initialised data goes here :)
     2                              <1> 
     3                              <1> ;The following three tables are connected. Don't jiggle!
     4                              <1> cmdLetterTable:
     5 00000000 0D3B41434445494C50- <1>     db CR,";ACDEILPMQRSTW"
     5 00000009 4D5152535457        <1>
     6                              <1>     cmdLetterTableL equ $ - cmdLetterTable
     7                              <1> cmdFcnTable:
     8 0000000F (460A)              <1>     dw editLine - cmdFcnTable
     9 00000011 (460A)              <1>     dw editLine - cmdFcnTable
    10 00000013 (4308)              <1>     dw appendLines - cmdFcnTable
    11 00000015 (B209)              <1>     dw copyLines - cmdFcnTable
    12 00000017 (B709)              <1>     dw deleteLines - cmdFcnTable
    13 00000019 (DE0A)              <1>     dw endEdit - cmdFcnTable
    14 0000001B (C00B)              <1>     dw insertLine - cmdFcnTable
    15 0000001D (8E0C)              <1>     dw listLines - cmdFcnTable
    16 0000001F (DF0C)              <1>     dw pageLines - cmdFcnTable
    17 00000021 (5F0D)              <1>     dw moveLines - cmdFcnTable
    18 00000023 (640D)              <1>     dw quit - cmdFcnTable
    19 00000025 (B90D)              <1>     dw replaceText - cmdFcnTable
    20 00000027 (BE0D)              <1>     dw searchText - cmdFcnTable
    21 00000029 (C30D)              <1>     dw transferLines - cmdFcnTable
    22 0000002B (E30E)              <1>     dw writeLines - cmdFcnTable
    23                              <1> cmdRoTable:
    24                              <1> ;Byte set if we can do this command in RO mode
    25 0000002D 00                  <1>     db 0    ;Insert
    26 0000002E 00                  <1>     db 0    ;Insert
    27 0000002F FF                  <1>     db -1   ;Append
    28 00000030 00                  <1>     db 0    ;Copy
    29 00000031 00                  <1>     db 0    ;Delete
    30 00000032 00                  <1>     db 0    ;End (save changes)
    31 00000033 00                  <1>     db 0    ;Insert
    32 00000034 FF                  <1>     db -1   ;List
    33 00000035 FF                  <1>     db -1   ;Page
    34 00000036 00                  <1>     db 0    ;Move
    35 00000037 FF                  <1>     db -1   ;Quit (no save)
    36 00000038 00                  <1>     db 0    ;Replace
    37 00000039 FF                  <1>     db -1   ;Search
    38 0000003A 00                  <1>     db 0    ;Transfer 
    39 0000003B FF                  <1>     db -1   ;Write
    41                                  %include "./Data/edmsg.asm"
     1                              <1> ;Edlin Strings are in this file
     2 0000003C 4E65772066696C650D- <1> newStr  db "New file",CR,LF,"$"
     2 00000045 0A24                <1>
     3 00000047 456E64206F6620696E- <1> eofStr  db "End of input file",CR,LF,"$"    ;When EOF occurs
     3 00000050 7075742066696C650D- <1>
     3 00000059 0A24                <1>
     4 0000005B 496E76616C69642044- <1> badVerStr   db "Invalid DOS Version",CR,LF,"$"
     4 00000064 4F532056657273696F- <1>
     4 0000006D 6E0D0A24            <1>
     5 00000071 496E76616C69642044- <1> badDrvStr   db "Invalid Drive or filename",CR,LF,"$"
     5 0000007A 72697665206F722066- <1>
     5 00000083 696C656E616D650D0A- <1>
     5 0000008C 24                  <1>
     6 0000008D 46696C65206E6F7420- <1> badFindStr  db "File not found",CR,LF,"$"
     6 00000096 666F756E640D0A24    <1>
     7 0000009E 46696C65206E616D65- <1> badNameStr  db "File name must be specified",CR,LF,"$"
     7 000000A7 206D75737420626520- <1>
     7 000000B0 737065636966696564- <1>
     7 000000B9 0D0A24              <1>
     8 000000BC 43616E6E6F74206372- <1> badCreatStr db "Cannot create specified file",CR,LF,"$"
     8 000000C5 656174652073706563- <1>
     8 000000CE 69666965642066696C- <1>
     8 000000D7 650D0A24            <1>
     9 000000DB 43616E6E6F74206F70- <1> badOpenStr  db "Cannot open specified file",CR,LF,"$"
     9 000000E4 656E20737065636966- <1>
     9 000000ED 6965642066696C650D- <1>
     9 000000F6 0A24                <1>
    10 000000F8 43616E6E6F74207061- <1> badFileStr  db "Cannot parse sepcified filespec",CR,LF,"$"
    10 00000101 727365207365706369- <1>
    10 0000010A 666965642066696C65- <1>
    10 00000113 737065630D0A24      <1>
    11 0000011A 416363657373206465- <1> badBackDel  db "Access denied - Backup file not deleted",CR,LF,"$"
    11 00000123 6E696564202D204261- <1>
    11 0000012C 636B75702066696C65- <1>
    11 00000135 206E6F742064656C65- <1>
    11 0000013E 7465640D0A24        <1>
    12 00000144 496E76616C69642050- <1> badParm     db "Invalid Parameter",CR,LF,"$"
    12 0000014D 6172616D657465720D- <1>
    12 00000156 0A24                <1>
    13 00000158 456E74727920657272- <1> badInput    db "Entry error",CR,LF,"$"
    13 00000161 6F720D0A24          <1>
    14 00000166 5265616C6C6F636174- <1> badRealloc  db "Reallocation error",CR,LF,"$"
    14 0000016F 696F6E206572726F72- <1>
    14 00000178 0D0A24              <1>
    15 0000017B 0D0A496E7375666669- <1> badMemFull  db CR,LF,"Insufficient memory",CR,LF,"$"
    15 00000184 6369656E74206D656D- <1>
    15 0000018D 6F72790D0A24        <1>
    16 00000193 4E6F7420656E6F7567- <1> badMergeStr db "Not enough room to merge the entire file",CR,LF,"$"
    16 0000019C 6820726F6F6D20746F- <1>
    16 000001A5 206D65726765207468- <1>
    16 000001AE 6520656E7469726520- <1>
    16 000001B7 66696C650D0A24      <1>
    17 000001BE 43616E6E6F74206564- <1> badFileExt  db "Cannot edit .BAK file--rename file",CR,LF,"$"
    17 000001C7 6974202E42414B2066- <1>
    17 000001D0 696C652D2D72656E61- <1>
    17 000001D9 6D652066696C650D0A- <1>
    17 000001E2 24                  <1>
    18 000001E3 496E76616C6964206F- <1> badROcmd    db "Invalid operation: R/O file",CR,LF,"$"
    18 000001EC 7065726174696F6E3A- <1>
    18 000001F5 20522F4F2066696C65- <1>
    18 000001FE 0D0A24              <1>
    19 00000201 4469736B2066756C6C- <1> badDskFull  db "Disk full-- write not completed$"
    19 0000020A 2D2D20777269746520- <1>
    19 00000213 6E6F7420636F6D706C- <1>
    19 0000021C 6574656424          <1>
    20 00000221 426164207265616420- <1> badRead     db "Bad read of input file. Aborting...",CR,LF,"$"
    20 0000022A 6F6620696E70757420- <1>
    20 00000233 66696C652E2041626F- <1>
    20 0000023C 7274696E672E2E2E0D- <1>
    20 00000245 0A24                <1>
    21 00000247 41626F727420656469- <1> exitQuit    db "Abort edit (Y/N)? $"
    21 00000250 742028592F4E293F20- <1>
    21 00000259 24                  <1>
    22 0000025A 4F2E4B2E3F2024      <1> okString    db "O.K.? $"
    42                                  Segment .bss align=1 follows=.data nobits
    43                                  bssStart:
    44                                  %include "./Data/edbss.asm"
     1                              <1> ;WE SET ALL VARS TO 0 ON STARTUP!
     2                              <1> 
     3 00000000 ??                  <1> pathSep     db ?    ;Default \, Alternative /
     4 00000001 ??                  <1> switchChar  db ?    ;Default /, Alternative -
     5 00000002 ??                  <1> roFlag      db ?    ;Flag is set if file is read-only. Cannot edit the file.
     6 00000003 ??                  <1> newFileFlag db ?    ;Flag indicating the file being made is new (when set, above flag meaningless)
     7 00000004 ??                  <1> noEofChar   db ?    ;Flag is set if we are not to check for ^Z chars found in the file
     8 00000005 ??                  <1> eofReached  db ?    ;When we reach EOF for file on disk, set to -1, else 0
     9                              <1> 
    10                              <1> ;Memory Related variables
    11 00000006 ????????            <1> arenaSize   dd ?    ;Size of the arena in bytes 
    12 0000000A ????????            <1> freeCnt     dd ?    ;Count of 1/4 of the arena in bytes (for write)
    13 0000000E ????????????????    <1> memPtr      dq ?    ;Ptr to the memory arena given by DOS
    14 00000016 ????????????????    <1> fillPtr     dq ?    ;Ptr to 3/4 of the arena in bytes (for append)
    15                              <1> 
    16                              <1> ;Editor state vars!
    17 0000001E ????                <1> curLineNum  dw ?    ;Word value for the current line number (1 based)
    18 00000020 ????????????????    <1> curLinePtr  dq ?    ;Pointer to the current line
    19 00000028 ????????????????    <1> eofPtr      dq ?    ;Pointer to the EOF char in the buffer
    20 00000030 ????????????????    <1> endOfArena  dq ?    ;Ptr to the last available byte in the arena
    21                              <1> 
    22 00000038 ??                  <1> modFlag     db ?    ;Flag set to indicate the file was modified
    23                              <1> ;Backup is only deleted on exit or write, to make space for temp file.
    24 00000039 ??                  <1> bkupDel     db ?    ;Flag to indicate that the backup was deleted
    25                              <1> 
    26                              <1> ;Don't jiggle these symbols, need dword to be together for -1
    27 0000003A ????                <1> readHdl     dw ?    ;Contain the file handle for the open file
    28 0000003C ????                <1> writeHdl    dw ?    ;Handle to the temporary file
    29                              <1> 
    30 0000003E <res 80h>           <1> pathspec    db 128 dup (?)  ;Space for the 128 byte buffer for full filename
    31                              <1> wkfile:                     ;Ptr to below path for "working" file
    32 000000BE <res 80h>           <1> bkupfile    db 128 dup (?)  ;Pathspec for backup file and working .??? file
    33                              <1> 
    34                              <1> tmpNamePtr:         ;Ptr to the filename in the commandtail
    35 0000013E ????????????????    <1> fileNamePtr dq ?    ;Ptr to the name portion of filespec
    36                              <1> tmpNamePtr2:        ;Ptr to the end of the command in the commandtail
    37 00000146 ????????????????    <1> fileExtPtr  dq ?    ;Ptr to the extension of the file we are editing
    38                              <1> ;The above pointers point past the dot or pathseperator
    39                              <1> ;Both file*ptr's point to elements on WKFILE not pathspec
    40                              <1> 
    41                              <1> ;Command line variables
    42 0000014E <res 82h>           <1> cmdLine     db halfLine_size dup (?)
    43                              <1> ;Arguments for parsing
    44 000001D0 ????????????????    <1> charPtr     dq ?    ;Ptr to char for continuing processing
    45 000001D8 ??                  <1> argCnt      db ?    ;Count of arguments in parsed command line
    46                              <1> ;Arguments are converted to signed words where appropriate
    47                              <1> ; and parsed into here in the order they are encountered in.
    48                              <1> ;
    49                              <1> ;Any arguments which mean 0 wrt line numbers means current line
    50                              <1> argTbl:
    51 000001D9 ????                <1> arg1        dw ?
    52 000001DB ????                <1> arg2        dw ?
    53 000001DD ????                <1> arg3        dw ?
    54 000001DF ????                <1> arg4        dw ?
    55 000001E1 ??                  <1> qmarkSet    db ?    ;Set if question mark encountered
    56 000001E2 <res 82h>           <1> argString   db halfLine_size dup (?)    ;Used by search and replace only
    57                              <1> 
    58 00000264 ??                  <1> noAppendErr db ?    ;Special init var, prevents append errors for initial load
    59                              <1> 
    60                              <1> ;The workline gets preloaded with the original line before editing
    61 00000265 <res 102h>          <1> workLine    db 258 dup (?)  ;Line in which all editing takes place
    62 00000367 ????????            <1> workLen     dd ?            ;Line length before edit
    63 0000036B <res 102h>          <1> spareLine   db 258 dup (?)  ;Spare editing line
    64                              <1> 
    65 0000046D <res 80h>           <1> xfrName     db 128 dup (?)  ;Transfer name buffer
    66 000004ED ????                <1> xfrHdl      dw ?
    45                                  bssLen equ ($ - bssStart)
    46                                  Segment .stack align=16 follows=.bss nobits
    47                                  ;Use a 200 QWORD stack
    48 00000000 <res 640h>                  dq 200 dup (?)
    49                                  stackTop:
    50                                  endOfProgram:   ;Deallocate from here
    50          ------------------       info: assembly required 1+5+2 passes

