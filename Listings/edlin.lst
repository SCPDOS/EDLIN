     1                                  [map all ./Listings/edlin.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;EDLIN, an absolute last resort file editor.
     5                                  ;
     6                                  ;                       !!DONT FORGET!!
     7                                  ;       Each line is terminated first with 0Dh then 0Ah (CR,LF)
     8                                  ;                       !!DONT FORGET!!
     9                                  ;
    10                                  
    11                                  ;Edlin will always produce a backup file and refuses to open files 
    12                                  ; with .BAK extension (backup files)
    13                                  
    14                                  ;Edlin will always terminate a file with a single EOF character
    15                                  
    16                                  ;Edlin will erase the previous backup if one exists, ensuring there
    17                                  ; is enough free space for a new copy of the backup.
    18                                  ;It then creates a new file with the filename with a $$$ extension.
    19                                  ;All edits occur in memory and are flushed to it. We then rename it
    20                                  ; to the desired filename.
    21                                  ;BAK files cannot be opened.
    22                                  ;
    23                                  ;Empty lines are default just a CR,LF pair
    24                                  
    25                                  ;Edlin has two modes of operation: Command and Edit
    26                                  
    27                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro retbe 0
    81                              <1> cret be
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retae 0
    85                              <1> cret ae
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> ;A macro for returning to dos
    93                              <1> %macro retToDOS 1
    94                              <1>     mov eax, 04C00h | %1
    95                              <1>     int 21h
    96                              <1> %endmacro
    28                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    29                                  %include "./Include/edError.inc"
     1                              <1> ;Edlin specific errors
     2                              <1> 
     3                              <1> errOk       equ 0
     4                              <1> errBadRen   equ 1   ;Couldn't rename files.
     5                              <1> errDskFull  equ 2   ;Disk full.
     6                              <1> errBadRead  equ 3   ;Couldn't move file pointer or read file in append
     7                              <1> errBadBak   equ 4   ;Couldn't delete backup file
    30                                  %include "./Include/edStruc.inc"
     1                              <1> ;edlin structures
     2                              <1> lineLen     equ 253
     3                              <1> halflineLen equ 128
     4                              <1> maxLine     equ 65529
     5                              <1> maxAlloc    equ maxLine*lineLen
     6                              <1> maxParas    equ (maxAlloc >> 4) + 1
     7                              <1> 
     8                              <1> prompt      equ "*"
     9                              <1> 
    10                              <1> ;Bona-Fida Structures
    11                              <1> 
    12                              <1> struc line
    13 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (255)
    14 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    15 00000002 <res FDh>           <1>     .pString    db lineLen dup (?)      ;Actual string itself
    16                              <1> endstruc
    17                              <1> 
    18                              <1> struc halfLine
    19 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (130)
    20 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    21 00000002 <res 80h>           <1>     .pString    db halflineLen dup (?)   ;Actual string itself
    22                              <1> endstruc
    23                              <1> 
    24                              <1> struc filename
    25                              <1> ;8.3 File name struct
    26 00000000 ????????????????    <1>     .fName  resb 8
    27 00000008 ??????              <1>     .fExt   resb 3
    28                              <1> endstruc
    31                                  %include "./Include/dosStruc.inc"
     1                              <1> ;Structures and equates coming from DOS
     2                              <1> 
     3                              <1> ;MISC ASCII control chars
     4                              <1> NUL equ 00h ;^@         | ASCII Null
     5                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text)
     6                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
     7                              <1> BEL equ 07h ;^G         | ASCII Bell
     8                              <1> BSP equ 08h ;^H         | ASCII Backspace
     9                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
    10                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
    11                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
    12                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
    13                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
    14                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
    15                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
    16                              <1> CMD equ 16h ;^V         | EDLIN COMMAND CHAR
    17                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
    18                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
    19                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
    20                              <1> SPC equ 20h ;Printable  | ASCII Space
    21                              <1> ;This last one is NEVER printed with a caret as it is a console control char
    22                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
    23                              <1> 
    24                              <1> CRLF equ 0A0Dh
    25                              <1> 
    26                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
    27                              <1> asciiMask   equ asciiCaret - 1  ;Turn into a bitmask
    28                              <1> 
    29                              <1> ;Extended Ascii Codes
    30                              <1> eF1     equ 3Bh ;F1 second byte
    31                              <1> eF2     equ 3Ch ;F2 second byte
    32                              <1> eF3     equ 3Dh ;F3 second byte
    33                              <1> eF4     equ 3Eh ;F4 second byte
    34                              <1> eF5     equ 3Fh ;F5 second byte
    35                              <1> eF6     equ 40h ;F6 second byte
    36                              <1> eF7     equ 41h ;F7 second byte
    37                              <1> eCursL  equ 4Bh ;Cursor Left second byte
    38                              <1> eCursR  equ 4Dh ;Cursor Right second byte
    39                              <1> eIns    equ 52h ;Insert second byte
    40                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
    41                              <1> 
    42                              <1> ;Directory attribute equates
    43                              <1>     dirReadOnly     equ 01h
    44                              <1>     dirHidden       equ 02h
    45                              <1>     dirSystem       equ 04h
    46                              <1>     dirVolumeID     equ 08h
    47                              <1>     dirDirectory    equ 10h
    48                              <1>     dirArchive      equ 20h
    49                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    50                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    51                              <1>     ;If any of the three bits are set, then ALL three bits are set
    52                              <1>     ; in addition to whatever the user passed to search for.
    53                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    54                              <1>     dirIncFiles     equ dirHidden | dirSystem
    55                              <1> 
    56                              <1> struc cmdArgs   ;Ptr returned in rdx after 41h/6101h has this structure
    57 00000000 <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1
    58 00000010 <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
    59                              <1>     .dta:   ;Pointer to the default DTA in the
    60 00000024 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
    61 00000025 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
    62                              <1> endstruc
    63                              <1> 
    64                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
    65 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
    66 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
    67 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
    68 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
    69 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
    70 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
    71 00000016 ????                <1>     .fileTime   resw 1  ;File time
    72 00000018 ????                <1>     .fileDate   resw 1  ;File date
    73 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
    74 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;Open Mode equates
    78                              <1> ;Access modes   Bits[2:0]
    79                              <1> ReadAccess      equ 0h
    80                              <1> WriteAccess     equ 1h
    81                              <1> RWAccess        equ 2h
    82                              <1> ;Bit 3 reserved 0
    83                              <1> ;Sharing modes  Bits[6:4]
    84                              <1> CompatShare     equ 0h
    85                              <1> denyRWShare     equ 10h
    86                              <1> denyWriteShare  equ 20h
    87                              <1> denyReadShare   equ 30h
    88                              <1> denyNoneShare   equ 40h
    89                              <1> netFCBShare     equ 70h
    90                              <1> noInherit       equ 80h
    32                                  Segment .text align=1 
    33                                  progHeadPtr:      ;DO NOT TOUCH THIS POINTER. ALL TABLES ARE REL THIS PTR.
    34                                  %include "./Source/edmain.asm"
     1                              <1> ;Contains the program loader
     2                              <1> start:
     3 00000000 EB01                <1>     jmp short .cVersion
     4 00000002 01                  <1> .vNum:          db 1    ;Main version number, patchable
     5                              <1> .cVersion:
     6 00000003 FC                  <1>     cld
     7 00000004 B800300000          <1>     mov eax, 3000h  ;Get version number
     8 00000009 CD21                <1>     int 21h
     9 0000000B 3A05F1FFFFFF        <1>     cmp al, byte [.vNum]
    10 00000011 760C                <1>     jbe short okVersion
    11 00000013 488D15(5B000000)    <1>     lea rdx, badVerStr
    12 0000001A E996040000          <1>     jmp badExitMsg
    13                              <1> okVersion:
    14                              <1> ;Initialise the BSS to 0
    15 0000001F 488D3D(00000000)    <1>     lea rdi, section..bss.start
    16 00000026 48B967030000000000- <1>     mov rcx, bssLen
    16 0000002F 00                  <1>
    17 00000030 31C0                <1>     xor eax, eax
    18 00000032 F3AA                <1>     rep stosb
    19                              <1> ;Now move the stack pointer to its new position and reallocate!
    20 00000034 488D25(40060000)    <1>     lea rsp, stackTop
    21 0000003B 488D1D(40060000)    <1>     lea rbx, endOfProgram   ;Guaranteed paragraph alignment
    22 00000042 4C29C3              <1>     sub rbx, r8 ;Get number of bytes in block
    23 00000045 48C1EB04            <1>     shr rbx, 4  ;Convert to paragraphs
    24 00000049 48FFC3              <1>     inc rbx     ;Add one more paragraph for good measure
    25 0000004C B8004A0000          <1>     mov eax, 4A00h
    26 00000051 CD21                <1>     int 21h
    27 00000053 488D15(55010000)    <1>     lea rdx, badRealloc
    28 0000005A 0F8255040000        <1>     jc badExitMsg
    29                              <1> ;One command line argument except for mandatory filename, /B=(binary read)
    30 00000060 B800370000          <1>     mov eax, 3700h
    31 00000065 CD21                <1>     int 21h
    32 00000067 B85C000000          <1>     mov eax, "\"    ;Default pathsep
    33 0000006C B92F000000          <1>     mov ecx, "/"    ;Alternative pathsep
    34 00000071 80FA2D              <1>     cmp dl, "-"     ;Is the switch char default or alternative?
    35 00000074 0F44C1              <1>     cmove eax, ecx  ;Move if alternative
    36 00000077 88D3                <1>     mov bl, dl  ;Preserve switch char in bl
    37 00000079 881D(01000000)      <1>     mov byte [switchChar], bl
    38 0000007F 8805(00000000)      <1>     mov byte [pathSep], al
    39                              <1> getCmdTail:
    40 00000085 B801610000          <1>     mov eax, 6101h  ;Get parsed FCB and cmdtail for filename in rdx
    41 0000008A CD21                <1>     int 21h
    42                              <1> ;Now parse the command line, to get full command spec for filename.
    43 0000008C 488D7A25            <1>     lea rdi, qword [rdx + cmdArgs.progTail]     ;Get ptr to tail
    44 00000090 0FB64A24            <1>     movzx ecx, byte [rdx + cmdArgs.parmList]    ;Get number of chars in cmdline
    45                              <1> cmdTailParse:
    46 00000094 B020                <1>     mov al, SPC ;Comparing against a space
    47                              <1> .searchLoop:
    48 00000096 67E368              <1>     jecxz .parseComplete    ;If we run out of chars, exit!
    49 00000099 F3AE                <1>     repe scasb  ;Search for the first non-space char
    50 0000009B 385FFF              <1>     cmp byte [rdi - 1], bl  ;Did we find a switchchar?
    51 0000009E 7539                <1>     jne short .notSwitch
    52 000000A0 8A07                <1>     mov al, byte [rdi]      ;Get the char after the switch
    53                              <1>     ;Now we lookahead only if we have more than 1 char left in buffer
    54 000000A2 81F901000000        <1>     cmp ecx, 1  ;If we have 1 char left, automatically accept as arg
    55 000000A8 7419                <1>     je short .goodSwitch
    56 000000AA 8A6701              <1>     mov ah, byte byte [rdi + 1] ;Lookahead
    57 000000AD 80FC20              <1>     cmp ah, SPC ;If char after switchchar is SPC, accept
    58 000000B0 7411                <1>     je short .goodSwitch
    59                              <1> .parseBadExit:
    60 000000B2 E9F7030000          <1>     jmp badParmExit
    61                              <1> .nameBadExit:
    62 000000B7 488D15(8D000000)    <1>     lea rdx, badNameStr
    63 000000BE E9F2030000          <1>     jmp badExitMsg
    64                              <1> .goodSwitch:
    65 000000C3 24DF                <1>     and al, ~20h    ;Clear the lowercase flag
    66 000000C5 3C42                <1>     cmp al, "B"     ;The flag is /B
    67 000000C7 75E9                <1>     jne short .parseBadExit
    68 000000C9 C605(04000000)FF    <1>     mov byte [noEofChar], -1   ;Set the internal flag
    69 000000D0 48FFC7              <1>     inc rdi ;Move rdi to the char after the B
    70 000000D3 FFC9                <1>     dec ecx ;And decrement count of chars left
    71 000000D5 742A                <1>     jz short .parseComplete
    72 000000D7 EBBB                <1>     jmp short cmdTailParse   ;Now skip next lot of spaces
    73                              <1> .notSwitch:
    74                              <1>     ;Thus rdi must point one char past the start of a filename. 
    75                              <1>     ;If there is no filename, accept the pointer. 
    76                              <1>     ;If not, fail.
    77 000000D9 48813D(3E010000)00- <1>     cmp qword [tmpNamePtr], 0
    77 000000E1 000000              <1>
    78 000000E4 75CC                <1>     jnz short .parseBadExit ;If its not empty, too many filenames passed in
    79 000000E6 48FFCF              <1>     dec rdi
    80 000000E9 48893D(3E010000)    <1>     mov qword [tmpNamePtr], rdi ;Store the ptr temporarily here
    81 000000F0 48FFC7              <1>     inc rdi
    82 000000F3 F2AE                <1>     repne scasb ;Now we keep going until we hit a space
    83 000000F5 48893D(46010000)    <1>     mov qword [tmpNamePtr2], rdi    ;Store first char past end of name here.
    84 000000FC 3847FF              <1>     cmp byte [rdi - 1], al  ;Was this a space or run out of chars?
    85 000000FF 7495                <1>     je short .searchLoop    ;Jump if a space, else, we parsed the tail.
    86                              <1> .parseComplete:
    87                              <1> ;Check we have a pointer to a filename AT LEAST.
    88 00000101 48813D(3E010000)00- <1>     cmp qword [tmpNamePtr], 0
    88 00000109 000000              <1>
    89 0000010C 74A9                <1>     je short .nameBadExit
    90                              <1> ;Now we copy the filename internally.
    91 0000010E 488D3D(3E000000)    <1>     lea rdi, pathspec
    92 00000115 488B35(3E010000)    <1>     mov rsi, qword [tmpNamePtr]
    93                              <1> nameCopy:
    94 0000011C A4                  <1>     movsb   ;Copy one char at a time
    95 0000011D 483B35(46010000)    <1>     cmp rsi, qword [tmpNamePtr2]    ;Check if we are equal to end of string ptr
    96 00000124 75F6                <1>     jne short nameCopy
    97 00000126 31C0                <1>     xor eax, eax
    98 00000128 AA                  <1>     stosb   ;Store the null terminating char
    99 00000129 488D3D(3E000000)    <1>     lea rdi, pathspec
   100 00000130 4889FE              <1>     mov rsi, rdi
   101 00000133 B800600000          <1>     mov eax, 6000h  ;TRUENAME the filename
   102 00000138 CD21                <1>     int 21h
   103 0000013A 731D                <1>     jnc short .nameGood ;Name ok, proceed
   104 0000013C 3C0F                <1>     cmp al, errBadDrv
   105 0000013E 750C                <1>     jne short .genericError
   106 00000140 488D15(71000000)    <1>     lea rdx, badDrvStr
   107 00000147 E969030000          <1>     jmp badExitMsg
   108                              <1> .genericError:
   109 0000014C 488D15(E7000000)    <1>     lea rdx, badFileStr ;If this fails, bad filespec
   110 00000153 0F825C030000        <1>     jc badExitMsg  ;The filename is bad for some reason!
   111                              <1> .nameGood:
   112                              <1> ;Now we produce a backup/working filespec
   113 00000159 488D35(3E000000)    <1>     lea rsi, pathspec
   114 00000160 488D3D(BE000000)    <1>     lea rdi, wkfile ;This pathspec always has an extension
   115 00000167 E859040000          <1>     call strcpyASCIIZ
   116                              <1> ;Now invalidate tmpNamePtr and tmpNamePtr2
   117 0000016C 31C9                <1>     xor ecx, ecx
   118 0000016E 48890D(3E010000)    <1>     mov qword [tmpNamePtr], rcx
   119 00000175 48890D(46010000)    <1>     mov qword [tmpNamePtr2], rcx
   120 0000017C 48FFC9              <1>     dec rcx
   121 0000017F 488D3D(BE000000)    <1>     lea rdi, wkfile
   122 00000186 31C0                <1>     xor eax, eax
   123 00000188 F2AE                <1>     repne scasb   ;rdi points past terminating null
   124                              <1>     ;Find the nearest pathsep (since we have fully qualified the name)
   125 0000018A FD                  <1>     std
   126 0000018B 0FB605(00000000)    <1>     movzx eax, byte [pathSep]   ;Get pathsep char in al
   127 00000192 F2AE                <1>     repne scasb
   128 00000194 FC                  <1>     cld
   129 00000195 4881C702000000      <1>     add rdi, 2  ;Point rdi to first char past the pathsep
   130 0000019C 48893D(3E010000)    <1>     mov qword [fileNamePtr], rdi    ;Save the ptr
   131 000001A3 4889FE              <1>     mov rsi, rdi
   132 000001A6 B908000000          <1>     mov ecx, 8  ;number of chars to search thru
   133                              <1> .extSearch:
   134 000001AB AC                  <1>     lodsb
   135 000001AC 84C0                <1>     test al, al
   136 000001AE 7408                <1>     jz short .insertExt
   137 000001B0 3C2E                <1>     cmp al, "."
   138 000001B2 740E                <1>     je short .extFound
   139 000001B4 FFC9                <1>     dec ecx
   140 000001B6 75F3                <1>     jnz short .extSearch    ;Impossible edgecase (TRUENAME returns 8.3 filename)
   141                              <1> .insertExt:
   142                              <1>     ;rsi points just past the null
   143 000001B8 C646FF2E            <1>     mov byte [rsi - 1], "." ;Store a pathsep
   144 000001BC C70620202000        <1>     mov dword [rsi], "   "   ;Store empty extension so no accidental BAK issues.
   145                              <1> .extFound:
   146 000001C2 488935(46010000)    <1>     mov qword [fileExtPtr], rsi
   147                              <1> ;Now we have all the metadata for the filename we are working with
   148 000001C9 8B06                <1>     mov eax, dword [rsi]
   149 000001CB 3D42414B00          <1>     cmp eax, "BAK"  ;Is this a bakup file?
   150 000001D0 488D15(82010000)    <1>     lea rdx, badFileExt
   151 000001D7 0F84D8020000        <1>     je badExitMsg   ;If yes, error!
   152 000001DD C70624242400        <1>     mov dword [rsi], "$$$"   ;Now we store working file $$$ extension 
   153                              <1> ;Now we check to make sure the path has no global filename chars
   154                              <1> wildcardCheck:
   155 000001E3 488D35(3E000000)    <1>     lea rsi, pathspec
   156                              <1> .mainlp:
   157 000001EA AC                  <1>     lodsb
   158 000001EB 84C0                <1>     test al, al ;Once we're at the null char, proceed
   159 000001ED 7414                <1>     jz short fileOpen
   160 000001EF 3C3F                <1>     cmp al, "?"
   161 000001F1 7404                <1>     je short .error
   162 000001F3 3C2A                <1>     cmp al, "*"
   163 000001F5 75F3                <1>     jne short .mainlp
   164                              <1> .error:
   165 000001F7 488D15(71000000)    <1>     lea rdx, badDrvStr
   166 000001FE E9B2020000          <1>     jmp badExitMsg
   167                              <1> ;Now we open the file to check if it exists and if it does, if it is readonly
   168                              <1> fileOpen:
   169                              <1> ;first set the handles to -1
   170 00000203 C705(3A000000)FFFF- <1>     mov dword [readHdl], -1 ;Init the handles to -1
   170 0000020B FFFF                <1>
   171                              <1> ;Now we search for the file
   172 0000020D 488D15(3E000000)    <1>     lea rdx, pathspec
   173 00000214 B906000000          <1>     mov ecx, dirIncFiles
   174 00000219 B8004E0000          <1>     mov eax, 4E00h  ;Find First 
   175 0000021E CD21                <1>     int 21h
   176 00000220 723B                <1>     jc .fileNotFound
   177                              <1> ;Check if file is read only
   178 00000222 B8002F0000          <1>     mov eax, 2F00h  ;Get a pointer to the DTA in rbx
   179 00000227 CD21                <1>     int 21h
   180 00000229 0FB64315            <1>     movzx eax, byte [rbx + ffBlock.attribFnd]
   181 0000022D A801                <1>     test al, dirReadOnly
   182 0000022F 7407                <1>     jz short .notReadOnly
   183                              <1> .readOnly:
   184                              <1> ;Read only files here
   185 00000231 C605(02000000)FF    <1>     mov byte [roFlag], -1   ;Set read only flag!
   186                              <1> .notReadOnly:
   187                              <1> ;File exists, lets open it, to read from
   188 00000238 B8203D0000          <1>     mov eax, (3Dh << 8) | ReadAccess | denyWriteShare
   189 0000023D 488D15(3E000000)    <1>     lea rdx, pathspec    ;Get the pointer to the working filename
   190 00000244 CD21                <1>     int 21h         ;Open the file
   191 00000246 730C                <1>     jnc short .backupOpened
   192                              <1> ;File failed to open
   193 00000248 488D15(CA000000)    <1>     lea rdx, badOpenStr
   194 0000024F E961020000          <1>     jmp badExitMsg
   195                              <1> .backupOpened:
   196                              <1> ;Backup opened and handle in ax.
   197 00000254 668905(3A000000)    <1>     mov word [readHdl], ax  ;Store the read handle here
   198 0000025B EB1F                <1>     jmp short createWorkingFile
   199                              <1> .fileNotFound:
   200                              <1> ;Maybe new file? Check reason for error! If FNF, its good!
   201 0000025D 663D0200            <1>     cmp ax, errFnf  ;If its a file not found error, then we are good!
   202 00000261 488D15(CA000000)    <1>     lea rdx, badOpenStr ;We can't open the file for whatever reason
   203 00000268 0F8547020000        <1>     jne badExitMsg
   204                              <1> ;Error was file not found so we can make the file!
   205 0000026E C605(03000000)FF    <1>     mov byte [newFileFlag], -1  ;Set the new file flag!
   206 00000275 C605(05000000)FF    <1>     mov byte [eofReached], -1   ;Setup that we at eof
   207                              <1> createWorkingFile:
   208                              <1> ;Now open a new file with triple question mark extension
   209                              <1> ;rdi -> Path to file with $$$ (the working file)
   210 0000027C 488D15(BE000000)    <1>     lea rdx, wkfile    ;Get a pointer to this filename
   211 00000283 B8005B0000          <1>     mov eax, 5B00h  ;Create file (atomic), prevent two edlins from editing same file
   212 00000288 31C9                <1>     xor ecx, ecx    ;Clear all file attributes (normal file)
   213 0000028A CD21                <1>     int 21h
   214 0000028C 488D15(AB000000)    <1>     lea rdx, badCreatStr    ;Creating the working file will fail if already exits
   215 00000293 0F821C020000        <1>     jc badExitMsg   ;This prevents someone from overriding the file
   216 00000299 668905(3C000000)    <1>     mov word [writeHdl], ax ;Store a pointer to the write handle
   217 000002A0 F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;If set, this is a new file!
   218 000002A7 740E                <1>     jz short .notNewFile
   219 000002A9 488D15(3C000000)    <1>     lea rdx, newStr
   220 000002B0 B800090000          <1>     mov eax, 0900h
   221 000002B5 CD21                <1>     int 21h
   222                              <1> .notNewFile:
   223                              <1> ;Now the following:
   224                              <1> ;1) Allocate max memory (1Mb max)
   225                              <1> ;2) If new file, goto 4. Print "new file" message
   226                              <1> ;3) Else, fill up to 75% of arena according to table. If 
   227                              <1> ;    EOF reached (either due to no bytes left or ^Z (if enabled))
   228                              <1> ;    print "EOF reached message".
   229                              <1> ;4) Install Int 23h handler
   230                              <1> ;5) Goto main loop
   231                              <1> allocateMemory:
   232 000002B7 31DB                <1>     xor ebx, ebx
   233 000002B9 BB00000100          <1>     mov ebx, 10000h ;Start trying to allocate at 1Mb
   234 000002BE B800480000          <1>     mov eax, 4800h
   235 000002C3 CD21                <1>     int 21h
   236 000002C5 731E                <1>     jnc short .loadProgram
   237                              <1>     ;If the allocation failed, eax has max paragraphs
   238 000002C7 3D10000000          <1>     cmp eax, 10h    ;If we have less than 256 bytes available, fail
   239 000002CC 720B                <1>     jb short .notEnoughMem
   240 000002CE 89C3                <1>     mov ebx, eax    ;Get the number of paragraphs into ebx for request
   241 000002D0 B800480000          <1>     mov eax, 4800h
   242 000002D5 CD21                <1>     int 21h
   243 000002D7 730C                <1>     jnc short .loadProgram
   244                              <1> .notEnoughMem:
   245 000002D9 488D15(6A010000)    <1>     lea rdx, badMemFull
   246 000002E0 E9D0010000          <1>     jmp badExitMsg
   247                              <1> .loadProgram:
   248                              <1> ;rax has pointer here
   249 000002E5 488905(0E000000)    <1>     mov qword [memPtr], rax
   250 000002EC 4889C6              <1>     mov rsi, rax
   251 000002EF C1E304              <1>     shl ebx, 4  ;Multiply by 16 to get number of bytes
   252 000002F2 4801DE              <1>     add rsi, rbx
   253 000002F5 48FFCE              <1>     dec rsi     ;Point rsi to the last char of the arena
   254 000002F8 488935(30000000)    <1>     mov qword [endOfArena], rsi
   255 000002FF 891D(06000000)      <1>     mov dword [arenaSize], ebx  ;Save number of bytes in arena here
   256 00000305 F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;We skip setting the 1/4 and 3/4 markers 
   257 0000030C 7522                <1>     jnz .newFile
   258 0000030E 4889C6              <1>     mov rsi, rax    ;Save the pointer to memory arena in rsi
   259 00000311 31C9                <1>     xor ecx, ecx    ;Zero the upper 32 bits
   260 00000313 678D0C5B            <1>     lea ecx, dword [2*ebx + ebx]    ;Multiply ebx by 3 into ecx
   261 00000317 C1E902              <1>     shr ecx, 2  ;Divide by 4 to get # of bytes to default fill by
   262 0000031A 890D(16000000)      <1>     mov dword [fillPtr], ecx   ;Save number of bytes to fill arena with
   263 00000320 480105(16000000)    <1>     add qword [fillPtr], rax   ;Turn into offset from start of arena
   264 00000327 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get # of bytes to default free until
   265 0000032A 891D(0A000000)      <1>     mov dword [freeCnt], ebx   ;Save number of bytes to free from the arena
   266                              <1> .newFile:
   267                              <1> ;Now we setup the edit and command buffers
   268 00000330 C605(65020000)FD    <1>     mov byte [workLine + line.bBufLen], lineLen
   269 00000337 C605(4E010000)80    <1>     mov byte [cmdLine + line.bBufLen], halflineLen
   270 0000033E 66C705(1E000000)01- <1>     mov word [curLineNum], 1    ;Start at line 1
   270 00000346 00                  <1>
   271 00000347 488905(20000000)    <1>     mov qword [curLinePtr], rax
   272 0000034E C6001A              <1>     mov byte [rax], EOF ;Store an EOF at the start of the buffer!
   273 00000351 488905(28000000)    <1>     mov qword [eofPtr], rax
   274                              <1> ;Nice trick, ensure we dont print any errors on append when initially loading the
   275                              <1> ; file! Since we are appending, we setup as if the user typed in an arg. 
   276                              <1> ;arg1 is already zero due to BSS zeroing
   277 00000358 C605(D8010000)01    <1>     mov byte [argCnt], 1    ;Default to one argument! arg1 = 0 means load to 3/4!
   278 0000035F F605(03000000)FF    <1>     test byte [newFileFlag], -1
   279 00000366 7513                <1>     jnz getCommand
   280 00000368 C605(64020000)FF    <1>     mov byte [noAppendErr], -1
   281 0000036F E84E040000          <1>     call appendLines
   282 00000374 C605(64020000)00    <1>     mov byte [noAppendErr], 0
   283                              <1> getCommand:
   284 0000037B 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset the stack pointer
   285 00000382 488D15EB030000      <1>     lea rdx, i23h
   286 00000389 B823250000          <1>     mov eax, 2523h  ;Set Interrupt handler for Int 23h
   287 0000038E CD21                <1>     int 21h
   288 00000390 B82A000000          <1>     mov eax, prompt
   289 00000395 E8D2080000          <1>     call printChar
   290 0000039A 488D15(4E010000)    <1>     lea rdx, cmdLine
   291 000003A1 B8000A0000          <1>     mov eax, 0A00h  ;Take buffered input.
   292 000003A6 CD21                <1>     int 21h
   293 000003A8 E8BD080000          <1>     call printLF 
   294 000003AD 488D35(50010000)    <1>     lea rsi, qword [cmdLine + halfLine.pString] ;Point to the text of the line
   295 000003B4 488935(D0010000)    <1>     mov qword [charPtr], rsi
   296                              <1> ;Now we parse the command line!
   297                              <1> ;NOTE: Multiple commands may be on the same command line.
   298                              <1> ;Commands are terminated by a command letter (except in the
   299                              <1> ; case of S and R where they may be followed by a string).
   300                              <1> ;If we encounter a CR in the string parsing, then we are
   301                              <1> ; finished with this command line. Else, we keep parsing the
   302                              <1> ; same command line, until all the chars in the buffer 
   303                              <1> ; have been processed and/or a CR has been hit.
   304                              <1> parseCommand:
   305 000003BB 31C0                <1>     xor eax, eax
   306 000003BD 8805(D8010000)      <1>     mov byte [argCnt], al
   307 000003C3 488905(D9010000)    <1>     mov qword [argTbl], rax ;Clear the argument table
   308 000003CA 8805(E1010000)      <1>     mov byte [qmarkSet], al
   309 000003D0 488B35(D0010000)    <1>     mov rsi, qword [charPtr]    ;Get rsi to the right place in command line
   310 000003D7 488D2D(D9010000)    <1>     lea rbp, argTbl
   311                              <1> .parse:
   312 000003DE FE05(D8010000)      <1>     inc byte [argCnt]   ;Parsing an argument
   313 000003E4 E8BA020000          <1>     call parseEntry ;Returns in bx the word to store in the arg table
   314 000003E9 0FB63D(D8010000)    <1>     movzx edi, byte [argCnt]
   315 000003F0 FFCF                <1>     dec edi ;Turn into offset
   316 000003F2 66895C7D00          <1>     mov word [rbp + 2*rdi], bx  ;Store the argument
   317 000003F7 48FFCE              <1>     dec rsi     ;Go back to the first char past the argument
   318 000003FA E848030000          <1>     call skipSpaces ;Skip spaces
   319 000003FF 3C2C                <1>     cmp al, "," ;Is the first char the argument separator?
   320 00000401 74DB                <1>     je .parse
   321 00000403 48FFCE              <1>     dec rsi ;Move rsi back to the non comma char
   322 00000406 E83C030000          <1>     call skipSpaces
   323 0000040B 3C3F                <1>     cmp al, "?"
   324 0000040D 750C                <1>     jne short .notQmark
   325 0000040F C605(E1010000)FF    <1>     mov byte [qmarkSet], -1
   326 00000416 E82C030000          <1>     call skipSpaces ;Get the next char (must be a cmd char) in al
   327                              <1> .notQmark:
   328 0000041B 3C61                <1>     cmp al, "a"
   329 0000041D 7202                <1>     jb short .noUC
   330 0000041F 24DF                <1>     and al, 0DFh    ;Convert cmd char to upper case if LC 
   331                              <1> .noUC:
   332 00000421 488D3D(00000000)    <1>     lea rdi, cmdLetterTable
   333 00000428 B90F000000          <1>     mov ecx, cmdLetterTableL
   334 0000042D F2AE                <1>     repne scasb
   335 0000042F 0F85C7080000        <1>     jne printComErr ;Print an error if char not in table
   336 00000435 F7D1                <1>     not ecx ;1's compliment to subtract 1 too
   337 00000437 81C10F000000        <1>     add ecx, cmdLetterTableL    ;Get L->R offset into table
   338                              <1> ;Now check the R/O permissions for the selected function
   339                              <1> ;ecx has the offset into the table
   340 0000043D F605(02000000)FF    <1>     test byte [roFlag], -1  ;If this flag is not set, ignore r/o
   341 00000444 7421                <1>     jz short execCmd
   342 00000446 488D2D(2D000000)    <1>     lea rbp, cmdRoTable
   343 0000044D F6440D00FF          <1>     test byte [rbp + rcx], -1   ;Test the flag
   344 00000452 7513                <1>     jnz short execCmd
   345 00000454 488D15(A7010000)    <1>     lea rdx, badROcmd
   346 0000045B B800090000          <1>     mov eax, 0900h
   347 00000460 CD21                <1>     int 21h
   348 00000462 E995080000          <1>     jmp printComErr
   349                              <1> execCmd:
   350 00000467 488935(D0010000)    <1>     mov qword [charPtr], rsi
   351 0000046E 488D2D(0F000000)    <1>     lea rbp, cmdFcnTable
   352 00000475 480FBF5C4D00        <1>     movsx rbx, word [rbp + 2*rcx]    ;Get word ptr into rbx
   353 0000047B 4801EB              <1>     add rbx, rbp    ;Convert the word offset from cmdFcnTbl to pointer
   354 0000047E FFD3                <1>     call rbx
   355                              <1> nextCmd:
   356 00000480 488B35(D0010000)    <1>     mov rsi, qword [charPtr]
   357 00000487 E8BB020000          <1>     call skipSpaces ;Now move to the "following command" or CR
   358 0000048C 3C0D                <1>     cmp al, CR
   359 0000048E 0F84E7FEFFFF        <1>     je getCommand   ;If CR, end of line. Get new command
   360 00000494 3C1A                <1>     cmp al, EOF
   361 00000496 7404                <1>     je short .eocChar
   362 00000498 3C3B                <1>     cmp al, ";"
   363 0000049A 7503                <1>     jne short .skipEocChar
   364                              <1> .eocChar:
   365 0000049C 48FFC6              <1>     inc rsi ;Move rsi ahead one to avoid the below...
   366                              <1> .skipEocChar:
   367 0000049F 48FFCE              <1>     dec rsi ;Move rsi back to the first char of the new command
   368 000004A2 488935(D0010000)    <1>     mov qword [charPtr], rsi    ;Save the command line pointer
   369 000004A9 E90DFFFFFF          <1>     jmp parseCommand
   370                              <1> 
   371                              <1> ;----Bad Exits----
   372                              <1> badParmExit:
   373 000004AE 488D15(33010000)    <1>     lea rdx, badParm    ;Bad number of parameters
   374                              <1> badExitMsg:
   375 000004B5 4885D2              <1>     test rdx, rdx   ;Check if null ptr => Dont print on exit
   376 000004B8 7407                <1>     jz short badExit
   377 000004BA B800090000          <1>     mov eax, 0900h
   378 000004BF CD21                <1>     int 21h
   379                              <1> badExit:
   380 000004C1 B8FF4C0000          <1>     mov eax, 4CFFh
   381 000004C6 CD21                <1>     int 21h
    35                                  %include "./Source/edutils.asm"
     1                              <1> ;General Utility functions for edlin go here
     2                              <1> 
     3                              <1> doCmdChar:
     4                              <1> ;Handles command chars that are typed into the buffer. These chars are
     5                              <1> ; ^V<CHAR> where <CHAR> has to be a UC char to be treated as a command char.
     6                              <1> ;Assumes that rsi is pointing to the start of the data portion of a command line.
     7                              <1> ;Thus:  rsi -> Input buffer
     8                              <1> ;       rsi - 1 = Number of chars typed 
     9                              <1> ;       rsi - 2 = Input buffer length
    10 000004C8 FC                  <1>     cld                         ;Ensure we are searching the right way
    11 000004C9 51                  <1>     push rcx
    12 000004CA 56                  <1>     push rsi
    13 000004CB 57                  <1>     push rdi
    14 000004CC 4889F7              <1>     mov rdi, rsi                ;Copy the pointer for scanning
    15 000004CF 0FB64EFF            <1>     movzx ecx, byte [rsi - 1]   ;Get number of chars typed in to scan
    16                              <1> .lp:
    17 000004D3 67E32A              <1>     jecxz .exit                 ;No more chars to handle, exit!
    18 000004D6 B816000000          <1>     mov eax, CMD                ;Scan for the ^V char in al
    19 000004DB F2AE                <1>     repne scasb
    20 000004DD 7521                <1>     jne .exit                   ;Ran out of chars to scan, exit!
    21                              <1> ;Here rdi points to the char after the quote char.
    22 000004DF 8A07                <1>     mov al, byte [rdi]  ;Get the quote char
    23 000004E1 E81E000000          <1>     call doControl  ;Convert into a control char if appropriate
    24 000004E6 8807                <1>     mov byte [rdi], al  ;Write back
    25                              <1> ;Save our position and count and pull the string up.
    26 000004E8 51                  <1>     push rcx
    27 000004E9 56                  <1>     push rsi
    28 000004EA 57                  <1>     push rdi
    29 000004EB 4889FE              <1>     mov rsi, rdi    ;Start copying from this replaced char
    30 000004EE 48FFCF              <1>     dec rdi         ;Store to the char before
    31 000004F1 FFC1                <1>     inc ecx         ;Copy over the CR too
    32 000004F3 F3A4                <1>     rep movsb
    33 000004F5 5F                  <1>     pop rdi
    34 000004F6 5E                  <1>     pop rsi
    35 000004F7 59                  <1>     pop rcx
    36 000004F8 67E305              <1>     jecxz .exit     ;If we terminated the line with a ^V<CR>, now exit
    37 000004FB FE4EFF              <1>     dec byte [rsi - 1]  ;Else drop one char from the count
    38 000004FE EBD3                <1>     jmp short .lp   ;And keep scanning
    39                              <1> .exit:
    40 00000500 5F                  <1>     pop rdi
    41 00000501 5E                  <1>     pop rsi
    42 00000502 59                  <1>     pop rcx
    43                              <1>     return
    13                              <2> %%_ret:
    14 00000503 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> 
    45                              <1> doControl:
    46                              <1> ;Input: al = Possible control char. This has to be an uppercase char! 
    47 00000504 50                  <1>     push rax
    48 00000505 24E0                <1>     and al, 0E0h    ;Preserve upper three bits only (not used for chars)
    49 00000507 3C40                <1>     cmp al, 40h     ;Check if only the middle (UC) was set!
    50 00000509 58                  <1>     pop rax
    51                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000050A 75(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    52 0000050C 241F                <1>     and al, asciiMask   ;Convert into a control char
    53                              <1>     return
    13                              <2> %%_ret:
    14 0000050E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> checkArgOrder:
    56                              <1> ;Checks two arguments to ensure the second one is 
    57                              <1> ; greater than the first.
    58                              <1> ;Input: bx = first argument
    59                              <1> ;       word [arg2] = second argument
    60                              <1> ;Output: If it returns, its ok. Else it resets the command loop
    61 0000050F 66813D(DB010000)00- <1>     cmp word [arg2], 0
    61 00000517 00                  <1>
    62                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000518 74(0E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    63 0000051A 663B1D(DB010000)    <1>     cmp bx, word [arg2]
    64                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000521 77(0E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    65 00000523 58                  <1>     pop rax     ;Pop off the return address
    66 00000524 E9D3070000          <1>     jmp printComErr
    67                              <1> 
    68                              <1> makeSpace:
    69                              <1> ;Makes space for a new string in the text
    70                              <1> ;Input: rdx -> Where in the arena we will move our text
    71                              <1> ;       rdi -> First byte we will be moving
    72                              <1> ;       bx = Line number we are making space for!
    73 00000529 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
    74 00000530 4889CE              <1>     mov rsi, rcx    ;Copy in reverse, sourcing from the EOF ptr!!    
    75 00000533 4829F9              <1>     sub rcx, rdi    ;Get the count of bytes to copy
    76 00000536 FFC1                <1>     inc ecx         ;Including EOF
    77 00000538 4889D7              <1>     mov rdi, rdx    
    78 0000053B FD                  <1>     std
    79 0000053C F3A4                <1>     rep movsb
    80 0000053E FC                  <1>     cld
    81 0000053F 4887F7              <1>     xchg rsi, rdi   ;Swap the new EOF pointer and source
    82 00000542 48FFC7              <1>     inc rdi         ;Point to the first byte of made space
    83 00000545 4889F5              <1>     mov rbp, rsi    ;Setup to fall through now
    84                              <1> setLineVars:
    85                              <1> ;Sets the current line number, pointer and the new EOF pointer
    86                              <1> ;Input: bx = Current line number
    87                              <1> ;       rdi -> Space where this line is
    88                              <1> ;       rbp -> EOF char pointer
    89 00000548 66891D(1E000000)    <1>     mov word [curLineNum], bx
    90 0000054F 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
    91 00000556 48892D(28000000)    <1>     mov qword [eofPtr], rbp
    92                              <1>     return
    13                              <2> %%_ret:
    14 0000055D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    93                              <1> 
    94                              <1> findLine:
    95                              <1> ;Given a line number, tries to find the actual line.
    96                              <1> ;Input: ebx = Line number to search for, 0 means exhaust all chars!
    97                              <1> ;Output: ZF=ZE: rdi -> Ptr to the line
    98                              <1> ;               edx = Actual line number we are at
    99                              <1> ;               eax = Line number specified
   100                              <1> ;        ZF=NZ: Line not found. (i.e. beyond last line)
   101                              <1> ;               edx = Line number past current line number
   102                              <1> ;               rdi -> End of memory space
   103 0000055E 0FB715(1E000000)    <1>     movzx edx, word [curLineNum]    ;Line to start counting from
   104 00000565 488B3D(20000000)    <1>     mov rdi, qword [curLinePtr]     ;Pointer to this line
   105 0000056C 39D3                <1>     cmp ebx, edx
   106                              <1>     rete    ;If we are already at the line we want to be at, return!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000056E 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   107 00000570 7714                <1>     ja .prepSearch  
   108 00000572 85DB                <1>     test ebx, ebx   ;Are we in the goto last line case?
   109 00000574 7410                <1>     jz .prepSearch
   110                              <1> ;Else, we start scanning from the start of the arena!
   111 00000576 BA01000000          <1>     mov edx, 1
   112 0000057B 488B3D(0E000000)    <1>     mov rdi, qword [memPtr] 
   113 00000582 39D3                <1>     cmp ebx, edx
   114                              <1>     rete    ;If we want to find line 1, here we are!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000584 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   115                              <1> .prepSearch:
   116 00000586 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   117 0000058D 4829F9              <1>     sub rcx, rdi    ;Turn ecx into count of chars left in buffer to scan
   118                              <1> findLineCore:
   119                              <1> ;Finds a line but from a presetup position as opposed to the global state!
   120                              <1> ;Input: rdi -> Line to check if it is terminated by a LF
   121                              <1> ;       ecx = Number of chars to check on
   122                              <1> ;       edx = Offset of line count to search for (line counter)
   123                              <1> ;       ebx = Count of lines to search for (0 means exhaust chars)
   124                              <1> ;Output:
   125                              <1> ;       al = LF
   126                              <1> ;       ZF=ZE: We read bx lines. rdi -> Past LF which terminated line
   127                              <1> ;       ZF=NZ: Ran out of chars
   128 00000590 B80A000000          <1>     mov eax, LF
   129                              <1> .lp:
   130 00000595 67E308              <1>     jecxz .exit ;Return w/o setting flags if we have no more chars left!
   131 00000598 F2AE                <1>     repne scasb
   132 0000059A FFC2                <1>     inc edx
   133 0000059C 39DA                <1>     cmp edx, ebx    ;Have we gone past bx lines yet?
   134 0000059E 75F5                <1>     jne .lp    ;Scan the next line if not!!
   135                              <1> .exit:
   136                              <1>     return
    13                              <2> %%_ret:
    14 000005A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   137                              <1> 
   138                              <1> strlen:
   139                              <1> ;String length based on terminator in al
   140                              <1> ;Input: rsi -> Source Ptr
   141                              <1> ;       al = Terminating char to search for
   142                              <1> ;Output: ecx = Number of chars instring including terminator
   143 000005A1 31C9                <1>     xor ecx, ecx
   144 000005A3 FFC9                <1>     dec ecx
   145 000005A5 57                  <1>     push rdi
   146 000005A6 4889F7              <1>     mov rdi, rsi
   147 000005A9 F2AE                <1>     repne scasb
   148 000005AB 5F                  <1>     pop rdi
   149 000005AC F7D9                <1>     neg ecx ;Take 2's compliment to get number of chars including terminator
   150                              <1>     return
    13                              <2> %%_ret:
    14 000005AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> strcpy:
   153                              <1> ;Copies a string from one buffer to another
   154                              <1> ;Input: rsi -> Source Ptr
   155                              <1> ;       rdi -> Destination Ptr
   156 000005AF 56                  <1>     push rsi
   157 000005B0 57                  <1>     push rdi
   158 000005B1 51                  <1>     push rcx
   159 000005B2 B9FD000000          <1>     mov ecx, lineLen    ;Max number of chars in a string
   160                              <1> .lp:
   161 000005B7 803E0A              <1>     cmp byte [rsi], LF
   162 000005BA 7405                <1>     je short .exit
   163 000005BC A4                  <1>     movsb   ;Move the char over, inc both pointers
   164 000005BD FFC9                <1>     dec ecx
   165 000005BF 75F6                <1>     jnz short .lp
   166                              <1> .exit:
   167 000005C1 59                  <1>     pop rcx
   168 000005C2 5F                  <1>     pop rdi
   169 000005C3 5E                  <1>     pop rsi
   170                              <1>     return
    13                              <2> %%_ret:
    14 000005C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> strcpyASCIIZ:
   173                              <1> ;Copies a ASCIIZ string from one buffer to another. 
   174                              <1> ;Pointers don't move.
   175                              <1> ;Input: rsi -> Source Ptr
   176                              <1> ;       rdi -> Destination Ptr
   177 000005C5 56                  <1>     push rsi
   178 000005C6 57                  <1>     push rdi
   179                              <1> .cpChar:
   180 000005C7 AC                  <1>     lodsb
   181 000005C8 AA                  <1>     stosb
   182 000005C9 84C0                <1>     test al, al ;Was this a nul char?
   183 000005CB 75FA                <1>     jnz .cpChar
   184 000005CD 5F                  <1>     pop rdi
   185 000005CE 5E                  <1>     pop rsi
   186                              <1>     return
    13                              <2> %%_ret:
    14 000005CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> 
   189                              <1> memmove:
   190                              <1> ;Copies a number of bytes over from one buffer to another
   191                              <1> ;Input: rsi -> Source Ptr
   192                              <1> ;       rdi -> Destination Ptr
   193                              <1> ;       ecx = Count of chars to copy
   194 000005D0 56                  <1>     push rsi
   195 000005D1 57                  <1>     push rdi
   196 000005D2 51                  <1>     push rcx
   197 000005D3 F3A4                <1>     rep movsb
   198 000005D5 59                  <1>     pop rcx
   199 000005D6 5F                  <1>     pop rdi
   200 000005D7 5E                  <1>     pop rsi
   201                              <1>     return
    13                              <2> %%_ret:
    14 000005D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202                              <1> 
   203                              <1> checkEOF:
   204                              <1> ;Checks if we are at the EOF or if we hit an EOF char in the file.
   205                              <1> ;Input: ecx = Count of bytes
   206                              <1> ;       rdi -> Ptr to the start of the region we just read into memory
   207                              <1> ;       r10 = Original requested byte count
   208                              <1> ;Output: ZF=ZE => Found EOF in file (or ecx = 0)
   209                              <1> ;        ZF=NZ => No EOF found in file!
   210                              <1> ;       ecx = Count of relevant bytes in the buffer
   211 000005D9 F605(04000000)FF    <1>     test byte [noEofChar], -1   ;If set, binary semantics!
   212 000005E0 7542                <1>     jnz .binScan
   213                              <1> ;Here we scan for ^Z char
   214 000005E2 57                  <1>     push rdi
   215 000005E3 51                  <1>     push rcx
   216 000005E4 B81A000000          <1>     mov eax, EOF
   217 000005E9 85C9                <1>     test ecx, ecx   ;If ecx is 0, skip the scan! Pretend we hit an EOF
   218 000005EB 7408                <1>     jz .ascNoEof
   219 000005ED F2AE                <1>     repne scasb
   220 000005EF 7504                <1>     jne .ascNoEof
   221 000005F1 9C                  <1>     pushfq
   222 000005F2 FFC1                <1>     inc ecx         ;Increment by 1 to include the ptr to the EOF char itself!
   223 000005F4 9D                  <1>     popfq
   224                              <1> .ascNoEof:
   225 000005F5 89CF                <1>     mov edi, ecx    ;Save the byte count in edi (rdi)
   226 000005F7 59                  <1>     pop rcx         ;Get back the original byte count!
   227 000005F8 9C                  <1>     pushfq
   228 000005F9 29F9                <1>     sub ecx, edi    ;Get the number of chars into the string we are 
   229 000005FB 9D                  <1>     popfq
   230 000005FC 5F                  <1>     pop rdi
   231                              <1> .niceExit:
   232                              <1>     retnz               ;If we are here and ZF=NZ, exit as no EOF hit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000005FD 75(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   233                              <1> ;Now we adjust the end of the file, if the end of the file was a ^Z
   234                              <1> ; so that if the last char was not an LF, we add a CRLF pair
   235 000005FF 9C                  <1>     pushfq
   236 00000600 57                  <1>     push rdi
   237 00000601 4801CF              <1>     add rdi, rcx    ;Go the the end of the buffer
   238 00000604 48FFCF              <1>     dec rdi
   239 00000607 48393D(0E000000)    <1>     cmp qword [memPtr], rdi ;Are we at the head of the buffer?
   240 0000060E 7405                <1>     je .putCRLF ;If so, forcefully place a CRLF pair
   241 00000610 803F0A              <1>     cmp byte [rdi], LF
   242 00000613 740C                <1>     je .exit
   243                              <1> .putCRLF:
   244 00000615 66C747010D0A        <1>     mov word [rdi + 1], CRLF
   245 0000061B 81C102000000        <1>     add ecx, 2  ;We added two chars to the count
   246                              <1> .exit:
   247 00000621 5F                  <1>     pop rdi
   248 00000622 9D                  <1>     popfq
   249                              <1>     return
    13                              <2> %%_ret:
    14 00000623 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   250                              <1> .binScan:
   251                              <1> ;Here we deal with binary semantics
   252 00000624 4439D1              <1>     cmp ecx, r10d   ;If we read less bytes than desired, check if an EOF present!
   253 00000627 7205                <1>     jb .binLess
   254 00000629 31C0                <1>     xor eax, eax
   255 0000062B FFC0                <1>     inc eax         ;Clear ZF
   256                              <1>     return
    13                              <2> %%_ret:
    14 0000062D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> .binLess:
   258 0000062E 67E308              <1>     jecxz .binEofExit ;If ecx = 0, just adjust end and exit!
   259 00000631 803C0F1A            <1>     cmp byte [rdi + rcx], EOF   ;Was this byte an EOF char?
   260 00000635 7502                <1>     jne .binEofExit
   261 00000637 FFC9                <1>     dec ecx             ;Drop it from the count.
   262                              <1> .binEofExit:
   263 00000639 31C0                <1>     xor eax, eax
   264 0000063B EBC0                <1>     jmp short .niceExit
   265                              <1> 
   266                              <1> 
   267                              <1> markFileModified:
   268 0000063D C605(38000000)FF    <1>     mov byte [modFlag], -1
   269                              <1>     return
    13                              <2> %%_ret:
    14 00000644 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> getModifiedStatus:
   272                              <1> ;If returns ZF=ZE, file NOT modified.
   273                              <1> ;Else, file modified.
   274 00000645 F605(38000000)FF    <1>     test byte [modFlag], -1
   275                              <1>     return
    13                              <2> %%_ret:
    14 0000064C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> delBkup:
   278                              <1> ;Finally, we delete the backup if it exists. If it doesn't delete
   279                              <1> ; for some reason, might be problematic later but not a big issue.
   280                              <1> ;If returns with CF=CY, know that the backup didn't delete...
   281                              <1> ;Preserves all registers!
   282 0000064D F605(39000000)FF    <1>     test byte [bkupDel], -1     ;If set, backup already deleted
   283                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000654 75(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   284 00000656 E8EAFFFFFF          <1>     call getModifiedStatus   ;If clear, buffer has not been modified.
   285                              <1>     retz                        
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000065B 74(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   286 0000065D F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;If the file is new then it has no backup!
   287                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000664 75(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   288 00000666 C605(39000000)FF    <1>     mov byte [bkupDel], -1      ;Now deleting backup
   289 0000066D 50                  <1>     push rax
   290 0000066E 52                  <1>     push rdx
   291 0000066F 57                  <1>     push rdi
   292 00000670 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   293 00000677 B842414B00          <1>     mov eax, "BAK"
   294 0000067C AB                  <1>     stosd
   295 0000067D 488D15(BE000000)    <1>     lea rdx, bkupfile
   296 00000684 B800410000          <1>     mov eax, 4100h
   297 00000689 CD21                <1>     int 21h
   298 0000068B 5F                  <1>     pop rdi
   299 0000068C 5A                  <1>     pop rdx
   300 0000068D 58                  <1>     pop rax
   301                              <1>     retnc  ;Could overwrite first byte of this function with a ret 0:)
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000068E 73(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   302                              <1>     ;I like my idea... but no, we need the flag.
   303 00000690 488D15(09010000)    <1>     lea rdx, badBackDel
   304 00000697 E8BB050000          <1>     call printString
   305                              <1>     retToDOS errBadBak
    94 0000069C B8044C0000          <2>  mov eax, 04C00h | %1
    95 000006A1 CD21                <2>  int 21h
   306                              <1> 
   307                              <1> 
   308                              <1> parseEntry:
   309                              <1> ;Parses a single command line argument.
   310                              <1> ;. means current line
   311                              <1> ;+ means positive number offset from current line
   312                              <1> ;- means negative number offset from current line
   313                              <1> ;# means line after the last line in file ALWAYS.
   314                              <1> ; This is represented in the argument var as the 
   315                              <1> ; word 0FFFFh.
   316                              <1> ;A naked number is interpreted as a line number 
   317                              <1> ; directly.
   318                              <1> ;Maximum input value per argument: 65529
   319                              <1> ;--------------------------------------------
   320                              <1> ;Input: rsi -> String to parse
   321                              <1> ;Output: (e)bx = Value of argument
   322                              <1> ;          rsi -> First char past the end of arg
   323                              <1> ;--------------------------------------------
   324 000006A3 E89F000000          <1>     call skipSpaces ;Move rsi past first non-space char and get al = First char
   325 000006A8 3C2B                <1>     cmp al, "+" ;Positive offset from current line
   326 000006AA 7444                <1>     je .plus
   327 000006AC 3C2D                <1>     cmp al, "-" ;Negative offset from current line
   328 000006AE 7454                <1>     je .minus
   329 000006B0 3C2E                <1>     cmp al, "." ;Current line, advance ptr to command terminator
   330 000006B2 746E                <1>     je .dot
   331 000006B4 3C23                <1>     cmp al, "#" ;Last line (-1), advance ptr to command terminator
   332 000006B6 7478                <1>     je .pound
   333 000006B8 31DB                <1>     xor ebx, ebx
   334 000006BA 31C9                <1>     xor ecx, ecx
   335                              <1> .getArg:
   336 000006BC 3C30                <1>     cmp al, "0"
   337 000006BE 7222                <1>     jb .endOfArg
   338 000006C0 3C39                <1>     cmp al, "9"
   339 000006C2 771E                <1>     ja .endOfArg
   340 000006C4 81FB99190000        <1>     cmp ebx, 0FFFFh/0Ah ;If we are gonna go above the max, fail now
   341 000006CA 0F832C060000        <1>     jae printComErr
   342 000006D0 FFC9                <1>     dec ecx ;Indicate we have a valid digit
   343 000006D2 2C30                <1>     sub al, "0"
   344 000006D4 678D1C9B            <1>     lea ebx, dword [4*ebx + ebx]    ;5*ebx
   345 000006D8 D1E3                <1>     shl ebx, 1          ;2*5*ebx = 10*ebx
   346 000006DA 0FB6C0              <1>     movzx eax, al
   347 000006DD 01C3                <1>     add ebx, eax
   348 000006DF AC                  <1>     lodsb   ;Get the next char
   349 000006E0 EBDA                <1>     jmp short .getArg
   350                              <1> .endOfArg:
   351 000006E2 85C9                <1>     test ecx, ecx
   352                              <1>     retz    ;If no char provided, exit silently. Var already 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000006E4 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000006E6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   353 000006E7 85DB                <1>     test ebx, ebx   
   354 000006E9 0F840D060000        <1>     jz printComErr  ;Dont allow 0 as an argument
   355                              <1>     return
    13                              <2> %%_ret:
    14 000006EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   356                              <1> .plus:
   357 000006F0 E844000000          <1>     call .validSpecial
   358 000006F5 E8A9FFFFFF          <1>     call parseEntry ;Now parse the entry again
   359 000006FA 0FB705(1E000000)    <1>     movzx eax, word [curLineNum]
   360 00000701 01C3                <1>     add ebx, eax    ;Only the low word is considered!!
   361                              <1>     return
    13                              <2> %%_ret:
    14 00000703 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   362                              <1> .minus:
   363 00000704 E830000000          <1>     call .validSpecial
   364 00000709 E895FFFFFF          <1>     call parseEntry ;Now parse the entry again, get result in ebx
   365 0000070E 0FB705(1E000000)    <1>     movzx eax, word [curLineNum]
   366 00000715 29D8                <1>     sub eax, ebx    ;Now get the differnece and ...
   367 00000717 89C3                <1>     mov ebx, eax    ;save the difference in ebx
   368 00000719 B801000000          <1>     mov eax, 1
   369 0000071E 0F48D8              <1>     cmovs ebx, eax  ;If the difference is less than 0, return to line 1
   370                              <1>     return
    13                              <2> %%_ret:
    14 00000721 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   371                              <1> .dot:
   372 00000722 E812000000          <1>     call .validSpecial
   373 00000727 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Goto current line (starts from 1)
   374 0000072E AC                  <1>     lodsb
   375                              <1>     return
    13                              <2> %%_ret:
    14 0000072F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   376                              <1> .pound:
   377 00000730 E804000000          <1>     call .validSpecial
   378 00000735 FFCB                <1>     dec ebx         ;Go to last line
   379 00000737 AC                  <1>     lodsb
   380                              <1>     return
    13                              <2> %%_ret:
    14 00000738 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   381                              <1> .validSpecial:
   382                              <1> ;Returns if it is a valid case to do so. Else no
   383 00000739 803D(D8010000)04    <1>     cmp byte [argCnt], 4    ;Argument 2 is for the count
   384 00000740 0F84B6050000        <1>     je printComErr
   385                              <1>     return
    13                              <2> %%_ret:
    14 00000746 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   386                              <1> 
   387                              <1> skipSpaces:
   388                              <1> ;Also skips tabs
   389                              <1> ;Input: rsi must point to the start of the data string
   390                              <1> ;Output: rsi points to the first non-space char
   391                              <1> ;           al = First non-space char
   392 00000747 AC                  <1>     lodsb
   393 00000748 3C20                <1>     cmp al, " "
   394 0000074A 74FB                <1>     je short skipSpaces  
   395 0000074C 3C09                <1>     cmp al, TAB
   396 0000074E 74F7                <1>     je short skipSpaces
   397                              <1>     return
    13                              <2> %%_ret:
    14 00000750 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> getPtrToStr:
   400                              <1> ;Gets a pointer to the string number specified.
   401                              <1> ;Input: eax = String number to get a pointer to
   402                              <1> ;Output: rsi -> First byte of the string selected
   403 00000751 51                  <1>     push rcx
   404 00000752 56                  <1>     push rsi
   405 00000753 488B35(0E000000)    <1>     mov rsi, qword [memPtr] ;Get a pointer to the area to read
   406                              <1>     
   407                              <1> .exit:
   408 0000075A 5E                  <1>     pop rsi
   409 0000075B 59                  <1>     pop rcx
   410                              <1>     return
    13                              <2> %%_ret:
    14 0000075C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> ;---------------------------------------------------------------------------
   413                              <1> ;                  !!!! IMPORTANT Int 23h HANDLERS !!!!
   414                              <1> ;---------------------------------------------------------------------------
   415                              <1> i23hInsert:
   416                              <1> ;^C handler for insert!
   417 0000075D 488D25(40060000)    <1>     lea rsp, stackTop
   418 00000764 FC                  <1>     cld
   419 00000765 E8F9040000          <1>     call printCRLF
   420 0000076A E894030000          <1>     call insertLine.cleanInsert ;We now reset the state of the memory
   421 0000076F E90CFDFFFF          <1>     jmp nextCmd     ;Now go to the next command in the command line!
   422                              <1> 
   423                              <1> i23h:
   424                              <1> ;^C handler. Reset the stack pointer and jump to get command
   425 00000774 488D25(40060000)    <1>     lea rsp, stackTop
   426 0000077B FC                  <1>     cld
   427 0000077C E8E2040000          <1>     call printCRLF
   428 00000781 E9F5FBFFFF          <1>     jmp getCommand  ;Now jump to get the command
   429                              <1> 
   430                              <1> 
   431                              <1> ;Remove before finishing!
   432                              <1> _unimplementedFunction:
   433 00000786 488D1508000000      <1>     lea rdx, .str
   434 0000078D B800090000          <1>     mov eax, 0900h
   435 00000792 CD21                <1>     int 21h
   436                              <1>     return
    13                              <2> %%_ret:
    14 00000794 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437 00000795 0D0A45584345505449- <1> .str:   db CR,LF,"EXCEPTION: UNIMPLEMENTED FUNCTION CALLED",CR,LF,"$"
   437 0000079E 4F4E3A20554E494D50- <1>
   437 000007A7 4C454D454E54454420- <1>
   437 000007B0 46554E4354494F4E20- <1>
   437 000007B9 43414C4C45440D0A24  <1>
    36                                  %include "./Source/edfunc.asm"
     1                              <1> ;This is where the main user selectable routines are
     2                              <1> ;All arguments specified are signed words
     3                              <1> 
     4                              <1> ;Arguments above these limits will throw an error and the input
     5                              <1> ; will be discarded.
     6                              <1> 
     7                              <1> appendLines:
     8                              <1> ;If the file is not fully loaded in arena, allows you to load 
     9                              <1> ; the next portion into the arena. Essentially ignores the 
    10                              <1> ; input and always fills up to the 3/4 limit.
    11                              <1> ;--------------------------------------------
    12                              <1> ;Invoked by: [n]A (number of bytes to read)
    13                              <1> ;--------------------------------------------
    14 000007C2 803D(D8010000)01    <1>     cmp byte [argCnt], 1
    15 000007C9 0F852D050000        <1>     jne printComErr
    16 000007CF F605(05000000)FF    <1>     test byte [eofReached], -1
    17 000007D6 0F8531010000        <1>     jnz .outEofStr   ;Print the eof reached string
    18 000007DC 488B15(28000000)    <1>     mov rdx, qword [eofPtr]
    19 000007E3 803D(D9010000)00    <1>     cmp byte [arg1], 0          ;Arg <> 0 means we fill the arena
    20 000007EA 7509                <1>     jne .argGiven
    21 000007EC 483B15(16000000)    <1>     cmp rdx, qword [fillPtr]    ;Are we at/past the fill point?
    22                              <1>     retnb   ;Return if so!
    69                              <2> cret nb
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000007F3 73(94)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    23                              <1> .argGiven:
    24                              <1> ;rdx -> The start of the read in buffer
    25 000007F5 488B0D(30000000)    <1>     mov rcx, qword [endOfArena] ;Fill the arena
    26 000007FC 4829D1              <1>     sub rcx, rdx        ;Get the number of bytes to read
    27 000007FF 0F84EE040000        <1>     jz printMemErr      ;If we @ end of arena, free some space!!
    28 00000805 4989CA              <1>     mov r10, rcx        ;Use r10 to save byte count we want to read in
    29 00000808 0FB71D(3A000000)    <1>     movzx ebx, word [readHdl]
    30 0000080F B8003F0000          <1>     mov eax, 3F00h
    31 00000814 CD21                <1>     int 21h
    32 00000816 39C8                <1>     cmp eax, ecx
    33 00000818 7426                <1>     je .notEof
    34                              <1>     ;Check this is really the eof (by trying to read one more byte)
    35 0000081A 50                  <1>     push rax    ;Save the byte count
    36 0000081B 4801C2              <1>     add rdx, rax
    37 0000081E B901000000          <1>     mov ecx, 1
    38 00000823 B8003F0000          <1>     mov eax, 3F00h
    39 00000828 CD21                <1>     int 21h
    40 0000082A 89C1                <1>     mov ecx, eax
    41 0000082C 58                  <1>     pop rax     ;Get original byte count back
    42 0000082D 0F82DA040000        <1>     jc badReadFail
    43 00000833 85C9                <1>     test ecx, ecx   ;Did we read bytes?
    44 00000835 7507                <1>     jnz .notEofInc  ;If not, inc byte count!
    45 00000837 C605(05000000)FF    <1>     mov byte [eofReached], -1   ;Else, set the flag!!
    46                              <1> .notEofInc:
    47 0000083E FFC0                <1>     inc eax
    48                              <1> .notEof:
    49 00000840 4801C2              <1>     add rdx, rax        ;rax has the number of bytes we have read
    50 00000843 89C1                <1>     mov ecx, eax        ;Save the byte count in ecx
    51 00000845 488B3D(28000000)    <1>     mov rdi, qword [eofPtr] ;Point rdi to the start of the read in region
    52 0000084C 4989CB              <1>     mov r11, rcx            ;Save real byte count in r11 temporarily
    53 0000084F E885FDFFFF          <1>     call checkEOF
    54 00000854 7507                <1>     jnz .noSetEof   ;Set the byte here if ZF=ZE on return
    55 00000856 C605(05000000)FF    <1>     mov byte [eofReached], -1   ;to keep it all on the same level!
    56                              <1> .noSetEof:
    57 0000085D 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]  ;Get the line number to read in to
    58 00000864 85DB                <1>     test ebx, ebx
    59 00000866 7521                <1>     jnz .fndLine    ;If we are searching for line 0, go to the end
    60 00000868 4889F8              <1>     mov rax, rdi
    61 0000086B 4801C8              <1>     add rax, rcx    ;Move the the end of the text we read in
    62 0000086E 483B05(16000000)    <1>     cmp rax, qword [fillPtr]
    63 00000875 7612                <1>     jbe .fndLine    ;If we are leq than fill point, scan for the lnnum  in bx!
    64                              <1>     ;Else we search for one line past the fillPtr at most
    65 00000877 4889C1              <1>     mov rcx, rax
    66 0000087A 488B3D(16000000)    <1>     mov rdi, qword [fillPtr]
    67 00000881 4829F9              <1>     sub rcx, rdi    ;Get the excess of bytes to scan for the line
    68 00000884 BB01000000          <1>     mov ebx, 1      ;Make sure we count only 1 line!
    69                              <1> .fndLine:
    70 00000889 31D2                <1>     xor edx, edx    ;Set the line counter to start at 0
    71 0000088B E800FDFFFF          <1>     call findLineCore   ;Returns al = LF, rdi -> either LF or first char after ecx
    72 00000890 3847FF              <1>     cmp byte [rdi - 1], al
    73 00000893 742F                <1>     je .lineOk
    74                              <1> ;Here we ran out of chars to scan through
    75 00000895 F605(05000000)FF    <1>     test byte [eofReached], -1
    76 0000089C 7510                <1>     jnz .findPrevLine   ;If not at EOF, and ran out of chars, go to prev line
    77                              <1>     ;Else, at EOF and ran out of chars, add a CRLF
    78 0000089E B80D0A0000          <1>     mov eax, CRLF   ;Store in the empty space pointed to by rdi
    79 000008A3 66AB                <1>     stosw    
    80 000008A5 4981C302000000      <1>     add r11, 2  ;Added two more chars to the count
    81 000008AC EB16                <1>     jmp short .lineOk
    82                              <1> .findPrevLine:
    83 000008AE FFCA                <1>     dec edx     ;Remember we have to dec the line number
    84 000008B0 48FFCF              <1>     dec rdi     ;Point to the char previous to start searching at
    85 000008B3 8B0D(06000000)      <1>     mov ecx, dword [arenaSize]  ;Get the size of the allocation to search thru
    86 000008B9 FD                  <1>     std
    87 000008BA F2AE                <1>     repne scasb ;Scan for the LF in al
    88 000008BC FC                  <1>     cld
    89 000008BD 4881C702000000      <1>     add rdi, 2  ;Go to first char past it
    90                              <1> .lineOk:
    91 000008C4 C6071A              <1>     mov byte [rdi], EOF ;Add the terminating EOF char here!
    92 000008C7 4C89D9              <1>     mov rcx, r11    ;Get back the real byte count
    93 000008CA 48030D(0E000000)    <1>     add rcx, qword [memPtr] ;Get ptr to last byte we actually read in
    94 000008D1 4829F9              <1>     sub rcx, rdi    ;Get the excess number of chars we added since reading in
    95 000008D4 48873D(28000000)    <1>     xchg qword [eofPtr], rdi    ;Swap the old and new EOF char ptrs
    96 000008DB 4801CF              <1>     add rdi, rcx    ;Adjust file ptr by amount we read in but ignored
    97 000008DE 4885FF              <1>     test rdi, rdi
    98 000008E1 741E                <1>     jz .noIgnore    ;We ignored no bytes read in, proceed
    99                              <1>     ;Else, we are at the previous line, so move file ptr there!
   100 000008E3 53                  <1>     push rbx
   101 000008E4 52                  <1>     push rdx
   102 000008E5 4889FA              <1>     mov rdx, rdi
   103 000008E8 48B9FFFFFFFFFFFFFF- <1>     mov rcx, -1
   103 000008F1 FF                  <1>
   104 000008F2 B801420000          <1>     mov eax, 4201h  ;Seek from current position by the amount in dx
   105 000008F7 CD21                <1>     int 21h
   106 000008F9 5A                  <1>     pop rdx
   107 000008FA 5B                  <1>     pop rbx
   108 000008FB 0F820C040000        <1>     jc badReadFail
   109                              <1> .noIgnore:
   110 00000901 39D3                <1>     cmp ebx, edx    ;Is the line number specified = line number we are at?
   111 00000903 7515                <1>     jne .checkEnd
   112 00000905 C605(05000000)00    <1>     mov byte [eofReached], 0    ;Reset byte if this is the case (adding new lines)
   113                              <1>     return
    13                              <2> %%_ret:
    14 0000090C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> .outEofStr:
   115 0000090D 488D15(47000000)    <1>     lea rdx, eofStr
   116 00000914 E83E030000          <1>     call printString
   117                              <1>     return
    13                              <2> %%_ret:
    14 00000919 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .checkEnd:
   119 0000091A F605(05000000)FF    <1>     test byte [eofReached], -1
   120 00000921 75EA                <1>     jnz .outEofStr
   121 00000923 F605(64020000)FF    <1>     test byte [noAppendErr], -1 ;Ignore EOF errors on initial load!
   122                              <1>     retnz 
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000092A 75(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   123 0000092C E9C2030000          <1>     jmp printMemErr
   124                              <1> 
   125                              <1> copyLines:
   126                              <1> ;Duplicates a line or a range of lines to a position specifed 
   127                              <1> ;   (non-overlapping) 
   128                              <1> ;--------------------------------------------
   129                              <1> ;Invoked by: [line],[line],line[,count]C
   130                              <1> ;--------------------------------------------
   131 00000931 E950FEFFFF          <1>     jmp _unimplementedFunction
   132                              <1> 
   133                              <1> deleteLines:
   134                              <1> ;Deletes one or a range of lines
   135                              <1> ;--------------------------------------------
   136                              <1> ;Invoked by: [line][,line]D
   137                              <1> ;--------------------------------------------
   138 00000936 E94BFEFFFF          <1>     jmp _unimplementedFunction
   139                              <1> 
   140                              <1> editLine:
   141                              <1> ;Displays a line and allows it to be edited
   142                              <1> ;--------------------------------------------
   143                              <1> ;Invoked by: [line]
   144                              <1> ;--------------------------------------------
   145 0000093B E946FEFFFF          <1>     jmp _unimplementedFunction
   146 00000940 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   147 00000947 0F85AF030000        <1>     jne printComErr
   148 0000094D 48FF0D(D0010000)    <1>     dec qword [charPtr] ;Adjust ptr to point to the CR or ;
   149 00000954 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]  ;Get the line number
   150 0000095B 85DB                <1>     test ebx, ebx
   151 0000095D 7509                <1>     jnz .notNext
   152                              <1>     ;If 0, means next line
   153 0000095F 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Get the current line number
   154 00000966 FFC3                <1>     inc ebx ;and go to the next line
   155                              <1> .notNext:
   156 00000968 E8F1FBFFFF          <1>     call findLine   ;rdi points to the end of memory selected line
   157 0000096D 668915(1E000000)    <1>     mov word [curLineNum], dx
   158 00000974 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   159                              <1>     retnz   ;If the line specified was past the end, we return now
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000097B 75(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   160 0000097D 483B3D(28000000)    <1>     cmp rdi, qword [eofPtr]
   161                              <1>     rete    ;Return if these are equal!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000984 74(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   162                              <1> 
   163                              <1> endEdit:
   164                              <1> ;Inserts a EOF char at the end of the file if one not already present
   165                              <1> ; renames the original file (if applicable) to have .bak ending and
   166                              <1> ; renames the working file to the name originally specified.
   167                              <1> ;--------------------------------------------
   168                              <1> ;Invoked by: E
   169                              <1> ;--------------------------------------------
   170 00000986 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   171 0000098D 0F8569030000        <1>     jne printComErr
   172 00000993 803D(D9010000)00    <1>     cmp byte [arg1], 0
   173 0000099A 0F854A030000        <1>     jne printArgError
   174 000009A0 F605(02000000)FF    <1>     test byte [roFlag], -1  ;If we are readonly, delete $$$ and quit
   175 000009A7 0F85CE010000        <1>     jnz quit.roQuit
   176 000009AD C605(64020000)FF    <1>     mov byte [noAppendErr], -1  ;Suppress errors again
   177                              <1> .writeLp:
   178 000009B4 BBFFFFFFFF          <1>     mov ebx, -1             ;Write out max lines
   179 000009B9 E830020000          <1>     call writeLines.goFindLine
   180 000009BE F605(05000000)FF    <1>     test byte [eofReached], -1  ;Are we at EOF yet?
   181 000009C5 7517                <1>     jnz .writeDone  ;If yes, we are done writing to disk
   182 000009C7 C605(D8010000)01    <1>     mov byte [argCnt], 1    ;Else we keep reading the file
   183 000009CE 66C705(D9010000)FF- <1>     mov word [arg1], -1     ;Now fill the arena with lines
   183 000009D6 FF                  <1>
   184 000009D7 E8E6FDFFFF          <1>     call appendLines
   185 000009DC EBD6                <1>     jmp short .writeLp      ;And write them out again
   186                              <1> .writeDone:
   187 000009DE 488B15(28000000)    <1>     mov rdx, qword [eofPtr] ;Now write out the EOF char to the file
   188 000009E5 B901000000          <1>     mov ecx, 1
   189 000009EA 0FB71D(3C000000)    <1>     movzx ebx, word [writeHdl]
   190 000009F1 B800400000          <1>     mov eax, 4000h
   191 000009F6 CD21                <1>     int 21h
   192 000009F8 0FB71D(3A000000)    <1>     movzx ebx, word [readHdl]
   193 000009FF B8003E0000          <1>     mov eax, 3E00h  ;Close the reading file!
   194 00000A04 CD21                <1>     int 21h
   195 00000A06 0FB71D(3C000000)    <1>     movzx ebx, word [writeHdl]  ;Get the write handle
   196 00000A0D B8003E0000          <1>     mov eax, 3E00h  ;Close the temp file!
   197 00000A12 CD21                <1>     int 21h
   198 00000A14 F605(03000000)FF    <1>     test byte [newFileFlag], -1  ;If this is new file, skip this!
   199 00000A1B 7522                <1>     jnz short .skipBkup
   200                              <1>     ;Now set the backup extension
   201 00000A1D 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   202 00000A24 B842414B00          <1>     mov eax, "BAK"
   203 00000A29 AB                  <1>     stosd
   204 00000A2A 488D15(3E000000)    <1>     lea rdx, pathspec
   205 00000A31 488D3D(BE000000)    <1>     lea rdi, bkupfile
   206 00000A38 B800560000          <1>     mov eax, 5600h
   207 00000A3D CD21                <1>     int 21h
   208                              <1> .skipBkup:
   209 00000A3F B824242400          <1>     mov eax, "$$$"  ;Always set this as triple dollar as this is saved name!
   210 00000A44 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   211 00000A4B AB                  <1>     stosd
   212 00000A4C 488D15(BE000000)    <1>     lea rdx, bkupfile
   213 00000A53 488D3D(3E000000)    <1>     lea rdi, pathspec   ;Now name the temp file by the og name!
   214 00000A5A B800560000          <1>     mov eax, 5600h
   215 00000A5F CD21                <1>     int 21h
   216                              <1>     retToDOS errOk ;Let DOS do cleanup of memory allocations!
    94 00000A61 B8004C0000          <2>  mov eax, 04C00h | %1
    95 00000A66 CD21                <2>  int 21h
   217                              <1> 
   218                              <1> insertLine:
   219                              <1> ;Inserts a line
   220                              <1> ;--------------------------------------------
   221                              <1> ;Invoked by: [line]I
   222                              <1> ;--------------------------------------------
   223 00000A68 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   224 00000A6F 0F8587020000        <1>     jne printComErr
   225 00000A75 488D15E1FCFFFF      <1>     lea rdx, i23hInsert ;Set to the insert handler
   226 00000A7C B823250000          <1>     mov eax, 2523h
   227 00000A81 CD21                <1>     int 21h
   228 00000A83 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]  ;Get the line number
   229 00000A8A 85DB                <1>     test ebx, ebx
   230 00000A8C 7507                <1>     jnz .notNext
   231                              <1>     ;If 0, means next line
   232 00000A8E 0FB71D(1E000000)    <1>     movzx ebx, word [curLineNum]    ;Get the current line number
   233                              <1> .notNext:
   234 00000A95 E8C4FAFFFF          <1>     call findLine   ;Set line number in dx and rdi -> Space in memory!
   235 00000A9A 89D3                <1>     mov ebx, edx    ;Move the actual line number into ebx
   236 00000A9C 488B15(30000000)    <1>     mov rdx, qword [endOfArena]
   237 00000AA3 E881FAFFFF          <1>     call makeSpace  ;Make space to insert new line!
   238                              <1> .inLp:
   239 00000AA8 E89BFAFFFF          <1>     call setLineVars
   240 00000AAD E8C9010000          <1>     call printLineNum
   241 00000AB2 488D1582FEFFFF      <1>     lea rdx, editLine
   242 00000AB9 B8000A0000          <1>     mov eax, 0A00h  ;Full on edit mode
   243 00000ABE CD21                <1>     int 21h
   244 00000AC0 E8A5010000          <1>     call printLF
   245                              <1>     ;Check if the first char in the buffer is a EOF
   246 00000AC5 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the string portion immediately
   247 00000AC9 803E1A              <1>     cmp byte [rsi], EOF         ;Apparent EDLIN behaviour, terminate insert so!
   248 00000ACC 7435                <1>     je .cleanInsert
   249 00000ACE E8F5F9FFFF          <1>     call doCmdChar              ;Preserves rdi, the curLinePtr
   250 00000AD3 0FB64EFF            <1>     movzx ecx, byte [rsi - 1]   ;Get the number of chars typed in
   251 00000AD7 4889FA              <1>     mov rdx, rdi                
   252 00000ADA FFC1                <1>     inc ecx                     ;Make space for terminating LF too
   253 00000ADC 4801CA              <1>     add rdx, rcx                ;Check if we will go out of bounds
   254 00000ADF 483B15(30000000)    <1>     cmp rdx, qword [endOfArena]
   255 00000AE6 730E                <1>     jae .inBad
   256 00000AE8 4839EA              <1>     cmp rdx, rbp                ;Are we past file Eof?
   257 00000AEB 7309                <1>     jae .inBad                  ;Jump if so
   258 00000AED F3A4                <1>     rep movsb                   ;Else copy from edit line to space made
   259 00000AEF B00A                <1>     mov al, LF
   260 00000AF1 AA                  <1>     stosb                       ;Store the line feed too
   261 00000AF2 FFC3                <1>     inc ebx                     ;Go to next line :)
   262 00000AF4 EBB2                <1>     jmp short .inLp
   263                              <1> .inBad:
   264                              <1>     breakpoint
    89 00000AF6 6687DB              <2> xchg bx, bx
   265 00000AF9 E805000000          <1>     call .cleanInsert
   266 00000AFE E9F0010000          <1>     jmp printMemErr
   267                              <1> .cleanInsert: 
   268                              <1> ;Undo the space we made in memory!! 
   269 00000B03 488B35(28000000)    <1>     mov rsi, qword [eofPtr] 
   270 00000B0A 488B3D(20000000)    <1>     mov rdi, qword [curLinePtr]
   271 00000B11 488B0D(30000000)    <1>     mov rcx, qword [endOfArena]
   272 00000B18 4829F1              <1>     sub rcx, rsi    ;Get the number of bytes to copy high again
   273 00000B1B 48FFC6              <1>     inc rsi         ;Go to char past EOF to source chars from
   274 00000B1E F3A4                <1>     rep movsb
   275 00000B20 48FFCF              <1>     dec rdi         ;Go back to the EOF char itself
   276 00000B23 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   277 00000B2A 488D1543FCFFFF      <1>     lea rdx, i23h
   278 00000B31 B823250000          <1>     mov eax, 2523h  ;Set Interrupt handler for Int 23h
   279 00000B36 CD21                <1>     int 21h
   280                              <1>     return
    13                              <2> %%_ret:
    14 00000B38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> listLines:
   283                              <1> ;Prints a line or a number of lines.
   284                              <1> ;Defaults to from current line print 23 lines
   285                              <1> ;--------------------------------------------
   286                              <1> ;Invoked by: [line][,line]L
   287                              <1> ;--------------------------------------------
   288 00000B39 E948FCFFFF          <1>     jmp _unimplementedFunction
   289                              <1> 
   290                              <1> pageLines:
   291                              <1> ;Prints a page of lines
   292                              <1> ;Defaults to from current line to print 23 lines
   293                              <1> ;--------------------------------------------
   294                              <1> ;Invoked by: [line][,line]P
   295                              <1> ;--------------------------------------------
   296 00000B3E E943FCFFFF          <1>     jmp _unimplementedFunction
   297                              <1> 
   298                              <1> moveLines:
   299                              <1> ;Moves a block of lines elsewhere (non overlapping moves only)
   300                              <1> ;--------------------------------------------
   301                              <1> ;Invoked by: [line][line],lineM
   302                              <1> ;--------------------------------------------
   303 00000B43 E93EFCFFFF          <1>     jmp _unimplementedFunction
   304                              <1> 
   305                              <1> quit:
   306                              <1> ;Quits EDLIN, not saving work and deleting working file.
   307                              <1> ;--------------------------------------------
   308                              <1> ;Invoked by: Q
   309                              <1> ;--------------------------------------------
   310 00000B48 803D(02000000)FF    <1>     cmp byte [roFlag], -1   ;If the flag is clear, dont prompt, just quit.
   311 00000B4F 742A                <1>     je short .roQuit
   312 00000B51 488D15(0B020000)    <1>     lea rdx, exitQuit
   313 00000B58 B800090000          <1>     mov eax, 0900h
   314 00000B5D CD21                <1>     int 21h
   315 00000B5F B8010C0000          <1>     mov eax, 0C01h  ;Flush input buffer and read a single char from stdin
   316 00000B64 CD21                <1>     int 21h
   317 00000B66 0FB6D8              <1>     movzx ebx, al
   318 00000B69 81E3DF000000        <1>     and ebx, 0DFh    ;Convert to upper case
   319 00000B6F 81FB59000000        <1>     cmp ebx, "Y"
   320 00000B75 0F85E8000000        <1>     jne printCRLF   ;Print CRLF and return via that return instruction
   321                              <1>     ;Delete the working file
   322                              <1> .roQuit:
   323 00000B7B 488B3D(46010000)    <1>     mov rdi, qword [fileExtPtr]
   324 00000B82 B824242400          <1>     mov eax, "$$$"
   325 00000B87 AB                  <1>     stosd
   326 00000B88 488D15(BE000000)    <1>     lea rdx, wkfile
   327 00000B8F B800410000          <1>     mov eax, 4100h  ;Delete the file
   328 00000B94 CD21                <1>     int 21h
   329                              <1>     retToDOS errOk
    94 00000B96 B8004C0000          <2>  mov eax, 04C00h | %1
    95 00000B9B CD21                <2>  int 21h
   330                              <1> 
   331                              <1> replaceText:
   332                              <1> ;Replaces all matching strings with specified string (NO REGEX)
   333                              <1> ;--------------------------------------------
   334                              <1> ;Invoked by: [line][,line][?]R[string]<EOF>[string]
   335                              <1> ;--------------------------------------------
   336 00000B9D E9E4FBFFFF          <1>     jmp _unimplementedFunction
   337                              <1> 
   338                              <1> searchText:
   339                              <1> ;Searches text for a string
   340                              <1> ;--------------------------------------------
   341                              <1> ;Invoked by: [line][,line][?]S[string]
   342                              <1> ;--------------------------------------------
   343 00000BA2 E9DFFBFFFF          <1>     jmp _unimplementedFunction
   344                              <1> 
   345                              <1> transferLines:
   346                              <1> ;Writes the lines specified to the specified file
   347                              <1> ;--------------------------------------------
   348                              <1> ;Invoked by: [line]T[d:]filename
   349                              <1> ;--------------------------------------------
   350 00000BA7 E9DAFBFFFF          <1>     jmp _unimplementedFunction
   351                              <1> 
   352                              <1> writeLines:
   353                              <1> ;Writes the current arena to disk. If no 
   354                              <1> ; n specified, EDLIN writes lines until
   355                              <1> ; 1/4 of the arena is free.
   356                              <1> ;--------------------------------------------
   357                              <1> ;Invoked by: [n]W (number of bytes to write)
   358                              <1> ;--------------------------------------------
   359                              <1> ;When invoked, must delete the backup if it not already deleted.
   360 00000BAC 803D(D8010000)01    <1>     cmp byte [argCnt], 1
   361 00000BB3 0F8743010000        <1>     ja printComErr
   362 00000BB9 0FB71D(D9010000)    <1>     movzx ebx, word [arg1]
   363 00000BC0 85DB                <1>     test ebx, ebx
   364 00000BC2 752A                <1>     jnz .goFindLine
   365                              <1>     ;If 0, means, write everything from 1/4 onwards
   366 00000BC4 8B0D(0A000000)      <1>     mov ecx, dword [freeCnt]    ;Get the count of 1/4 of the arena
   367 00000BCA 488B3D(28000000)    <1>     mov rdi, qword [eofPtr]
   368 00000BD1 4829CF              <1>     sub rdi, rcx    ;Move rdi back by a quarter
   369                              <1>     retbe           ;If the result is leq 0, fail (never will happen)
    81                              <2> cret be
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000BD4 7701                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000BD6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   370 00000BD7 483B3D(0E000000)    <1>     cmp rdi, qword [memPtr] ;Are we pointing before the start of the arena
   371                              <1>     retbe           ;Return as we have nothing to write!
    81                              <2> cret be
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00000BDE 76(D6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   372                              <1>     ;rdi now points back by a quarter
   373 00000BE0 31D2                <1>     xor edx, edx    ;Init to "line 0"
   374 00000BE2 BB01000000          <1>     mov ebx, 1      ;Find the end of the line we are
   375 00000BE7 E8A4F9FFFF          <1>     call findLineCore
   376 00000BEC EB07                <1>     jmp short .prepWrite
   377                              <1> .goFindLine:
   378 00000BEE FFC3                <1>     inc ebx     ;Find line 1 (user said 0, this means 1 for us!)
   379 00000BF0 E869F9FFFF          <1>     call findLine
   380                              <1> .prepWrite:
   381 00000BF5 E853FAFFFF          <1>     call delBkup    ;Delete the backup, all regs preserved
   382 00000BFA 4889F9              <1>     mov rcx, rdi    ;rdi points to up to where to do the write
   383 00000BFD 488B15(0E000000)    <1>     mov rdx, qword [memPtr] ;Start writing from here
   384 00000C04 4829D1              <1>     sub rcx, rdx    ;Get the byte offset into the arena
   385 00000C07 0FB71D(3C000000)    <1>     movzx ebx, word [writeHdl]
   386 00000C0E B800400000          <1>     mov eax, 4000h
   387 00000C13 CD21                <1>     int 21h
   388 00000C15 0F8205010000        <1>     jc fullDiskFail
   389 00000C1B 39C8                <1>     cmp eax, ecx
   390 00000C1D 0F85FD000000        <1>     jne fullDiskFail
   391                              <1>     ;Now pull up the rest of the arena and reset the internal line numbers
   392 00000C23 4889FE              <1>     mov rsi, rdi    ;Source chars from here
   393 00000C26 488B3D(0E000000)    <1>     mov rdi, qword [memPtr]
   394 00000C2D 48893D(20000000)    <1>     mov qword [curLinePtr], rdi
   395 00000C34 66C705(1E000000)01- <1>     mov word [curLineNum], 1    ;Go back to line 1 again
   395 00000C3C 00                  <1>
   396 00000C3D 488B0D(28000000)    <1>     mov rcx, qword [eofPtr]
   397 00000C44 4829F1              <1>     sub rcx, rsi    ;Get the number of bytes left in the arena to pull up
   398 00000C47 FFC1                <1>     inc ecx         ;Copy the EOF marker too
   399 00000C49 FC                  <1>     cld 
   400 00000C4A F3A4                <1>     rep movsb
   401 00000C4C 48FFCF              <1>     dec rdi         ;Go back to EOF
   402 00000C4F 48893D(28000000)    <1>     mov qword [eofPtr], rdi
   403                              <1>     return
    13                              <2> %%_ret:
    14 00000C56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                                  %include "./Source/edprn.asm"
     1                              <1> ;---------------------
     2                              <1> ; Print Routines here
     3                              <1> ;---------------------
     4                              <1> printString:
     5 00000C57 B800090000          <1>     mov eax, 0900h
     6 00000C5C CD21                <1>     int 21h
     7                              <1>     return
    13                              <2> %%_ret:
    14 00000C5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     8                              <1> ;----------------------------------------
     9                              <1> ; These functions print individual chars
    10                              <1> ;----------------------------------------
    11                              <1> printSpace:
    12 00000C5F B020                <1>     mov al, SPC
    13 00000C61 EB09                <1>     jmp short printChar
    14                              <1> printCRLF:
    15                              <1> ;Prints CRLF
    16 00000C63 B00D                <1>     mov al, CR
    17 00000C65 E802000000          <1>     call printChar
    18                              <1> printLF:
    19 00000C6A B00A                <1>     mov al, LF
    20                              <1> printChar:
    21                              <1> ;Input: al = Char to print
    22 00000C6C 50                  <1>     push rax    ;To preserve the rest of eax
    23 00000C6D 52                  <1>     push rdx
    24 00000C6E 0FB6D0              <1>     movzx edx, al
    25 00000C71 B800020000          <1>     mov eax, 0200h
    26 00000C76 CD21                <1>     int 21h
    27 00000C78 5A                  <1>     pop rdx
    28 00000C79 58                  <1>     pop rax
    29                              <1>     return
    13                              <2> %%_ret:
    14 00000C7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> ;------------------------------------------------
    32                              <1> ; These functions are specialised print routines
    33                              <1> ;------------------------------------------------
    34                              <1> printLineNum:
    35                              <1> ;Prints the line number in bx
    36                              <1> ;Input: bx = Line number to print
    37 00000C7B E8DFFFFFFF          <1>     call printSpace
    38 00000C80 E816000000          <1>     call printNum
    39 00000C85 B03A                <1>     mov al, ":"
    40 00000C87 E8E0FFFFFF          <1>     call printChar
    41 00000C8C 663B1D(1E000000)    <1>     cmp bx, word [curLineNum]
    42 00000C93 B020                <1>     mov al, SPC
    43 00000C95 75D5                <1>     jne printChar
    44 00000C97 B02A                <1>     mov al, "*"
    45 00000C99 EBD1                <1>     jmp short printChar
    46                              <1> 
    47                              <1> printNum:
    48                              <1> ;Takes in bx a binary word and prints the ASCII value
    49                              <1> ; with leading blanks suppressed.
    50                              <1> ;Trashes eax, ecx and edx only
    51 00000C9B 55                  <1>     push rbp
    52 00000C9C 31ED                <1>     xor ebp, ebp    ;If not zero, stop suppressing leading zeros
    53 00000C9E 0FB7D3              <1>     movzx edx, bx   ;Init with value in edx
    54                              <1> ;Do 10000's
    55 00000CA1 B910270000          <1>     mov ecx, 10000
    56 00000CA6 E827000000          <1>     call .doCompute
    57                              <1> ;Do 1000's
    58 00000CAB B9E8030000          <1>     mov ecx, 1000
    59 00000CB0 E81D000000          <1>     call .doCompute
    60                              <1> ;Do 100's
    61 00000CB5 B964000000          <1>     mov ecx, 100
    62 00000CBA E813000000          <1>     call .doCompute
    63                              <1> ;Do 10's
    64 00000CBF B90A000000          <1>     mov ecx, 10
    65 00000CC4 E809000000          <1>     call .doCompute
    66                              <1> ;Do 1's, mild optimisation to avoid div move the remainder directly
    67 00000CC9 89D0                <1>     mov eax, edx    ;Remainder in edx
    68 00000CCB E808000000          <1>     call .printDig  ;Print the value in eax
    69                              <1> ;Exit
    70 00000CD0 5D                  <1>     pop rbp
    71                              <1>     return
    13                              <2> %%_ret:
    14 00000CD1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> .doCompute:
    73                              <1> ;Input: ecx = Divisor for place value
    74                              <1> ;       edx = Remainder left to divide
    75 00000CD2 89D0                <1>     mov eax, edx    ;Moves the prev. remainder into eax for dividing
    76 00000CD4 31D2                <1>     xor edx, edx    
    77 00000CD6 F7F1                <1>     div ecx         
    78                              <1> .printDig:
    79                              <1> ;Now print the digit in al, the quotient. edx has the remainder
    80 00000CD8 85ED                <1>     test ebp, ebp
    81 00000CDA 750A                <1>     jnz .pDigOk
    82 00000CDC 85C0                <1>     test eax, eax   ;Is ebp = 0 and value to print 0? 
    83 00000CDE 0F847BFFFFFF        <1>     jz printSpace   ;If so, print a space char (retz for no suppression)
    84 00000CE4 FFCD                <1>     dec ebp         ;Else, now set ebp and print al
    85                              <1> .pDigOk:
    86 00000CE6 0430                <1>     add al, "0"     ;Convert into an ASCII value
    87 00000CE8 EB82                <1>     jmp short printChar   ;Return through printchar
    38                                  %include "./Source/ederr.asm"
     1                              <1> ;---------------------
     2                              <1> ; Error Routines here
     3                              <1> ;---------------------
     4                              <1> 
     5                              <1> printArgError:
     6 00000CEA 488D15(47010000)    <1>     lea rdx, badInput
     7 00000CF1 EB10                <1>     jmp short printErr
     8                              <1> printMemErr:
     9 00000CF3 488D15(6A010000)    <1>     lea rdx, badMemFull
    10 00000CFA EB07                <1>     jmp short printErr
    11                              <1> printComErr:
    12                              <1> ;JUMP to this procedure and it jumps back to
    13                              <1> ; the command loop resetting the stack!
    14 00000CFC 488D15(47010000)    <1>     lea rdx, badInput
    15                              <1> printErr:
    16 00000D03 E84FFFFFFF          <1>     call printString
    17 00000D08 E96EF6FFFF          <1>     jmp getCommand
    18                              <1> 
    19                              <1> ;The below "Fail" units are a class of Edlin terminating functions
    20                              <1> badReadFail:
    21 00000D0D 488D15(E5010000)    <1>     lea rdx, badRead
    22 00000D14 E83EFFFFFF          <1>     call printString
    23                              <1>     retToDOS errBadRead
    94 00000D19 B8034C0000          <2>  mov eax, 04C00h | %1
    95 00000D1E CD21                <2>  int 21h
    24                              <1> 
    25                              <1> fullDiskFail:
    26 00000D20 488D15(C5010000)    <1>     lea rdx, badDskFull ;Write disk full error, but return to prompt
    27 00000D27 E82BFFFFFF          <1>     call printString
    28                              <1>     retToDOS errDskFull
    94 00000D2C B8024C0000          <2>  mov eax, 04C00h | %1
    95 00000D31 CD21                <2>  int 21h
    39                                  Segment .data align=1 follows=.text 
    40                                  %include "./Data/eddata.asm"
     1                              <1> ;Initialised data goes here :)
     2                              <1> 
     3                              <1> ;The following three tables are connected. Don't jiggle!
     4                              <1> cmdLetterTable:
     5 00000000 0D3B41434445494C50- <1>     db CR,";ACDEILPMQRSTW"
     5 00000009 4D5152535457        <1>
     6                              <1>     cmdLetterTableL equ $ - cmdLetterTable
     7                              <1> cmdFcnTable:
     8 0000000F (2C09)              <1>     dw editLine - cmdFcnTable
     9 00000011 (2C09)              <1>     dw editLine - cmdFcnTable
    10 00000013 (B307)              <1>     dw appendLines - cmdFcnTable
    11 00000015 (2209)              <1>     dw copyLines - cmdFcnTable
    12 00000017 (2709)              <1>     dw deleteLines - cmdFcnTable
    13 00000019 (7709)              <1>     dw endEdit - cmdFcnTable
    14 0000001B (590A)              <1>     dw insertLine - cmdFcnTable
    15 0000001D (2A0B)              <1>     dw listLines - cmdFcnTable
    16 0000001F (2F0B)              <1>     dw pageLines - cmdFcnTable
    17 00000021 (340B)              <1>     dw moveLines - cmdFcnTable
    18 00000023 (390B)              <1>     dw quit - cmdFcnTable
    19 00000025 (8E0B)              <1>     dw replaceText - cmdFcnTable
    20 00000027 (930B)              <1>     dw searchText - cmdFcnTable
    21 00000029 (980B)              <1>     dw transferLines - cmdFcnTable
    22 0000002B (9D0B)              <1>     dw writeLines - cmdFcnTable
    23                              <1> cmdRoTable:
    24                              <1> ;Byte set if we can do this command in RO mode
    25 0000002D 00                  <1>     db 0    ;Insert
    26 0000002E 00                  <1>     db 0    ;Insert
    27 0000002F FF                  <1>     db -1   ;Append
    28 00000030 00                  <1>     db 0    ;Copy
    29 00000031 00                  <1>     db 0    ;Delete
    30 00000032 00                  <1>     db 0    ;End (save changes)
    31 00000033 00                  <1>     db 0    ;Insert
    32 00000034 FF                  <1>     db -1   ;List
    33 00000035 FF                  <1>     db -1   ;Page
    34 00000036 00                  <1>     db 0    ;Move
    35 00000037 FF                  <1>     db -1   ;Quit (no save)
    36 00000038 00                  <1>     db 0    ;Replace
    37 00000039 FF                  <1>     db -1   ;Search
    38 0000003A 00                  <1>     db 0    ;Transfer 
    39 0000003B FF                  <1>     db -1   ;Write
    41                                  %include "./Data/edmsg.asm"
     1                              <1> ;Edlin Strings are in this file
     2 0000003C 4E65772066696C650D- <1> newStr  db "New file",CR,LF,"$"
     2 00000045 0A24                <1>
     3 00000047 456E64206F6620696E- <1> eofStr  db "End of input file",CR,LF,"$"    ;When EOF occurs
     3 00000050 7075742066696C650D- <1>
     3 00000059 0A24                <1>
     4 0000005B 496E76616C69642044- <1> badVerStr   db "Invalid DOS Version",CR,LF,"$"
     4 00000064 4F532056657273696F- <1>
     4 0000006D 6E0D0A24            <1>
     5 00000071 496E76616C69642044- <1> badDrvStr   db "Invalid Drive or filename",CR,LF,"$"
     5 0000007A 72697665206F722066- <1>
     5 00000083 696C656E616D650D0A- <1>
     5 0000008C 24                  <1>
     6 0000008D 46696C65206E616D65- <1> badNameStr  db "File name must be specified",CR,LF,"$"
     6 00000096 206D75737420626520- <1>
     6 0000009F 737065636966696564- <1>
     6 000000A8 0D0A24              <1>
     7 000000AB 43616E6E6F74206372- <1> badCreatStr db "Cannot create specified file",CR,LF,"$"
     7 000000B4 656174652073706563- <1>
     7 000000BD 69666965642066696C- <1>
     7 000000C6 650D0A24            <1>
     8 000000CA 43616E6E6F74206F70- <1> badOpenStr  db "Cannot open specified file",CR,LF,"$"
     8 000000D3 656E20737065636966- <1>
     8 000000DC 6965642066696C650D- <1>
     8 000000E5 0A24                <1>
     9 000000E7 43616E6E6F74207061- <1> badFileStr  db "Cannot parse sepcified filespec",CR,LF,"$"
     9 000000F0 727365207365706369- <1>
     9 000000F9 666965642066696C65- <1>
     9 00000102 737065630D0A24      <1>
    10 00000109 416363657373206465- <1> badBackDel  db "Access denied - Backup file not deleted",CR,LF,"$"
    10 00000112 6E696564202D204261- <1>
    10 0000011B 636B75702066696C65- <1>
    10 00000124 206E6F742064656C65- <1>
    10 0000012D 7465640D0A24        <1>
    11 00000133 496E76616C69642050- <1> badParm     db "Invalid Parameter",CR,LF,"$"
    11 0000013C 6172616D657465720D- <1>
    11 00000145 0A24                <1>
    12 00000147 456E74727920657272- <1> badInput    db "Entry error",CR,LF,"$"
    12 00000150 6F720D0A24          <1>
    13 00000155 5265616C6C6F636174- <1> badRealloc  db "Reallocation error",CR,LF,"$"
    13 0000015E 696F6E206572726F72- <1>
    13 00000167 0D0A24              <1>
    14 0000016A 0D0A496E7375666669- <1> badMemFull  db CR,LF,"Insufficient memory",CR,LF,"$"
    14 00000173 6369656E74206D656D- <1>
    14 0000017C 6F72790D0A24        <1>
    15 00000182 43616E6E6F74206564- <1> badFileExt  db "Cannot edit .BAK file--rename file",CR,LF,"$"
    15 0000018B 6974202E42414B2066- <1>
    15 00000194 696C652D2D72656E61- <1>
    15 0000019D 6D652066696C650D0A- <1>
    15 000001A6 24                  <1>
    16 000001A7 496E76616C6964206F- <1> badROcmd    db "Invalid operation: R/O file",CR,LF,"$"
    16 000001B0 7065726174696F6E3A- <1>
    16 000001B9 20522F4F2066696C65- <1>
    16 000001C2 0D0A24              <1>
    17 000001C5 4469736B2066756C6C- <1> badDskFull  db "Disk full-- write not completed$"
    17 000001CE 2D2D20777269746520- <1>
    17 000001D7 6E6F7420636F6D706C- <1>
    17 000001E0 6574656424          <1>
    18 000001E5 426164207265616420- <1> badRead     db "Bad read of input file. Aborting...",CR,LF,"$"
    18 000001EE 6F6620696E70757420- <1>
    18 000001F7 66696C652E2041626F- <1>
    18 00000200 7274696E672E2E2E0D- <1>
    18 00000209 0A24                <1>
    19 0000020B 41626F727420656469- <1> exitQuit    db "Abort edit (Y/N)? $"
    19 00000214 742028592F4E293F20- <1>
    19 0000021D 24                  <1>
    20 0000021E 4F2E4B2E3F2024      <1> okString    db "O.K.? $"
    42                                  Segment .bss align=1 follows=.data nobits
    43                                  bssStart:
    44                                  %include "./Data/edbss.asm"
     1                              <1> ;WE SET ALL VARS TO 0 ON STARTUP!
     2                              <1> 
     3 00000000 ??                  <1> pathSep     db ?    ;Default \, Alternative /
     4 00000001 ??                  <1> switchChar  db ?    ;Default /, Alternative -
     5 00000002 ??                  <1> roFlag      db ?    ;Flag is set if file is read-only. Cannot edit the file.
     6 00000003 ??                  <1> newFileFlag db ?    ;Flag indicating the file being made is new (when set, above flag meaningless)
     7 00000004 ??                  <1> noEofChar   db ?    ;Flag is set if we are not to check for ^Z chars found in the file
     8 00000005 ??                  <1> eofReached  db ?    ;When we reach EOF for file on disk, set to -1, else 0
     9                              <1> 
    10                              <1> ;Memory Related variables
    11 00000006 ????????            <1> arenaSize   dd ?    ;Size of the arena in bytes 
    12 0000000A ????????            <1> freeCnt     dd ?    ;Count of 1/4 of the arena in bytes (for write)
    13 0000000E ????????????????    <1> memPtr      dq ?    ;Ptr to the memory arena given by DOS
    14 00000016 ????????????????    <1> fillPtr     dq ?    ;Ptr to 3/4 of the arena in bytes (for append)
    15                              <1> 
    16                              <1> ;Editor state vars!
    17 0000001E ????                <1> curLineNum  dw ?    ;Word value for the current line number (1 based)
    18 00000020 ????????????????    <1> curLinePtr  dq ?    ;Pointer to the current line
    19 00000028 ????????????????    <1> eofPtr      dq ?    ;Pointer to the EOF char in the buffer
    20 00000030 ????????????????    <1> endOfArena  dq ?    ;Ptr to the last available byte in the arena
    21                              <1> 
    22 00000038 ??                  <1> modFlag     db ?    ;Flag set to indicate the file was modified
    23                              <1> ;Backup is only deleted on exit or write, to make space for temp file.
    24 00000039 ??                  <1> bkupDel     db ?    ;Flag to indicate that the backup was deleted
    25                              <1> 
    26                              <1> ;Don't jiggle these symbols, need dword to be together for -1
    27 0000003A ????                <1> readHdl     dw ?    ;Contain the file handle for the open file
    28 0000003C ????                <1> writeHdl    dw ?    ;Handle to the temporary file
    29                              <1> 
    30 0000003E <res 80h>           <1> pathspec    db 128 dup (?)  ;Space for the 128 byte buffer for full filename
    31                              <1> wkfile:                     ;Ptr to below path for "working" file
    32 000000BE <res 80h>           <1> bkupfile    db 128 dup (?)  ;Pathspec for backup file and working .??? file
    33                              <1> 
    34                              <1> tmpNamePtr:         ;Ptr to the filename in the commandtail
    35 0000013E ????????????????    <1> fileNamePtr dq ?    ;Ptr to the name portion of filespec
    36                              <1> tmpNamePtr2:        ;Ptr to the end of the command in the commandtail
    37 00000146 ????????????????    <1> fileExtPtr  dq ?    ;Ptr to the extension of the file we are editing
    38                              <1> ;The above pointers point past the dot or pathseperator
    39                              <1> ;Both file*ptr's point to elements on WKFILE not pathspec
    40                              <1> 
    41                              <1> ;Command line variables
    42 0000014E <res 82h>           <1> cmdLine     db halfLine_size dup (?)
    43                              <1> ;Arguments for parsing
    44 000001D0 ????????????????    <1> charPtr     dq ?    ;Ptr to char for continuing processing
    45 000001D8 ??                  <1> argCnt      db ?    ;Count of arguments in parsed command line
    46                              <1> ;Arguments are converted to signed words where appropriate
    47                              <1> ; and parsed into here in the order they are encountered in.
    48                              <1> ;
    49                              <1> ;Any arguments which mean 0 wrt line numbers means current line
    50                              <1> argTbl:
    51 000001D9 ????                <1> arg1        dw ?
    52 000001DB ????                <1> arg2        dw ?
    53 000001DD ????                <1> arg3        dw ?
    54 000001DF ????                <1> arg4        dw ?
    55 000001E1 ??                  <1> qmarkSet    db ?    ;Set if question mark encountered
    56 000001E2 <res 82h>           <1> argString   db halfLine_size dup (?)    ;Used by search and replace only
    57                              <1> 
    58 00000264 ??                  <1> noAppendErr db ?    ;Special init var, prevents append errors for initial load
    59                              <1> 
    60                              <1> ;The workline gets preloaded with the original line before editing
    61 00000265 <res 100h>          <1> workLine    db 256 dup (?)  ;Line in which all editing takes place
    62 00000365 ??                  <1> workLen     db ?    ;Line length before edit
    63 00000366 ??                  <1> workEnd     db ?    ;Char which ended the line. 
    45                                  bssLen equ ($ - bssStart)
    46                                  Segment .stack align=16 follows=.bss nobits
    47                                  ;Use a 200 QWORD stack
    48 00000000 <res 640h>                  dq 200 dup (?)
    49                                  stackTop:
    50                                  endOfProgram:   ;Deallocate from here
    50          ------------------       info: assembly required 1+5+2 passes

