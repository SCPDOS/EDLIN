     1                                  [map all ./Listings/edlin.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;EDLIN, an absolute last resort file editor.
     5                                  ;
     6                                  ;                       !!DONT FORGET!!
     7                                  ;       Each line is terminated first with 0Dh then 0Ah (CR,LF)
     8                                  ;                       !!DONT FORGET!!
     9                                  ;
    10                                  
    11                                  ;Edlin will always produce a backup file and refuses to open files 
    12                                  ; with .BAK extension (backup files)
    13                                  
    14                                  ;Edlin will erase the previous backup if one exists, ensuring there
    15                                  ; is enough free space for a new copy of the backup.
    16                                  ;It then creates a new file with the filename with a $$$ extension.
    17                                  ;All edits occur in memory and are flushed to it. We then rename it
    18                                  ; to the desired filename.
    19                                  ;BAK files cannot be opened.
    20                                  ;
    21                                  ;Empty lines are default just a CR,LF pair
    22                                  
    23                                  ;Edlin has two modes of operation: Command and Edit
    24                                  
    25                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
    26                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    27                                  %include "./Include/edStruc.inc"
     1                              <1> ;edlin structures
     2                              <1> lineLen     equ 253
     3                              <1> halflineLen equ 128
     4                              <1> maxLine     equ 65529
     5                              <1> maxAlloc    equ maxLine*lineLen
     6                              <1> maxParas    equ (maxAlloc >> 4) + 1
     7                              <1> 
     8                              <1> prompt      equ "*"
     9                              <1> 
    10                              <1> ;Bona-Fida Structures
    11                              <1> 
    12                              <1> struc line
    13 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (255)
    14 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    15 00000002 <res FDh>           <1>     .pString    db lineLen dup (?)      ;Actual string itself
    16                              <1> endstruc
    17                              <1> 
    18                              <1> struc halfLine
    19 00000000 ??                  <1>     .bBufLen    db ?    ;Buffer size (130)
    20 00000001 ??                  <1>     .bStrLen    db ?    ;Length of the string entered in buffer
    21 00000002 <res 80h>           <1>     .pString    db halflineLen dup (?)   ;Actual string itself
    22                              <1> endstruc
    23                              <1> 
    24                              <1> struc filename
    25                              <1> ;8.3 File name struct
    26 00000000 ????????????????    <1>     .fName  resb 8
    27 00000008 ??????              <1>     .fExt   resb 3
    28                              <1> endstruc
    28                                  %include "./Include/dosStruc.inc"
     1                              <1> ;Structures and equates coming from DOS
     2                              <1> 
     3                              <1> ;MISC ASCII control chars
     4                              <1> NUL equ 00h ;^@         | ASCII Null
     5                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text)
     6                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
     7                              <1> BEL equ 07h ;^G         | ASCII Bell
     8                              <1> BSP equ 08h ;^H         | ASCII Backspace
     9                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
    10                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
    11                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
    12                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
    13                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
    14                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
    15                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
    16                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
    17                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
    18                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
    19                              <1> SPC equ 20h ;Printable  | ASCII Space
    20                              <1> ;This last one is NEVER printed with a caret as it is a console control char
    21                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
    22                              <1> 
    23                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
    24                              <1> ;Extended Ascii Codes
    25                              <1> eF1     equ 3Bh ;F1 second byte
    26                              <1> eF2     equ 3Ch ;F2 second byte
    27                              <1> eF3     equ 3Dh ;F3 second byte
    28                              <1> eF4     equ 3Eh ;F4 second byte
    29                              <1> eF5     equ 3Fh ;F5 second byte
    30                              <1> eF6     equ 40h ;F6 second byte
    31                              <1> eF7     equ 41h ;F7 second byte
    32                              <1> eCursL  equ 4Bh ;Cursor Left second byte
    33                              <1> eCursR  equ 4Dh ;Cursor Right second byte
    34                              <1> eIns    equ 52h ;Insert second byte
    35                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
    36                              <1> 
    37                              <1> ;Directory attribute equates
    38                              <1>     dirReadOnly     equ 01h
    39                              <1>     dirHidden       equ 02h
    40                              <1>     dirSystem       equ 04h
    41                              <1>     dirVolumeID     equ 08h
    42                              <1>     dirDirectory    equ 10h
    43                              <1>     dirArchive      equ 20h
    44                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    45                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    46                              <1>     ;If any of the three bits are set, then ALL three bits are set
    47                              <1>     ; in addition to whatever the user passed to search for.
    48                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    49                              <1>     dirIncFiles     equ dirHidden | dirSystem
    50                              <1> 
    51                              <1> struc cmdArgs   ;Ptr returned in rdx after 41h/6101h has this structure
    52 00000000 <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1
    53 00000010 <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
    54                              <1>     .dta:   ;Pointer to the default DTA in the
    55 00000024 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
    56 00000025 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
    57                              <1> endstruc
    58                              <1> 
    59                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
    60 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
    61 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
    62 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
    63 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
    64 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
    65 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
    66 00000016 ????                <1>     .fileTime   resw 1  ;File time
    67 00000018 ????                <1>     .fileDate   resw 1  ;File date
    68 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
    69 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
    70                              <1> endstruc
    71                              <1> 
    72                              <1> ;Open Mode equates
    73                              <1> ;Access modes   Bits[2:0]
    74                              <1> ReadAccess      equ 0h
    75                              <1> WriteAccess     equ 1h
    76                              <1> RWAccess        equ 2h
    77                              <1> ;Bit 3 reserved 0
    78                              <1> ;Sharing modes  Bits[6:4]
    79                              <1> CompatShare     equ 0h
    80                              <1> denyRWShare     equ 10h
    81                              <1> denyWriteShare  equ 20h
    82                              <1> denyReadShare   equ 30h
    83                              <1> denyNoneShare   equ 40h
    84                              <1> netFCBShare     equ 70h
    85                              <1> noInherit       equ 80h
    29                                  Segment .text align=1 
    30                                  %include "./Source/edmain.asm"
     1                              <1> ;Contains the program loader
     2                              <1> start:
     3 00000000 EB01                <1>     jmp short .cVersion
     4 00000002 01                  <1> .vNum:          db 1    ;Main version number, patchable
     5                              <1> .cVersion:
     6 00000003 FC                  <1>     cld
     7 00000004 B800300000          <1>     mov eax, 3000h  ;Get version number
     8 00000009 CD41                <1>     int 41h
     9 0000000B 3A05F1FFFFFF        <1>     cmp al, byte [.vNum]
    10 00000011 760C                <1>     jbe short okVersion
    11 00000013 488D15(1C000000)    <1>     lea rdx, badVerStr
    12 0000001A E962030000          <1>     jmp badExitMsg
    13                              <1> okVersion:
    14                              <1> ;Initialise the BSS and to 0
    15 0000001F 488D3D(00000000)    <1>     lea rdi, section..bss.start
    16 00000026 48B947030000000000- <1>     mov rcx, bssLen
    16 0000002F 00                  <1>
    17 00000030 31C0                <1>     xor eax, eax
    18 00000032 F3AA                <1>     rep stosb
    19                              <1> ;Now move the stack pointer to its new position and reallocate!
    20 00000034 488D25(40060000)    <1>     lea rsp, stackTop
    21 0000003B 488D1D(40060000)    <1>     lea rbx, endOfProgram   ;Guaranteed paragraph alignment
    22 00000042 4C29C3              <1>     sub rbx, r8 ;Get number of bytes in block
    23 00000045 48C1EB04            <1>     shr rbx, 4  ;Convert to paragraphs
    24 00000049 48FFC3              <1>     inc rbx     ;Add one more paragraph for good measure
    25 0000004C B8004A0000          <1>     mov eax, 4A00h
    26 00000051 CD41                <1>     int 41h
    27 00000053 488D15(EC000000)    <1>     lea rdx, badRealloc
    28 0000005A 0F8221030000        <1>     jc badExitMsg
    29                              <1> ;One command line argument except for mandatory filename, /B=(binary read)
    30 00000060 B800370000          <1>     mov eax, 3700h
    31 00000065 CD41                <1>     int 41h
    32 00000067 B85C000000          <1>     mov eax, "\"    ;Default pathsep
    33 0000006C B92F000000          <1>     mov ecx, "/"    ;Alternative pathsep
    34 00000071 80FA2D              <1>     cmp dl, "-"     ;Is the switch char default or alternative?
    35 00000074 0F44C1              <1>     cmove eax, ecx  ;Move if alternative
    36 00000077 88D3                <1>     mov bl, dl  ;Preserve switch char in bl
    37 00000079 881D(01000000)      <1>     mov byte [switchChar], bl
    38 0000007F 8805(00000000)      <1>     mov byte [pathsepChar], al
    39                              <1> getCmdTail:
    40 00000085 B801610000          <1>     mov eax, 6101h  ;Get parsed FCB and cmdtail for filename in rdx
    41 0000008A CD41                <1>     int 41h
    42                              <1> ;Now parse the command line, to get full command spec for filename.
    43 0000008C 488D7A25            <1>     lea rdi, qword [rdx + cmdArgs.progTail]     ;Get ptr to tail
    44 00000090 0FB64A24            <1>     movzx ecx, byte [rdx + cmdArgs.parmList]    ;Get number of chars in cmdline
    45                              <1> cmdTailParse:
    46 00000094 B020                <1>     mov al, SPC ;Comparing against a space
    47                              <1> .searchLoop:
    48 00000096 F3AE                <1>     repe scasb  ;Search for the first non-space char
    49 00000098 67E366              <1>     jecxz .parseComplete    ;If we run out of chars, exit!
    50 0000009B 385FFF              <1>     cmp byte [rdi - 1], bl  ;Did we find a switchchar?
    51 0000009E 7539                <1>     jne short .notSwitch
    52 000000A0 8A07                <1>     mov al, byte [rdi]      ;Get the char after the switch
    53                              <1>     ;Now we lookahead only if we have more than 1 char left in buffer
    54 000000A2 81F901000000        <1>     cmp ecx, 1  ;If we have 1 char left, automatically accept as arg
    55 000000A8 7419                <1>     je short .goodSwitch
    56 000000AA 8A6701              <1>     mov ah, byte byte [rdi + 1] ;Lookahead
    57 000000AD 80FC20              <1>     cmp ah, SPC ;If char after switchchar is SPC, accept
    58 000000B0 7411                <1>     je short .goodSwitch
    59                              <1> .parseBadExit:
    60 000000B2 E9C3020000          <1>     jmp badParmExit
    61                              <1> .nameBadExit:
    62 000000B7 488D15(4E000000)    <1>     lea rdx, badNameStr
    63 000000BE E9BE020000          <1>     jmp badExitMsg
    64                              <1> .goodSwitch:
    65 000000C3 24DF                <1>     and al, ~20h    ;Clear the lowercase flag
    66 000000C5 3C42                <1>     cmp al, "B"     ;The flag is /B
    67 000000C7 75E9                <1>     jne short .parseBadExit
    68 000000C9 C605(04000000)FF    <1>     mov byte [noEofChar], -1   ;Set the internal flag
    69 000000D0 48FFC7              <1>     inc rdi ;Move rdi to the char after the B
    70 000000D3 FFC9                <1>     dec ecx ;And decrement count of chars left
    71 000000D5 742A                <1>     jz short .parseComplete
    72 000000D7 EBBD                <1>     jmp short .searchLoop   ;Now skip next lot of spaces
    73                              <1> .notSwitch:
    74                              <1>     ;Thus rdi must point one char past the start of a filename. 
    75                              <1>     ;If there is no filename, accept the pointer. 
    76                              <1>     ;If not, fail.
    77 000000D9 48813D(26010000)00- <1>     cmp qword [tmpNamePtr], 0
    77 000000E1 000000              <1>
    78 000000E4 75CC                <1>     jnz short .parseBadExit ;If its not empty, too many filenames passed in
    79 000000E6 48FFCF              <1>     dec rdi
    80 000000E9 48893D(26010000)    <1>     mov qword [tmpNamePtr], rdi ;Store the ptr temporarily here
    81 000000F0 48FFC7              <1>     inc rdi
    82 000000F3 F2AE                <1>     repne scasb ;Now we keep going until we hit a space
    83 000000F5 48893D(2E010000)    <1>     mov qword [tmpNamePtr2], rdi    ;Store first char past end of name here.
    84 000000FC 3847FF              <1>     cmp byte [rdi - 1], al  ;Was this a space or run out of chars?
    85 000000FF 7495                <1>     je short .searchLoop    ;Jump if a space, else, we parsed the tail.
    86                              <1> .parseComplete:
    87                              <1> ;Check we have a pointer to a filename AT LEAST.
    88 00000101 48813D(26010000)00- <1>     cmp qword [tmpNamePtr], 0
    88 00000109 000000              <1>
    89 0000010C 74A9                <1>     je short .nameBadExit
    90                              <1> ;Now we copy the filename internally.
    91 0000010E 488D3D(26000000)    <1>     lea rdi, pathspec
    92 00000115 488B35(26010000)    <1>     mov rsi, qword [tmpNamePtr]
    93                              <1> nameCopy:
    94 0000011C A4                  <1>     movsb   ;Copy one char at a time
    95 0000011D 483B35(2E010000)    <1>     cmp rsi, qword [tmpNamePtr2]    ;Check if we are equal to end of string ptr
    96 00000124 75F6                <1>     jne short nameCopy
    97 00000126 31C0                <1>     xor eax, eax
    98 00000128 AA                  <1>     stosb   ;Store the null terminating char
    99 00000129 488D3D(26000000)    <1>     lea rdi, pathspec
   100 00000130 4889FE              <1>     mov rsi, rdi
   101 00000133 B800600000          <1>     mov eax, 6000h  ;TRUENAME the filename
   102 00000138 CD41                <1>     int 41h
   103 0000013A 731D                <1>     jnc short .nameGood ;Name ok, proceed
   104 0000013C 3C0F                <1>     cmp al, errBadDrv
   105 0000013E 750C                <1>     jne short .genericError
   106 00000140 488D15(32000000)    <1>     lea rdx, badDrvStr
   107 00000147 E935020000          <1>     jmp badExitMsg
   108                              <1> .genericError:
   109 0000014C 488D15(A8000000)    <1>     lea rdx, badFileStr ;If this fails, bad filespec
   110 00000153 0F8228020000        <1>     jc badExitMsg  ;The filename is bad for some reason!
   111                              <1> .nameGood:
   112                              <1> ;Now we produce a backup/working filespec
   113 00000159 488D35(26000000)    <1>     lea rsi, pathspec
   114 00000160 488D3D(A6000000)    <1>     lea rdi, wkfile ;This pathspec always has an extension
   115 00000167 E84E020000          <1>     call strcpyASCIIZ
   116                              <1> ;Now invalidate tmpNamePtr and tmpNamePtr2
   117 0000016C 31C9                <1>     xor ecx, ecx
   118 0000016E 48890D(26010000)    <1>     mov qword [tmpNamePtr], rcx
   119 00000175 48890D(2E010000)    <1>     mov qword [tmpNamePtr2], rcx
   120 0000017C 48FFC9              <1>     dec rcx
   121 0000017F 488D3D(A6000000)    <1>     lea rdi, wkfile
   122 00000186 31C0                <1>     xor eax, eax
   123 00000188 F2AE                <1>     repne scasb   ;rdi points past terminating null
   124                              <1>     ;Find the nearest pathsep (since we have fully qualified the name)
   125 0000018A FD                  <1>     std
   126 0000018B 0FB605(00000000)    <1>     movzx eax, byte [pathsepChar]   ;Get pathsep char in al
   127 00000192 F2AE                <1>     repne scasb
   128 00000194 FC                  <1>     cld
   129 00000195 4881C702000000      <1>     add rdi, 2  ;Point rdi to first char past the pathsep
   130 0000019C 48893D(26010000)    <1>     mov qword [fileNamePtr], rdi    ;Save the ptr
   131 000001A3 4889FE              <1>     mov rsi, rdi
   132 000001A6 B908000000          <1>     mov ecx, 8  ;number of chars to search thru
   133                              <1>     breakpoint
    81 000001AB 6687DB              <2> xchg bx, bx
   134                              <1> .extSearch:
   135 000001AE AC                  <1>     lodsb
   136 000001AF 84C0                <1>     test al, al
   137 000001B1 7408                <1>     jz short .insertExt
   138 000001B3 3C2E                <1>     cmp al, "."
   139 000001B5 740E                <1>     je short .extFound
   140 000001B7 FFC9                <1>     dec ecx
   141 000001B9 75F3                <1>     jnz short .extSearch    ;Impossible edgecase (TRUENAME returns 8.3 filename)
   142                              <1> .insertExt:
   143                              <1>     ;rsi points just past the null
   144 000001BB C646FF2E            <1>     mov byte [rsi - 1], "." ;Store a pathsep
   145 000001BF C70620202000        <1>     mov dword [rsi], "   "   ;Store empty extension so no accidental BAK issues.
   146                              <1> .extFound:
   147 000001C5 488935(2E010000)    <1>     mov qword [fileExtPtr], rsi
   148                              <1> ;Now we have all the metadata for the filename we are working with
   149 000001CC 488D15(22010000)    <1>     lea rdx, badFileExt
   150 000001D3 8B06                <1>     mov eax, dword [rsi]
   151 000001D5 3D42414B00          <1>     cmp eax, "BAK"  ;Is this a bakup file?
   152 000001DA 0F84A1010000        <1>     je badExitMsg   ;If yes, error!
   153 000001E0 C70624242400        <1>     mov dword [rsi], "$$$"   ;Now we store working file $$$ extension 
   154                              <1> ;Now we check to make sure the path has no global filename chars
   155                              <1> wildcardCheck:
   156 000001E6 488D35(26000000)    <1>     lea rsi, pathspec
   157                              <1> .mainlp:
   158 000001ED AC                  <1>     lodsb
   159 000001EE 84C0                <1>     test al, al ;Once we're at the null char, proceed
   160 000001F0 7414                <1>     jz short fileOpen
   161 000001F2 3C3F                <1>     cmp al, "?"
   162 000001F4 7404                <1>     je short .error
   163 000001F6 3C2A                <1>     cmp al, "*"
   164 000001F8 75F3                <1>     jne short .mainlp
   165                              <1> .error:
   166 000001FA 488D15(32000000)    <1>     lea rdx, badDrvStr
   167 00000201 E97B010000          <1>     jmp badExitMsg
   168                              <1> ;Now we open the file to check if it exists and if it does, if it is readonly
   169                              <1> fileOpen:
   170                              <1> ;first set the handles to -1
   171 00000206 C705(22000000)FFFF- <1>     mov dword [readHdl], -1 ;Init the handles to -1
   171 0000020E FFFF                <1>
   172                              <1> ;Now we search for the file
   173 00000210 488D15(26000000)    <1>     lea rdx, pathspec
   174 00000217 B906000000          <1>     mov ecx, dirIncFiles
   175 0000021C B8004E0000          <1>     mov eax, 4E00h  ;Find First 
   176 00000221 CD41                <1>     int 41h
   177 00000223 723B                <1>     jc .fileNotFound
   178                              <1> ;Check if file is read only
   179 00000225 B8002F0000          <1>     mov eax, 2F00h  ;Get a pointer to the DTA in rbx
   180 0000022A CD41                <1>     int 41h
   181 0000022C 0FB64315            <1>     movzx eax, byte [rbx + ffBlock.attribFnd]
   182 00000230 A801                <1>     test al, dirReadOnly
   183 00000232 7407                <1>     jz short .notReadOnly
   184                              <1> .readOnly:
   185                              <1> ;Read only files here
   186 00000234 C605(02000000)FF    <1>     mov byte [roFlag], -1   ;Set read only flag!
   187                              <1> .notReadOnly:
   188                              <1> ;File exists, lets open it, to read from
   189 0000023B B8203D0000          <1>     mov eax, (3Dh << 8) | ReadAccess | denyWriteShare
   190 00000240 488D15(26000000)    <1>     lea rdx, pathspec    ;Get the pointer to the working filename
   191 00000247 CD41                <1>     int 41h         ;Open the file
   192 00000249 730C                <1>     jnc short .backupOpened
   193                              <1> ;File failed to open
   194 0000024B 488D15(8B000000)    <1>     lea rdx, badOpenStr
   195 00000252 E92A010000          <1>     jmp badExitMsg
   196                              <1> .backupOpened:
   197                              <1> ;Backup opened and handle in ax.
   198 00000257 668905(22000000)    <1>     mov word [readHdl], ax  ;Store the read handle here
   199 0000025E EB18                <1>     jmp short createWorkingFile
   200                              <1> .fileNotFound:
   201                              <1> ;Maybe new file? Check reason for error! If FNF, its good!
   202 00000260 663D0200            <1>     cmp ax, errFnf  ;If its a file not found error, then we are good!
   203 00000264 488D15(8B000000)    <1>     lea rdx, badOpenStr ;We can't open the file for whatever reason
   204 0000026B 0F8510010000        <1>     jne badExitMsg
   205                              <1> ;Error was file not found so we can make the file!
   206 00000271 C605(03000000)FF    <1>     mov byte [newFileFlag], -1  ;Set the new file flag!
   207                              <1> createWorkingFile:
   208                              <1> ;Now open a new file with triple question mark extension
   209                              <1> ;rdi -> Path to file with $$$ (the working file)
   210 00000278 488D15(A6000000)    <1>     lea rdx, wkfile    ;Get a pointer to this filename
   211                              <1>     ;mov eax, 3C00h  ;Create file
   212 0000027F B8005B0000          <1>     mov eax, 5B00h  ;Create file (atomic), prevent two edlins from editing same file
   213 00000284 31C9                <1>     xor ecx, ecx    ;Clear all file attributes (normal file)
   214 00000286 CD41                <1>     int 41h
   215 00000288 730C                <1>     jnc short .fileCreated
   216 0000028A 488D15(6C000000)    <1>     lea rdx, badCreatStr    ;Creating the working file will fail if already exits
   217 00000291 E9EB000000          <1>     jmp badExitMsg          ;This prevents someone from ove
   218                              <1> .fileCreated:
   219 00000296 668905(24000000)    <1>     mov word [writeHdl], ax ;Store a pointer to the write handle
   220                              <1> ;Now the following:
   221                              <1> ;1) Allocate max memory (1Mb max)
   222                              <1> ;2) If new file, goto 4. Print "new file" message
   223                              <1> ;3) Else, fill up to 75% of arena according to table. If 
   224                              <1> ;    EOF reached (either due to no bytes left or ^Z (if enabled))
   225                              <1> ;    print "EOF reached message".
   226                              <1> ;4) Install Int 43h handler
   227                              <1> ;5) Goto main loop
   228                              <1> allocateMemory:
   229 0000029D 31DB                <1>     xor ebx, ebx
   230 0000029F BB00000100          <1>     mov ebx, 10000h ;Start trying to allocate at 1Mb
   231 000002A4 B800480000          <1>     mov eax, 4800h
   232 000002A9 CD41                <1>     int 41h
   233 000002AB 731E                <1>     jnc short .loadProgram
   234                              <1>     ;If the allocation failed, eax has max paragraphs
   235 000002AD 3D10000000          <1>     cmp eax, 10h    ;If we have less than 256 bytes available, fail
   236 000002B2 720B                <1>     jb short .notEnoughMem
   237 000002B4 89C3                <1>     mov ebx, eax    ;Get the number of paragraphs into ebx for request
   238 000002B6 B800480000          <1>     mov eax, 4800h
   239 000002BB CD41                <1>     int 41h
   240 000002BD 730C                <1>     jnc short .loadProgram
   241                              <1> .notEnoughMem:
   242 000002BF 488D15(01010000)    <1>     lea rdx, badMemSize
   243 000002C6 E9B6000000          <1>     jmp badExitMsg
   244                              <1> .loadProgram:
   245                              <1> ;rax has pointer here
   246 000002CB 488905(06000000)    <1>     mov qword [memPtr], rax
   247 000002D2 4889C6              <1>     mov rsi, rax
   248 000002D5 C1E304              <1>     shl ebx, 4  ;Multiply by 16 to get number of bytes
   249 000002D8 4801DE              <1>     add rsi, rbx
   250 000002DB 48FFCE              <1>     dec rsi     ;Point rsi to the last char of the arena
   251 000002DE 488935(1A000000)    <1>     mov qword [endOfArena], rsi
   252 000002E5 891D(0E000000)      <1>     mov dword [arenaSize], ebx  ;Save number of bytes in arena here
   253 000002EB F605(03000000)FF    <1>     test byte [newFileFlag], -1 ;If this is a new file, skip
   254 000002F2 754B                <1>     jnz short initBuffers
   255 000002F4 4889C6              <1>     mov rsi, rax    ;Save the pointer to memory arena in rsi
   256 000002F7 31C9                <1>     xor ecx, ecx    ;Zero the upper 32 bits
   257 000002F9 678D0C5B            <1>     lea ecx, dword [2*ebx + ebx]    ;Multiply ebx by 3 into ecx
   258 000002FD C1E902              <1>     shr ecx, 2  ;Divide by 4 to get # of bytes to fill ~75% of memory space
   259 00000300 890D(12000000)      <1>     mov dword [fillSize], ecx   ;Save number of bytes to fill arena with
   260 00000306 4889C2              <1>     mov rdx, rax    ;Move the arena pointer into rdx
   261 00000309 B8003F0000          <1>     mov eax, 3F00h
   262 0000030E 0FB71D(22000000)    <1>     movzx ebx, word [readHdl]  
   263 00000315 CD41                <1>     int 41h ;If it reads, it reads, if not, oh well.
   264                              <1> ;Check now for EOF and setup end of text pointer
   265 00000317 8905(16000000)      <1>     mov dword [textLen], eax  ;Save number of chars read into eax
   266 0000031D 39C1                <1>     cmp ecx, eax    ;If less bytes than ecx were read, EOF condition
   267 0000031F 7510                <1>     jne short .eofFound
   268 00000321 F605(04000000)FF    <1>     test byte [noEofChar], -1   ;Avoid searching for ^Z?
   269 00000328 7415                <1>     jz short initBuffers
   270 0000032A E8E1000000          <1>     call searchTextForEOFChar
   271 0000032F 750E                <1>     jnz short initBuffers
   272                              <1> .eofFound:
   273                              <1> ;Now we print the EOF message
   274 00000331 488D15(08000000)    <1>     lea rdx, eofStr
   275 00000338 B800090000          <1>     mov eax, 0900h
   276 0000033D CD41                <1>     int 41h
   277                              <1> initBuffers:
   278                              <1> ;Now we setup the edit and command buffers
   279 0000033F C605(47020000)FD    <1>     mov byte [editLine + line.bBufLen], lineLen
   280 00000346 C605(36010000)80    <1>     mov byte [cmdLine + line.bBufLen], halflineLen
   281                              <1> getCommand:
   282                              <1> ;Now we install the Int 43h handler
   283 0000034D 488D15FA000000      <1>     lea rdx, i43h
   284 00000354 B843250000          <1>     mov eax, 2543h  ;Set Interrupt handler for Int 43h
   285 00000359 CD41                <1>     int 41h
   286 0000035B B82A000000          <1>     mov eax, prompt
   287 00000360 E804010000          <1>     call printChar
   288 00000365 488D15(36010000)    <1>     lea rdx, cmdLine
   289 0000036C B8000A0000          <1>     mov eax, 0A00h  ;Take buffered input.
   290 00000371 CD41                <1>     int 41h
   291                              <1> ;Now we parse the command line!
   292                              <1> parseCommand:
   293                              <1> 
   294                              <1> 
   295                              <1>     
   296                              <1> exitOk:
   297                              <1> ;Let DOS take care of freeing all resources
   298 00000373 B8004C0000          <1>     mov eax, 4C00h
   299 00000378 CD41                <1>     int 41h
   300                              <1> 
   301                              <1> ;----Bad Exits----
   302                              <1> badParmExit:
   303 0000037A 488D15(CA000000)    <1>     lea rdx, badParm    ;Bad number of parameters
   304                              <1> badExitMsg:
   305 00000381 4885D2              <1>     test rdx, rdx   ;Check if null ptr => Dont print on exit
   306 00000384 7407                <1>     jz short badExit
   307 00000386 B800090000          <1>     mov eax, 0900h
   308 0000038B CD41                <1>     int 41h
   309                              <1> badExit:
   310 0000038D B8FF4C0000          <1>     mov eax, 4CFFh
   311 00000392 CD41                <1>     int 41h
    31                                  %include "./Source/edutils.asm"
     1                              <1> ;Utility functions for edlin go here
     2                              <1> 
     3                              <1> strlen:
     4                              <1> ;String length based on terminator in al
     5                              <1> ;Input: rsi -> Source Ptr
     6                              <1> ;       al = Terminating char to search for
     7                              <1> ;Output: ecx = Number of chars instring including terminator
     8 00000394 31C9                <1>     xor ecx, ecx
     9 00000396 FFC9                <1>     dec ecx
    10 00000398 57                  <1>     push rdi
    11 00000399 4889F7              <1>     mov rdi, rsi
    12 0000039C F2AE                <1>     repne scasb
    13 0000039E 5F                  <1>     pop rdi
    14 0000039F F7D9                <1>     neg ecx ;Take 2's compliment to get number of chars including terminator
    15                              <1>     return
    13                              <2> %%_ret:
    14 000003A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    16                              <1> 
    17                              <1> strcpy:
    18                              <1> ;Copies a string from one buffer to another
    19                              <1> ;Input: rsi -> Source Ptr
    20                              <1> ;       rdi -> Destination Ptr
    21 000003A2 56                  <1>     push rsi
    22 000003A3 57                  <1>     push rdi
    23 000003A4 51                  <1>     push rcx
    24 000003A5 B9FD000000          <1>     mov ecx, lineLen    ;Max number of chars in a string
    25                              <1> .lp:
    26 000003AA E83B000000          <1>     call isCharEOL
    27 000003AF 7405                <1>     je short .exit
    28 000003B1 A4                  <1>     movsb   ;Move the char over, inc both pointers
    29 000003B2 FFC9                <1>     dec ecx
    30 000003B4 75F4                <1>     jnz short .lp
    31                              <1> .exit:
    32 000003B6 59                  <1>     pop rcx
    33 000003B7 5F                  <1>     pop rdi
    34 000003B8 5E                  <1>     pop rsi
    35                              <1>     return
    13                              <2> %%_ret:
    14 000003B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                              <1> 
    37                              <1> strcpyASCIIZ:
    38                              <1> ;Copies a ASCIIZ string from one buffer to another. 
    39                              <1> ;Pointers don't move.
    40                              <1> ;Input: rsi -> Source Ptr
    41                              <1> ;       rdi -> Destination Ptr
    42 000003BA 56                  <1>     push rsi
    43 000003BB 57                  <1>     push rdi
    44                              <1> .cpChar:
    45 000003BC AC                  <1>     lodsb
    46 000003BD AA                  <1>     stosb
    47 000003BE 84C0                <1>     test al, al ;Was this a nul char?
    48 000003C0 75FA                <1>     jnz .cpChar
    49 000003C2 5F                  <1>     pop rdi
    50 000003C3 5E                  <1>     pop rsi
    51                              <1>     return
    13                              <2> %%_ret:
    14 000003C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> 
    54                              <1> memmove:
    55                              <1> ;Copies a number of bytes over from one buffer to another
    56                              <1> ;Input: rsi -> Source Ptr
    57                              <1> ;       rdi -> Destination Ptr
    58                              <1> ;       ecx = Count of chars to copy
    59 000003C5 56                  <1>     push rsi
    60 000003C6 57                  <1>     push rdi
    61 000003C7 51                  <1>     push rcx
    62 000003C8 F3A4                <1>     rep movsb
    63 000003CA 59                  <1>     pop rcx
    64 000003CB 5F                  <1>     pop rdi
    65 000003CC 5E                  <1>     pop rsi
    66                              <1>     return
    13                              <2> %%_ret:
    14 000003CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> memset:
    69                              <1> ;Initialises a buffer to contain a particular value
    70                              <1> ;Input: rdi -> Buffer to set to given value
    71                              <1> ;       al = Value to set the buffer to
    72                              <1> ;       rcx = Number of bytes in buffer
    73 000003CE 51                  <1>     push rcx
    74 000003CF 57                  <1>     push rdi
    75 000003D0 F3AA                <1>     rep stosb
    76 000003D2 5F                  <1>     pop rdi
    77 000003D3 59                  <1>     pop rcx
    78                              <1>     return
    13                              <2> %%_ret:
    14 000003D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    79                              <1> 
    80                              <1> findLineEnd:
    81                              <1> ;Returns in rsi a pointer to the end of the line
    82                              <1> ;Input: rsi -> Start of the line find the end of
    83                              <1> ;Output: rsi -> Last char in the string (NOTE: LAST CHAR NOT PAST)
    84                              <1> ;Trashes: rcx
    85 000003D5 B9FD000000          <1>     mov ecx, lineLen
    86                              <1> .lp:
    87 000003DA E80B000000          <1>     call isCharEOL  ;If ZF=ZE, then rsi points to EOL
    88                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000003DF 74(D4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    89 000003E1 FFC9                <1>     dec ecx
    90                              <1>     retz    ;If ecx is now 0, means rsi points to the end of line (NO EOL CHAR)
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000003E3 74(D4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    91 000003E5 48FFC6              <1>     inc rsi
    92 000003E8 EBF0                <1>     jmp short .lp
    93                              <1> 
    94                              <1> isCharEOL:
    95                              <1> ;Input: rsi -> Char/Word to analyse
    96                              <1> ;Output: ZF=ZE if char/word at rsi LF or CR,LF.
    97                              <1> ;        ZF=NZ if not
    98 000003EA E811000000          <1>     call isCharEOF
    99                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000003EF 74(D4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   100 000003F1 803E0A              <1>     cmp byte [rsi], LF
   101                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000003F4 74(D4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   102 000003F6 803E0D              <1>     cmp byte [rsi], CR
   103                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000003F9 75(D4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   104 000003FB 807E010A            <1>     cmp byte [rsi + 1], LF
   105                              <1>     return
    13                              <2> %%_ret:
    14 000003FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   106                              <1> 
   107                              <1> isCharEOF:
   108                              <1> ;Input: rsi -> Char to check if it is ^Z
   109                              <1> ;Output: ZF=ZE if char at rsi is ^Z AND we are checking for EOFs
   110                              <1> ;        ZF=NZ if char at rsi is not ^Z or we are not checking for eof's
   111 00000400 50                  <1>     push rax
   112 00000401 8A05(04000000)      <1>     mov al, byte [noEofChar]
   113 00000407 F6D0                <1>     not al  ;Invert the bits (1's compliment)
   114 00000409 58                  <1>     pop rax
   115                              <1>     retnz   ;Return if not checking for EOF
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000040A 75(FF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 0000040C 803E1A              <1>     cmp byte [rsi], EOF ;Check if eof
   117                              <1>     return
    13                              <2> %%_ret:
    14 0000040F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> 
   119                              <1> searchTextForEOFChar:
   120                              <1> ;This function is to search for an EOF char in the text.
   121                              <1> ;If found, we check if the previous char is LF. If it isn't
   122                              <1> ; place a CR/LF with the CR on the ^Z. If no bytes left in
   123                              <1> ; arena leave the embedded ^Z in situ (boo!)
   124                              <1> ;Return: ZF=ZE -> EOF found and left in situ
   125                              <1> ;        ZF=NZ -> No EOF char found
   126 00000410 50                  <1>     push rax
   127 00000411 51                  <1>     push rcx
   128 00000412 57                  <1>     push rdi
   129 00000413 488B3D(06000000)    <1>     mov rdi, qword [memPtr]
   130 0000041A 31C9                <1>     xor ecx, ecx
   131 0000041C 8B0D(16000000)      <1>     mov ecx, dword [textLen]  ;Go to the end of the text
   132 00000422 B01A                <1>     mov al, EOF
   133 00000424 F2AE                <1>     repne scasb ;Search the arena for a EOF char
   134 00000426 7522                <1>     jne short .exit ;No ^Z found
   135 00000428 48FFCF              <1>     dec rdi ;Point rdi to the ^Z char
   136 0000042B 807FFF0A            <1>     cmp byte [rdi - 1], LF  ;If the char before the ^Z is LF, exit ok
   137 0000042F 7419                <1>     je short .exit
   138 00000431 483B3D(1A000000)    <1>     cmp rdi, qword [endOfArena] ;If ^Z is at the end of the arena, do nothing
   139 00000438 7410                <1>     je short .exit
   140 0000043A C647010A            <1>     mov byte [rdi + 1], LF
   141 0000043E C6070D              <1>     mov byte [rdi], CR      ;Overwrite the ^Z, so now no more ^Z
   142 00000441 48FF05(16000000)    <1>     inc qword [textLen]     ;One more char in text
   143 00000448 31C9                <1>     xor ecx, ecx            ;EOF char found so clear ZF
   144                              <1> .exit:
   145 0000044A 5F                  <1>     pop rdi
   146 0000044B 59                  <1>     pop rcx
   147 0000044C 58                  <1>     pop rax
   148                              <1>     return
    13                              <2> %%_ret:
    14 0000044D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> 
   150                              <1> i43h:
   151                              <1> ;^C handler. Reset the stack pointer and flags
   152 0000044E 488D25(40060000)    <1>     lea rsp, stackTop
   153 00000455 FC                  <1>     cld
   154 00000456 E805000000          <1>     call printCRLF
   155 0000045B E9EDFEFFFF          <1>     jmp getCommand  ;Now jump to get the command
   156                              <1> 
   157                              <1> printCRLF:
   158                              <1> ;Prints CRLF
   159 00000460 B00D                <1>     mov al, CR
   160 00000462 E802000000          <1>     call printChar
   161 00000467 B00A                <1>     mov al, LF
   162                              <1> ;Just fall into the next function
   163                              <1> printChar:
   164                              <1> ;Input: al = Char to print
   165 00000469 50                  <1>     push rax    ;To preserve the rest of eax
   166 0000046A 52                  <1>     push rdx
   167 0000046B 0FB6D0              <1>     movzx edx, al
   168 0000046E B800020000          <1>     mov eax, 0200h
   169 00000473 CD41                <1>     int 41h
   170 00000475 5A                  <1>     pop rdx
   171 00000476 58                  <1>     pop rax
   172                              <1>     return
    13                              <2> %%_ret:
    14 00000477 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  Segment .data align=1 follows=.text 
    33                                  %include "./Data/eddata.asm"
     1                              <1> ;Initialised data goes here :)
    34                                  %include "./Data/edmsg.asm"
     1                              <1> ;Edlin Strings are in this file
     2 00000000 4E65772066696C65    <1> newStr  db "New file"   ;This string is terminated by the next line
     3 00000008 456E64206F6620696E- <1> eofStr  db "End of input file",CR,LF,"$"    ;When EOF occurs
     3 00000011 7075742066696C650D- <1>
     3 0000001A 0A24                <1>
     4 0000001C 496E76616C69642044- <1> badVerStr   db "Invalid DOS Version",CR,LF,"$"
     4 00000025 4F532056657273696F- <1>
     4 0000002E 6E0D0A24            <1>
     5 00000032 496E76616C69642044- <1> badDrvStr   db "Invalid Drive or filename",CR,LF,"$"
     5 0000003B 72697665206F722066- <1>
     5 00000044 696C656E616D650D0A- <1>
     5 0000004D 24                  <1>
     6 0000004E 46696C65206E616D65- <1> badNameStr  db "File name must be specified",CR,LF,"$"
     6 00000057 206D75737420626520- <1>
     6 00000060 737065636966696564- <1>
     6 00000069 0D0A24              <1>
     7 0000006C 43616E6E6F74206372- <1> badCreatStr db "Cannot create specified file",CR,LF,"$"
     7 00000075 656174652073706563- <1>
     7 0000007E 69666965642066696C- <1>
     7 00000087 650D0A24            <1>
     8 0000008B 43616E6E6F74206F70- <1> badOpenStr  db "Cannot open specified file",CR,LF,"$"
     8 00000094 656E20737065636966- <1>
     8 0000009D 6965642066696C650D- <1>
     8 000000A6 0A24                <1>
     9 000000A8 43616E6E6F74207061- <1> badFileStr  db "Cannot parse sepcified filespec",CR,LF,"$"
     9 000000B1 727365207365706369- <1>
     9 000000BA 666965642066696C65- <1>
     9 000000C3 737065630D0A24      <1>
    10 000000CA 496E76616C69642050- <1> badParm     db "Invalid Parameter",CR,LF,"$"
    10 000000D3 6172616D657465720D- <1>
    10 000000DC 0A24                <1>
    11 000000DE 456E74727920657272- <1> badInput    db "Entry error",CR,LF,"$"
    11 000000E7 6F720D0A24          <1>
    12 000000EC 5265616C6C6F636174- <1> badRealloc  db "Reallocation error",CR,LF,"$"
    12 000000F5 696F6E206572726F72- <1>
    12 000000FE 0D0A24              <1>
    13 00000101 4E6F7420656E6F7567- <1> badMemSize  db "Not enough memory to load file", CR,LF,"$"
    13 0000010A 68206D656D6F727920- <1>
    13 00000113 746F206C6F61642066- <1>
    13 0000011C 696C650D0A24        <1>
    14 00000122 43616E6E6F74206564- <1> badFileExt  db "Cannot edit .BAK file--rename file",CR,LF,"$"
    14 0000012B 6974202E42414B2066- <1>
    14 00000134 696C652D2D72656E61- <1>
    14 0000013D 6D652066696C650D0A- <1>
    14 00000146 24                  <1>
    15 00000147 43616E6E6F74206D61- <1> badBkupStr  db "Cannot make .BAK file",CR,LF,"$"
    15 00000150 6B65202E42414B2066- <1>
    15 00000159 696C650D0A24        <1>
    35                                  Segment .bss align=1 follows=.data nobits
    36                                  bssStart:
    37                                  %include "./Data/edbss.asm"
     1 00000000 ??                  <1> pathsepChar db ?    ;Default \, Alternative /
     2 00000001 ??                  <1> switchChar  db ?    ;Default /, Alternative -
     3                              <1> 
     4                              <1> ;All variables that dont need initialisation go here
     5 00000002 ??                  <1> roFlag      db ?    ;Flag is set if file is read-only. Cannot edit the file.
     6 00000003 ??                  <1> newFileFlag db ?    ;Flag indicating the file being made is new (when set, above flag meaningless)
     7 00000004 ??                  <1> noEofChar   db ?    ;Flag is set if we are not to check for ^Z chars found in the file
     8 00000005 ??                  <1> eofReached  db ?    ;When we reach EOF for file on disk, set to -1, else 0
     9                              <1> 
    10                              <1> ;Memory Related variables
    11 00000006 ????????????????    <1> memPtr      dq ?    ;Ptr to the memory arena given by DOS
    12 0000000E ????????            <1> arenaSize   dd ?    ;Size of the arena in bytes 
    13 00000012 ????????            <1> fillSize    dd ?    ;Size of 3/4 of the arena in bytes
    14 00000016 ????????            <1> textLen     dd ?    ;Number of chars in the arena
    15 0000001A ????????????????    <1> endOfArena  dq ?    ;Ptr to the last byte in the arena
    16                              <1> 
    17                              <1> ;Don't jiggle these symbols, need dword to be together for -1
    18 00000022 ????                <1> readHdl     dw ?    ;Contain the file handle for the open file
    19 00000024 ????                <1> writeHdl    dw ?    ;Handle to the temporary file
    20                              <1> 
    21 00000026 <res 80h>           <1> pathspec    db 128 dup (?)  ;Space for the 128 byte buffer for full filename
    22                              <1> wkfile:                     ;Ptr to below path for "working" file
    23 000000A6 <res 80h>           <1> bkupfile    db 128 dup (?)  ;Pathspec for backup file and working .??? file
    24                              <1> 
    25                              <1> tmpNamePtr:         ;Ptr to the filename in the commandtail
    26 00000126 ????????????????    <1> fileNamePtr dq ?    ;Ptr to the name portion of filespec
    27                              <1> tmpNamePtr2:        ;Ptr to the end of the command in the commandtail
    28 0000012E ????????????????    <1> fileExtPtr  dq ?    ;Ptr to the extension of the file we are editing
    29                              <1> ;The above pointers point past the dot or pathseperator
    30                              <1> ;Both file*ptr's point to elements on WKFILE not pathspec
    31                              <1> 
    32                              <1> ;Command line variables
    33 00000136 <res 84h>           <1> cmdLine     db halfLine_size + 2 dup (?)
    34 000001BA ??                  <1> args        db ?    ;Count of arguments in parsed command line
    35 000001BB ??                  <1> cmdChar     db ?
    36                              <1> ;Arguments are converted to signed words where appropriate
    37                              <1> ; and parsed into here in the order they are encountered in.
    38                              <1> ;
    39 000001BC ????                <1> arg1        dw ?
    40 000001BE ????                <1> arg2        dw ?
    41 000001C0 ????                <1> arg3        dw ?
    42 000001C2 ????                <1> arg4        dw ?
    43 000001C4 <res 82h>           <1> argString   db halfLine_size dup (?)    ;Used by search and replace only
    44 00000246 ??                  <1> argPastEnd  db ?    ;0 -> normal, -1 -> Offset from end of mem (indicated by #)
    45                              <1> 
    46                              <1> ;The editLine gets preloaded with the original line before editing
    47                              <1> ;editLine has type "line"
    48 00000247 <res 100h>          <1> editLine    db 256 dup (?)  ;Line in which all editing takes place
    38                                  bssLen equ ($ - bssStart)
    39                                  Segment .stack align=16 follows=.bss nobits
    40                                  ;Use a 200 QWORD stack
    41 00000000 <res 640h>                  dq 200 dup (?)
    42                                  stackTop:
    43                                  endOfProgram:   ;Deallocate from here
    43          ------------------       info: assembly required 1+2+2 passes

